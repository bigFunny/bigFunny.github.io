<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue</title>
      <link href="/post/c0add594.html"/>
      <url>/post/c0add594.html</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js及相关工具的安装及使用"><a href="#Node-js及相关工具的安装及使用" class="headerlink" title="Node.js及相关工具的安装及使用"></a>Node.js及相关工具的安装及使用</h1><p><a href="https://www.kuangstudy.com/bbs/1351463043300708353">https://www.kuangstudy.com/bbs/1351463043300708353</a></p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>官方文档：<a href="https://nodejs.org/docs/latest-v12.x/api/async_hooks.html">https://nodejs.org/docs/latest-v12.x/api/async_hooks.html</a></p><blockquote><h3 id="启动tomcat服务器"><a href="#启动tomcat服务器" class="headerlink" title="启动tomcat服务器"></a>启动tomcat服务器</h3></blockquote><ul><li><p>导入require模块</p><p>创建一个httpserver.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个httpserver服务器</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, resp</span>) &#123;</span><br><span class="line">    <span class="comment">//以text-plain去解析hello world!</span></span><br><span class="line">    resp.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">//浏览器输出内容</span></span><br><span class="line">    resp.<span class="title function_">end</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;启动的服务：http://localhost:8080启动成功&quot;</span>);</span><br></pre></td></tr></table></figure><p>启动服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node httpserver.js</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080进入浏览器查看结果">http://localhost:8080进入浏览器查看结果</a></p><p>停止服务：ctrl + c</p></li></ul><blockquote><h3 id="Node-操作数据库"><a href="#Node-操作数据库" class="headerlink" title="Node-操作数据库"></a>Node-操作数据库</h3></blockquote><p>参考文献：<a href="https://www.npmjs.com/package/mysql">https://www.npmjs.com/package/mysql</a></p><p>1：安装mysql依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><p>2：定义sql.js进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1: 导入mysql依赖包,  mysql属于第三方的模块就类似于 java.sql一样的道理</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="comment">// 1: 创建一个mysql的Connection对象</span></span><br><span class="line"><span class="comment">// 2: 配置数据连接的信息 </span></span><br><span class="line"><span class="keyword">var</span> connection =mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&quot;mkxiaoer&quot;</span>,</span><br><span class="line">    <span class="comment">//数据库</span></span><br><span class="line">    <span class="attr">database</span>:<span class="string">&quot;testdb&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3：开辟连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"><span class="comment">// 4: 执行curd</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&quot;select * from kss_user&quot;</span>,<span class="keyword">function</span>(<span class="params">error,results,fields</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果查询出错，直接抛出</span></span><br><span class="line">    <span class="keyword">if</span>(error)<span class="keyword">throw</span> error;</span><br><span class="line">    <span class="comment">// 查询成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;results = &quot;</span>,results);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 5: 关闭连接</span></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br><span class="line"><span class="comment">// 最后一步：运行node sql.js 查看效果</span></span><br></pre></td></tr></table></figure><p>3：新建数据库:<code>db_test</code>和表<code>kss_user</code>表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat MySQL Data Transfer</span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 60011</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : testdb</span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 60011</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"> Date: 20/01/2021 21:38:55</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable constant_">SET</span> <span class="variable constant_">NAMES</span> utf8mb4;</span><br><span class="line"><span class="variable constant_">SET</span> <span class="variable constant_">FOREIGN_KEY_CHECKS</span> = <span class="number">0</span>;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- <span class="title class_">Table</span> structure <span class="keyword">for</span> kss_user</span><br><span class="line">-- ----------------------------</span><br><span class="line"><span class="variable constant_">DROP</span> <span class="variable constant_">TABLE</span> <span class="variable constant_">IF</span> <span class="variable constant_">EXISTS</span> <span class="string">`kss_user`</span>;</span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">`kss_user`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="title function_">int</span>(<span class="number">11</span>) <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="title function_">varchar</span>(<span class="number">255</span>) <span class="variable constant_">CHARACTER</span> <span class="variable constant_">SET</span> utf8 <span class="variable constant_">COLLATE</span> utf8_general_ci <span class="variable constant_">NULL</span> <span class="variable constant_">DEFAULT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> (<span class="string">`id`</span>) <span class="variable constant_">USING</span> <span class="variable constant_">BTREE</span></span><br><span class="line">) <span class="variable constant_">ENGINE</span> = <span class="title class_">InnoDB</span> <span class="variable constant_">CHARACTER</span> <span class="variable constant_">SET</span> = utf8 <span class="variable constant_">COLLATE</span> = utf8_general_ci <span class="variable constant_">ROW_FORMAT</span> = <span class="title class_">Compact</span>;</span><br><span class="line">-- ----------------------------</span><br><span class="line">-- <span class="title class_">Records</span> <span class="keyword">of</span> kss_user</span><br><span class="line">-- ----------------------------</span><br><span class="line"><span class="variable constant_">INSERT</span> <span class="variable constant_">INTO</span> <span class="string">`kss_user`</span> <span class="variable constant_">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;学相伴&#x27;</span>);</span><br><span class="line"><span class="variable constant_">INSERT</span> <span class="variable constant_">INTO</span> <span class="string">`kss_user`</span> <span class="variable constant_">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;广东&#x27;</span>);</span><br><span class="line"><span class="variable constant_">SET</span> <span class="variable constant_">FOREIGN_KEY_CHECKS</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>4、运行sql.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node sql</span><br></pre></td></tr></table></figure><blockquote><p>mysql8会报错</p></blockquote><p>法一：修改mysql的加密方式（不推荐）</p><p>详细查看：<a href="https://waylau.com/node.js-mysql-client-does-not-support-authentication-protocol/">https://waylau.com/node.js-mysql-client-does-not-support-authentication-protocol/</a></p><p>法二：用mysql2模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un mysql &amp;&amp; npm i mysql2</span><br></pre></td></tr></table></figure><p>然后调用模块mysql2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="ES6的语法：let和const命令"><a href="#ES6的语法：let和const命令" class="headerlink" title="ES6的语法：let和const命令"></a>ES6的语法：let和const命令</h3><p>let : 可变变量<br>const 是常量<br>var：最原始。</p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;a&#125;</span>world!`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br></pre></td></tr></table></figure><h3 id="ES6的语法：函数默认参数与箭头函数"><a href="#ES6的语法：函数默认参数与箭头函数" class="headerlink" title="ES6的语法：函数默认参数与箭头函数"></a>ES6的语法：函数默认参数与箭头函数</h3><ul><li><p>默认参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认参数 给参数列表设定初始值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a =<span class="number">100</span>,b=<span class="number">100</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行方法，会用默认值填充，打印出来100,200</span></span><br><span class="line"><span class="title function_">add</span>();</span><br><span class="line"><span class="comment">// 覆盖默认值打印  结果是1，2      </span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><p>（参数）&#x3D;&gt;{}  ——&gt;    (参数)&#x3D;&gt;返回参数的表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原函数</span></span><br><span class="line"><span class="keyword">var</span> getAge = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">getAge1</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">getAge2</span> = (<span class="params">a, b</span>) =&gt; b - a;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAge</span>(<span class="number">2000</span>, <span class="number">2020</span>));<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAge1</span>(<span class="number">2000</span>, <span class="number">2020</span>));<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getAge2</span>(<span class="number">2000</span>, <span class="number">2020</span>));<span class="comment">//20</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6的语法：对象初始化简写"><a href="#ES6的语法：对象初始化简写" class="headerlink" title="ES6的语法：对象初始化简写"></a>ES6的语法：对象初始化简写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">&lt;title&gt;对象简写&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function person(name, age) &#123;</span><br><span class="line">        //return &#123;name:name,age:age&#125;;</span><br><span class="line">        // 对象简写</span><br><span class="line">        return &#123; name, age &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 调用和执行</span><br><span class="line">    var json = person(&quot;小花花美美&quot;, 20);</span><br><span class="line">    console.log(json.name, json.age);</span><br><span class="line">    //========================= 实战应用 =========================</span><br><span class="line">    //&lt;button onclick=&quot;login()&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">    function login() &#123;</span><br><span class="line">        var username = $(&quot;#username&quot;).val();</span><br><span class="line">        var password = $(&quot;#password&quot;).val();</span><br><span class="line">        // 发送ajax</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            // 对象简写</span><br><span class="line">            data: &#123; username, password &#125;,</span><br><span class="line">            // 原始写分</span><br><span class="line">            //data:&#123;username:username,password:password&#125;,</span><br><span class="line">            success() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ES6的语法：对象解构"><a href="#ES6的语法：对象解构" class="headerlink" title="ES6的语法：对象解构"></a>ES6的语法：对象解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象解构 --- es6提供一些获取快捷获取对象属性和行为方式</span></span><br><span class="line">        <span class="keyword">var</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">32</span>,</span><br><span class="line">            <span class="attr">language</span>:<span class="string">&quot;cn&quot;</span>,</span><br><span class="line">            <span class="comment">// 函数也有处理</span></span><br><span class="line">            <span class="comment">/* say:function()&#123;</span></span><br><span class="line"><span class="comment">                console.log(this.name+&quot;年龄是：&quot; + this.age);</span></span><br><span class="line"><span class="comment">            &#125;   */</span></span><br><span class="line">            <span class="comment">/* say:()=&gt;&#123;</span></span><br><span class="line"><span class="comment">                console.log(this.name+&quot;年龄是：&quot; + this.age);</span></span><br><span class="line"><span class="comment">            &#125;  */</span></span><br><span class="line">            <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;年龄是：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// ===========================传统的做法========================</span></span><br><span class="line">        <span class="keyword">var</span> name = person.<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">var</span> age = person.<span class="property">age</span>;</span><br><span class="line">        person.<span class="title function_">say</span>();</span><br><span class="line">        <span class="comment">// ===========================对象解构做法========================</span></span><br><span class="line">        <span class="comment">//es6的做法 前提：默认情况name,age必须是jsonkey.</span></span><br><span class="line">        <span class="keyword">var</span> &#123;name,age&#125; = person;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age);</span><br><span class="line">        <span class="comment">// 可以用冒号取小名</span></span><br><span class="line">        <span class="keyword">var</span> &#123;name,age,<span class="attr">language</span>:lan&#125; = person;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,lan);</span><br></pre></td></tr></table></figure><h3 id="ES6的语法：传播操作符【…】"><a href="#ES6的语法：传播操作符【…】" class="headerlink" title="ES6的语法：传播操作符【…】"></a>ES6的语法：传播操作符【…】</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1： 定义一个对象</span></span><br><span class="line">        <span class="keyword">var</span> person1 = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;小飞飞&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 2： 对象解构</span></span><br><span class="line">        <span class="keyword">var</span> &#123;name,age&#125; = person1;</span><br><span class="line">        <span class="comment">// =========================== ... 对象融合=====================</span></span><br><span class="line">        <span class="keyword">var</span> person2 = &#123;</span><br><span class="line">            ...person1,</span><br><span class="line">            <span class="attr">gender</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">tel</span>:<span class="number">13478900</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person2);</span><br><span class="line">        <span class="comment">// =========================== ... 对象取值=====================</span></span><br><span class="line">        <span class="comment">// ... 对象取值</span></span><br><span class="line">        <span class="keyword">var</span> person3 = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">            <span class="attr">gender</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">tel</span>:<span class="string">&quot;11111&quot;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;广州&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// ...person4 把剩下没取走给我。</span></span><br><span class="line">        <span class="keyword">var</span> &#123;name,gender,...person4&#125; = person3;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(person4)</span><br><span class="line">        <span class="comment">// =================场景分析 -----伪代码========================</span></span><br><span class="line">        <span class="comment">// 模拟后台：异步查询返回用户数据 如下：</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">findUsers</span>(<span class="params"></span>)&#123;</span><br><span class="line">            $.<span class="title function_">get</span>(<span class="string">&quot;xxxxx&quot;</span>,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> res = &#123;</span><br><span class="line">                    <span class="attr">pages</span>:<span class="number">11</span>,</span><br><span class="line">                    <span class="attr">pageSize</span>:<span class="number">10</span>,</span><br><span class="line">                    <span class="attr">pageNo</span>:<span class="number">1</span>,</span><br><span class="line">                    <span class="attr">firstFlag</span>:<span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">lastFlag</span>:<span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">total</span>:<span class="number">123</span>,</span><br><span class="line">                    <span class="attr">data</span>:[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;],</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// ==========================对象 ... 取值===============</span></span><br><span class="line">                <span class="keyword">var</span> &#123;<span class="attr">data</span>:users,...pagesjon&#125; = res;</span><br><span class="line">                <span class="comment">//等价于</span></span><br><span class="line">                <span class="comment">/*  var users = res.data;</span></span><br><span class="line"><span class="comment">                   var pagesjon = &#123;</span></span><br><span class="line"><span class="comment">                    res = &#123;</span></span><br><span class="line"><span class="comment">                        pages:11,</span></span><br><span class="line"><span class="comment">                        pageSize:10,</span></span><br><span class="line"><span class="comment">                        pageNo:1,</span></span><br><span class="line"><span class="comment">                        firstFlag:true,</span></span><br><span class="line"><span class="comment">                        lastFlag:false,</span></span><br><span class="line"><span class="comment">                        total:123,</span></span><br><span class="line"><span class="comment">                    &#125;; */</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Npm包管理器"><a href="#Npm包管理器" class="headerlink" title="Npm包管理器"></a>Npm包管理器</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化</span><br><span class="line">npm init</span><br><span class="line">#按照提示输入相关信息，如果是用默认值则直接回车即可。</span><br><span class="line">#<span class="attr">name</span>: 项目名称</span><br><span class="line">#<span class="attr">version</span>: 项目版本号</span><br><span class="line">#<span class="attr">description</span>: 项目描述</span><br><span class="line">#<span class="attr">keywords</span>: &#123;<span class="title class_">Array</span>&#125;关键词，便于用户搜索到我们的项目</span><br><span class="line">#最后会生成package.<span class="property">json</span>文件，这个是包的配置文件，相当于maven的pom.<span class="property">xml</span></span><br><span class="line">#我们之后也可以根据需要进行修改。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如果想直接生成 package.<span class="property">json</span> 文件，那么可以使用命令</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h3 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span><br><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org </span></span><br><span class="line">#查看npm配置信息</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#使用 npm install 安装依赖包的最新版，</span><br><span class="line">#模块安装的位置：项目目录\node_modules</span><br><span class="line">#安装会自动在项目目录下添加 package-lock.<span class="property">json</span>文件，这个文件帮助锁定安装包的版本</span><br><span class="line">#同时package.<span class="property">json</span> 文件中，依赖包会被添加到dependencies节点下，类似maven中的 &lt;dependencies&gt;</span><br><span class="line">npm install jquery</span><br><span class="line">#如果安装时想指定特定的版本</span><br><span class="line">npm install jquery@<span class="number">2.1</span>.<span class="property">x</span></span><br><span class="line">#devDependencies节点：开发时的依赖包，项目打包到生产环境的时候不包含的依赖</span><br><span class="line">#使用 -D参数将依赖添加到devDependencies节点</span><br><span class="line">npm install --save-dev eslint</span><br><span class="line">#或</span><br><span class="line">npm install -D eslint</span><br><span class="line">#全局安装</span><br><span class="line">#<span class="title class_">Node</span>.<span class="property">js</span>全局安装的npm包和工具的位置：用户目录\<span class="title class_">AppData</span>\<span class="title class_">Roaming</span>\npm\node_modules</span><br><span class="line">#一些命令行工具常使用全局安装的方式</span><br><span class="line">npm install -g webpack</span><br><span class="line">#npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</span><br><span class="line">npm install #根据package.<span class="property">json</span>中的配置下载依赖，初始化项目</span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#更新包（更新到最新版本）</span><br><span class="line">npm update 包名</span><br><span class="line">#全局更新</span><br><span class="line">npm update -g 包名</span><br><span class="line">#卸载包</span><br><span class="line">npm uninstall 包名</span><br><span class="line">#全局卸载</span><br><span class="line">npm uninstall -g 包名</span><br></pre></td></tr></table></figure><h2 id="Babel的使用"><a href="#Babel的使用" class="headerlink" title="Babel的使用"></a>Babel的使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br><span class="line">#查看是否安装成功</span><br><span class="line">babel --version</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装转码器，在项目中安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-es2015</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># npm install --save-dev csv-loader xml-loader</span><br><span class="line"># 转码结果写入一个文件</span><br><span class="line">mkdir dist1</span><br><span class="line"># --out-file 或 -o 参数指定输出文件</span><br><span class="line">babel src/example.<span class="property">js</span> --out-file dist1/compiled.<span class="property">js</span></span><br><span class="line"># 或者</span><br><span class="line">babel src/example.<span class="property">js</span> -o dist1/compiled.<span class="property">js</span></span><br><span class="line"># 整个目录转码</span><br><span class="line">mkdir dist2</span><br><span class="line"># --out-dir 或 -d 参数指定输出目录</span><br><span class="line">babel src --out-dir dist2</span><br><span class="line"># 或者</span><br><span class="line">babel src -d dist2</span><br></pre></td></tr></table></figure><h3 id="运行时执行转码"><a href="#运行时执行转码" class="headerlink" title="运行时执行转码"></a>运行时执行转码</h3><p>配置package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// ...，</span></span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;babel src -d dist2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出成员：</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">sum</span>: sum,</span><br><span class="line">    <span class="attr">subtract</span>: subtract,</span><br><span class="line">    <span class="attr">multiply</span>: multiply,</span><br><span class="line">    <span class="attr">divide</span>: divide</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入模块，注意：当前路径必须写 ./</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./四则运算.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br><span class="line"><span class="keyword">const</span> r1 = m.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> r2 = m.<span class="title function_">subtract</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1,r2)</span><br></pre></td></tr></table></figure><h3 id="ES6模块化规范"><a href="#ES6模块化规范" class="headerlink" title="ES6模块化规范"></a>ES6模块化规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">导出模块</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据列表&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只取需要的方法即可，多个方法用逗号分隔</span></span><br><span class="line"><span class="keyword">import</span> &#123; getList, save &#125; <span class="keyword">from</span> <span class="string">&#x27;./userApi.js&#x27;</span></span><br><span class="line"><span class="title function_">getList</span>()</span><br><span class="line"><span class="title function_">save</span>()</span><br></pre></td></tr></table></figure><p>写法二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据列表2&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;保存数据2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;./userApi2.js&quot;</span></span><br><span class="line">user.<span class="title function_">getList</span>()</span><br><span class="line">user.<span class="title function_">save</span>()</span><br></pre></td></tr></table></figure><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>全局安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure><p>版本号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure><h3 id="js打包"><a href="#js打包" class="headerlink" title="js打包"></a>js打包</h3><p>初始化项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>src项目下写几个js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">info</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./common&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line">common.<span class="title function_">info</span>(<span class="string">&#x27;Hello world!&#x27;</span> + utils.<span class="title function_">add</span>(<span class="number">100</span>, <span class="number">200</span>));</span><br></pre></td></tr></table></figure><p>打包：创建config.js文件夹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">//Node.js内置模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="comment">//配置入口文件</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">//输出路径，__dirname：当前文件所在路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//输出文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p></blockquote><p>打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack --mode=development</span><br><span class="line">#执行后查看bundle.<span class="property">js</span> 里面包含了上面两个js文件的内容并进行了代码压缩</span><br></pre></td></tr></table></figure><p>也可以修改package.json文件文件进行打包指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//...,</span></span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack --mode=development&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="css打包"><a href="#css打包" class="headerlink" title="css打包"></a>css打包</h3><p>安装打包模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p>修改config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>); <span class="comment">//Node.js内置模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//...,</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//其他配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,    <span class="comment">//打包规则应用到以css结尾的文件上</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;  </span><br><span class="line">        ]  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在src文件夹</strong>创建style.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    <span class="attr">background</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.js，在第一行引入style.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./style.css&#x27;</span>);</span><br></pre></td></tr></table></figure><p>打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>视频学习：<a href="https://www.bilibili.com/video/BV1wR4y1377K/?spm_id_from=333.999.0.0&amp;vd_source=0eb91c8870140dce3593534de767f4cf">https://www.bilibili.com/video/BV1wR4y1377K/?spm_id_from=333.999.0.0&amp;vd_source=0eb91c8870140dce3593534de767f4cf</a></p><p>文档学习：<a href="https://blog.csdn.net/qq1195566313/article/details/122167155?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166622608916782412544875%2522%252C%2522scm%2522%253A%252220140713.130102334">https://blog.csdn.net/qq1195566313/article/details/122167155?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166622608916782412544875%2522%252C%2522scm%2522%253A%252220140713.130102334</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">    //变量声明：let/var 变量名：类型 = 赋值;</span><br><span class="line">    let num:Number = 32;</span><br><span class="line">    let str:String = &quot;hello world&quot;;</span><br><span class="line">    let str2:String = `$&#123;str&#125;!`</span><br><span class="line">    let bool:boolean = true;</span><br><span class="line">    let u:void = undefined;</span><br><span class="line">    let n:null = null;</span><br><span class="line">    console.log(num,str2,bool,u,n);</span><br><span class="line">    //联合类型</span><br><span class="line">    let b: number|String = &quot;11220&quot;;</span><br><span class="line">    //交叉类型</span><br><span class="line">    interface A&#123;</span><br><span class="line">        name:String,</span><br><span class="line">    &#125;</span><br><span class="line">    interface B&#123;</span><br><span class="line">        age:Number,</span><br><span class="line">    &#125;</span><br><span class="line">    const c:A&amp;B = &#123;name:&quot;小明&quot;,age:18&#125;;</span><br><span class="line">    console.log(c);</span><br><span class="line">    //类型断言 as 指定type类型</span><br><span class="line">    const fd = (type:A|B):String =&gt;&#123;</span><br><span class="line">        return (type as A).name;</span><br><span class="line">    &#125;</span><br><span class="line">    //所有类型,没有指定类型默认为any类型</span><br><span class="line">    let anys:any = 123;</span><br><span class="line">    anys = &quot;hello 123&quot;</span><br><span class="line">    console.log(anys);</span><br><span class="line">    //unknow</span><br><span class="line">    let value:unknown = 55;</span><br><span class="line">    value = [1,2,3];</span><br><span class="line">    value = Symbol(&quot;type&quot;);</span><br><span class="line">    console.log(value);</span><br><span class="line">    //unknown类型不能赋值给其他类型</span><br><span class="line">    //函数function 函数名():类型&#123;&#125;</span><br><span class="line">    function said():void&#123;</span><br><span class="line">        console.log(&quot;hello world!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    said();</span><br><span class="line">    /**</span><br><span class="line">     * 接口和对象</span><br><span class="line">     */</span><br><span class="line">    //?表示该属性可以不实现</span><br><span class="line">    //readonly,只能读取，不能修改</span><br><span class="line">    interface Person&#123;</span><br><span class="line">        str:string,</span><br><span class="line">        str2:string,</span><br><span class="line">        num?:number,</span><br><span class="line">        readonly name:String</span><br><span class="line">    &#125;</span><br><span class="line">    //对象实现接口</span><br><span class="line">    const person:Person = &#123;</span><br><span class="line">        str:&quot;hello &quot;,</span><br><span class="line">        str2:&quot;world!&quot;,</span><br><span class="line">        name:&quot;person&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(person)</span><br><span class="line">    //继承接口</span><br><span class="line">    interface Student extends Person&#123;</span><br><span class="line">        said():void,</span><br><span class="line">    &#125;</span><br><span class="line">    //实现</span><br><span class="line">    let student:Student = &#123;</span><br><span class="line">        str:&quot;hello &quot;,</span><br><span class="line">        str2:&quot;world!&quot;,</span><br><span class="line">        name:&quot;student&quot;,</span><br><span class="line">        said:()=&gt;&#123;</span><br><span class="line">            console.log(`$&#123;student.name&#125;` + &quot;对象&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(student);</span><br><span class="line">    student.said();</span><br><span class="line">    /**</span><br><span class="line">     * 数组</span><br><span class="line">     */</span><br><span class="line">    //数组类型,指定类型数组不可以添加其他类型</span><br><span class="line">    let arr:number[] = [1,2,3];</span><br><span class="line">    //加到前面</span><br><span class="line">    arr.unshift(4);</span><br><span class="line">    //加到后面</span><br><span class="line">    arr.push(6);</span><br><span class="line">    console.log(arr);</span><br><span class="line">    //数组泛型</span><br><span class="line">    let arr2:Array&lt;number&gt; = [1,2,3];</span><br><span class="line">    //接口表示数组</span><br><span class="line">    interface NumberArray&#123;</span><br><span class="line">        [index:number]:number;</span><br><span class="line">    &#125;</span><br><span class="line">    let myarray:NumberArray = [1,1,5];</span><br><span class="line">    //多维数组</span><br><span class="line">    let a:number[][] = [[1,2],[1,2,3]];</span><br><span class="line">    /**</span><br><span class="line">     * 函数const 函数名 = (形参):返回类型=&gt;&#123;&#125;</span><br><span class="line">     */</span><br><span class="line">    //函数类型</span><br><span class="line">    const hel = (str:String)=&gt;&#123;</span><br><span class="line">        console.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">    hel(&quot;hello world!&quot;);</span><br><span class="line">    //可选参数函数,带号的要在后面</span><br><span class="line">    const hel2 = (str:String,name?:String):String=&gt;&#123;</span><br><span class="line">        return `$&#123;str&#125; $&#123;name&#125;`;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(hel2(&quot;hello&quot;,&quot;Jon&quot;));</span><br><span class="line">    console.log(hel2(&quot;hello&quot;));</span><br><span class="line">    //参数默认值</span><br><span class="line">    const hel3 = (str:String = &quot;hello world!&quot;):void=&gt;&#123;</span><br><span class="line">        console.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">    hel3();</span><br><span class="line">    //接口定义函数 函数名(形参):返回类型</span><br><span class="line">    interface Hel&#123;</span><br><span class="line">        hel(str:String):void;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义多形参函数，items为剩下形参的数组</span><br><span class="line">    const hel4 = (str:String,...items:any)=&gt;&#123;</span><br><span class="line">        console.log(str);</span><br><span class="line">        return items;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(hel4(&quot;hello&quot;,1,2,35));</span><br><span class="line">    /**</span><br><span class="line">     * ECMAScript 的内置对象</span><br><span class="line">     */</span><br><span class="line">    //Boolean、Number、string、RegExp(正则表达式)、Date、Error0</span><br><span class="line">    let str3:String = new String(&quot;hello world!&quot;);</span><br><span class="line">    let date:Date = new Date();</span><br><span class="line">    let regExp:RegExp = new RegExp(&quot;/^b/&quot;);</span><br><span class="line">    let e:Error = new Error(&quot;error!&quot;);</span><br><span class="line">    console.log(str3,date,regExp);</span><br><span class="line">    console.log(e);</span><br><span class="line">    /**</span><br><span class="line">     * DOM 和 BOM 的内置对象</span><br><span class="line">     */</span><br><span class="line">    let dv:HTMLElement= document.getElementById(&quot;app&quot;) as HTMLDivElement; </span><br><span class="line">    dv.style.backgroundColor = &quot;red&quot;; </span><br><span class="line">    /**</span><br><span class="line">     * 定义函数返回类型,Promise</span><br><span class="line">     */ </span><br><span class="line">    function pro():Promise&lt;number&gt;&#123;</span><br><span class="line">         return new Promise&lt;number&gt;((resolve,reject)=&gt;&#123;</span><br><span class="line">            resolve(1);</span><br><span class="line">         &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    pro().then(res=&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    /**</span><br><span class="line">     * Class类</span><br><span class="line">     * public修饰符</span><br><span class="line">     */</span><br><span class="line">    class C&#123;</span><br><span class="line">        public name:String;</span><br><span class="line">        private age:Number;</span><br><span class="line">        //静态变量</span><br><span class="line">        static sta:String;</span><br><span class="line">        constructor(name:String,age:number)&#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        public hel()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //静态方法</span><br><span class="line">        static run()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //元组</span><br><span class="line">    let arr3:[number,string] = [1,&#x27;hello&#x27;];</span><br><span class="line">    console.log(arr3[1].length);</span><br><span class="line">    //枚举</span><br><span class="line">    enum Color&#123;</span><br><span class="line">        Red = &#x27;red&#x27;,</span><br><span class="line">        Green = &#x27;green&#x27;,</span><br><span class="line">        Blue = &#x27;blue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义类型别名</span><br><span class="line">    type str = String;</span><br><span class="line">    let s:str = &quot;hello&quot;</span><br><span class="line">    //函数类型别名</span><br><span class="line">    type str2 = () =&gt; String;</span><br><span class="line">    let s2:str2 = () =&gt; &quot;hello?&quot;;</span><br><span class="line">    //symbol类</span><br><span class="line">    let sym = Symbol();</span><br><span class="line">    let oby =&#123;</span><br><span class="line">        [sym]:&quot;value&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(oby[sym]);</span><br><span class="line">    //泛型函数</span><br><span class="line">    function hell&lt;T&gt;(a:T,b:T):Array&lt;T&gt;&#123;</span><br><span class="line">        return [a,b];</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    interface Len&#123;</span><br><span class="line">        length:number;</span><br><span class="line">    &#125;</span><br><span class="line">    function getLength&lt;T extends Len&gt;(ar:T)&#123;</span><br><span class="line">        return ar.length;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(getLength&lt;String&gt;(&#x27;123&#x27;));</span><br><span class="line">    //迭代器</span><br><span class="line">    let t:Array&lt;number&gt; = [1,2,3,4];</span><br><span class="line">        //获得t数组的迭代器</span><br><span class="line">    let i:Iterator&lt;number&gt; = t[Symbol.iterator]();</span><br><span class="line">    </span><br><span class="line">    let next:any = &#123;done:false&#125;;</span><br><span class="line">    while(!next.done)&#123;</span><br><span class="line">        next = i.next();</span><br><span class="line">        console.log(next);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h1><p>Vue时一款渐进式javaScript框架，也是一项mvvm框架</p><p>参考文档：<a href="https://cn.vuejs.org/guide/introduction.html">简介 | Vue.js (vuejs.org)</a></p><h1 id="第一个Vue项目"><a href="#第一个Vue项目" class="headerlink" title="第一个Vue项目"></a>第一个Vue项目</h1><h2 id="创建Vue应用（看你喜好）"><a href="#创建Vue应用（看你喜好）" class="headerlink" title="创建Vue应用（看你喜好）"></a>创建Vue应用（看你喜好）</h2><blockquote><p> 确保安装的为最新版本<a href="https://nodejs.org/">Node.js</a></p></blockquote><p>然后执行，安装vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><blockquote><p> 如果不确定是否要开启某个功能，你可以直接按下回车键选择 <code>No</code>。在项目被创建后，</p></blockquote><p>通过以下步骤安装依赖并启动开发服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;your-project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>将应用发布到生产环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="通过-CDN-使用-Vue"><a href="#通过-CDN-使用-Vue" class="headerlink" title="通过 CDN 使用 Vue"></a>通过 CDN 使用 Vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用全局构建版本"><a href="#使用全局构建版本" class="headerlink" title="使用全局构建版本"></a>使用全局构建版本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用ES-模块构建版本"><a href="#使用ES-模块构建版本" class="headerlink" title="使用ES 模块构建版本"></a>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">ES 模块</a>构建版本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><code>nvm</code>:<a href="https://nvm.uihtm.com/">nvm文档手册 - nvm是一个nodejs的版本管理工具 (uihtm.com)</a></p><blockquote><p>安装nvm前要把所有node.js卸载安静</p></blockquote><ul><li><p>构建项目</p><p>法一：可以构建多种框架项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><img src="vue/p1.png"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>点击：<a href="http://127.0.0.1:5173/%E8%BF%9B%E5%85%A5">http://127.0.0.1:5173/进入</a></p><p>法二：构建vue的全面项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure></li></ul><h1 id="模板语法和vue的指令"><a href="#模板语法和vue的指令" class="headerlink" title="模板语法和vue的指令"></a>模板语法和vue的指令</h1><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;mes&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="attr">mes</span>:<span class="title class_">String</span> = <span class="string">&quot;hello world!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模板语法支持条件运算</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;mes?&quot;hello world!&quot;:&quot;不&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">mes</span>:boolean = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>支持运算</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;num1 + num2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">num1</span>:number = <span class="number">25</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">num2</span>:number = <span class="number">52</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>支持Api的使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;array.length&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">num1</span>:number = <span class="number">25</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">num2</span>:number = <span class="number">52</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">array</span>:<span class="title class_">Array</span>&lt;number&gt; = [num1,num2];</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg.split(&quot;:&quot;).join(&quot;￥&quot;)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">String</span> = <span class="string">&quot;苹果:25,梨子:26&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue指定"><a href="#vue指定" class="headerlink" title="vue指定"></a>vue指定</h2><blockquote><p>v-表示vue指定</p></blockquote><blockquote><p>v-text表示文本内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">String</span> = <span class="string">&quot;hello world!&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-html表示html类型文本</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">String</span> = <span class="string">&quot;&lt;a src=&#x27;#&#x27;&gt;hello world!&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-if表示元素是否显示（切换真假DOM）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">String</span> = <span class="string">&quot;&lt;a src=&#x27;#&#x27;&gt;hello world!&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">flag</span>:boolean = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可观察到<code>&lt;h1&gt;</code>块不见了</p><blockquote><p>v-else-if 表示 <code>v-if</code> 的“else if 块”</p></blockquote><blockquote><p>v-else  表示v-if条件收尾语句，条件选择显示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;`$&#123;msg&#125;1`&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;num == 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;`$&#123;msg&#125;2`&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;num == 25&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;`$&#123;msg&#125;3`&quot;</span> <span class="attr">v-else</span> = <span class="string">&quot;num == 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">String</span> = <span class="string">&quot;&lt;a src=&#x27;#&#x27;&gt;hello world!&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">num</span>:number = <span class="number">25</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-show 表示是否控制元素显示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-show</span>=<span class="string">false</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不显示</p><blockquote><p>v-on 给元素添加事件，也可以写成@+事件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hell()&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">hell</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;hello world!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以写成@click</p><blockquote><p>v-bind 简写:  用来绑定元素的属性Attr</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: 楷体;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: teal;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> blanchedalmond solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-mode 双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>输入<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;str&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> str = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: 楷体;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: teal;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> blanchedalmond solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-for 用来遍历元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;num in nums&quot;</span>&gt;</span>元素&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">nums</span>:<span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: 楷体;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: teal;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">10px</span> blanchedalmond solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ref全家桶（响应数据绑定）"><a href="#ref全家桶（响应数据绑定）" class="headerlink" title="ref全家桶（响应数据绑定）"></a>ref全家桶（响应数据绑定）</h1><p>正常情况下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> msg = <span class="string">&quot;hello&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    msg = <span class="string">&quot;Hi&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们这样使用，点击按钮并不会有响应</p><blockquote><p>要想有响应，就需要用到<code>ref</code>相关的响应API</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//导入ref API</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义需要响应的变量，String为value的类型</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> msg = ref&lt;<span class="title class_">String</span>&gt;(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改时，修改value的值即可</span></span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = <span class="string">&quot;hi&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此时msg为Ref类型，只是.value为String类型</p></blockquote><blockquote><p>定义value类型也可以用<code>Ref</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//导入Ref</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> type &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//用Ref&lt;String&gt;定义value的类型</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">Ref</span>&lt;<span class="title class_">String</span>&gt; = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = <span class="string">&quot;hi&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(msg.<span class="property">value</span>));<span class="comment">//String</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>isRef</code>判断是不是一个ref对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(isRef(msg));//ture</span><br></pre></td></tr></table></figure><blockquote><p><code>shallowRef</code>使修改对象的属性时不发生响应</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref, shallowRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> type &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">   type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">Ref</span>&lt;<span class="title class_">Obj</span>&gt; = <span class="title function_">shallowRef</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;小明&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&quot;小红&quot;</span>;<span class="comment">//没响应</span></span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = &#123;<span class="attr">name</span>:<span class="string">&quot;小兰&quot;</span>&#125;<span class="comment">//响应</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>triggerRef</code>强制更新页面的DOM，可把不响应变成响应</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref, shallowRef, triggerRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> type &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">   type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">msg</span>:<span class="title class_">Ref</span>&lt;<span class="title class_">Obj</span>&gt; = <span class="title function_">shallowRef</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;小明&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&quot;小红&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">triggerRef</span>(msg)<span class="comment">//可以响应</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>customRef 自定义ref </p></blockquote><h1 id="Reactive全家桶"><a href="#Reactive全家桶" class="headerlink" title="Reactive全家桶"></a>Reactive全家桶</h1><blockquote><p> <code>reactive</code>用于绑定对象数组等复杂数值，无需用.value修改数值，不用于绑定普通数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> msg = reactive&lt;<span class="title class_">Obj</span>&gt;(&#123;<span class="attr">name</span>:<span class="string">&quot;小明&quot;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">name</span> = <span class="string">&quot;小红&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>数组赋值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;nums&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> nums = reactive&lt;number[]&gt;([]);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//这样直接赋值是不行的</span></span></span><br><span class="line"><span class="language-javascript">    nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用push添加一个数值赋值</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;nums&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> nums = reactive&lt;number[]&gt;([]);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">nums2</span>:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">    nums.<span class="title function_">push</span>(...nums2);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>readonly 拷贝一份proxy对象将其设置为只读</p></blockquote><blockquote><p>shallowReactive  只能对浅层的数据 如果是深层的数据只会改变值 不会改变视图</p></blockquote><h1 id="to全家桶"><a href="#to全家桶" class="headerlink" title="to全家桶"></a>to全家桶</h1><p>主要介绍toRef，toRefs，toRaw</p><blockquote><p><code>toRef(obj)</code>如果obj是非响应式的就不会更新视图 数据是会变的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123;state&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">foo</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">bar</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state = <span class="title function_">toRef</span>(obj, <span class="string">&#x27;bar&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// bar 转化为响应式对象</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">   state.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, state);</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果obj是非响应式的就会更新视图 数据也会变的</p></blockquote><blockquote><p><code>toRefs</code>可以帮我们批量创建ref对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = <span class="title function_">toRefs</span>(obj)</span><br><span class="line"> </span><br><span class="line">foo.<span class="property">value</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo, bar);</span><br></pre></td></tr></table></figure><blockquote><p><code>toRaw</code> 将响应式对象转化为普通对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">toRaw</span>(obj)</span><br><span class="line"><span class="comment">// 响应式对象转化为普通对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, state);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h1><p>计算属性就是当依赖的属性的值发生变化的时候，才会触发他的更改，如果依赖的值，不发生变化的时候，使用的是缓存中的属性值。</p><blockquote><p>函数形式调用computed(()&#x3D;&gt;{retrun })</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;price$&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> price = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> price$ = computed&lt;<span class="title class_">String</span>&gt;(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="string">`$`</span> + price.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    price.<span class="property">value</span> = <span class="number">500</span>;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>对象形式computed（{get,set })，get返回，set设置</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changMsg()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;price$ = 25&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">import</span> &#123;ref,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> price = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> price$ = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">get</span>:<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> price.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">set</span>:<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        price.<span class="property">value</span> + value;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">changMsg</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小练习：购物车"><a href="#小练习：购物车" class="headerlink" title="小练习：购物车"></a>小练习：购物车</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 购物车 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;table&#x27;]&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(obj, index) in objs&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrease(obj)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#123;&#123;obj.number&#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase(obj)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;obj.price * obj.number&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总计:&#123;&#123;all()&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">   type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">number</span>:number,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>:number,</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="attr">objs</span>:<span class="title class_">Obj</span>[] = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;李宁&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">price</span>:<span class="number">120</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;耐克&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">price</span>:<span class="number">166</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;踏步&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">price</span>:<span class="number">180</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">   ])</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">decrease</span> = (<span class="params">obj:Obj</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(obj.<span class="property">number</span> &gt; <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">number</span>--;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params">obj:Obj</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">number</span>++;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> <span class="title function_">del</span> = (<span class="params">index:number</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        objs.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> all = ():<span class="function"><span class="params">number</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> all = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> obj <span class="keyword">of</span> objs)&#123;</span></span><br><span class="line"><span class="language-javascript">            all = all + obj.<span class="property">price</span> * obj.<span class="property">number</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> all;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.table</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">th</span>,<span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><blockquote><p>监听数值变化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref, watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> msg = ref&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watch</span>(msg,<span class="function">(<span class="params">newMsg,ordMsg</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新值:&quot;</span>+newMsg + <span class="string">&quot;旧值:&quot;</span>+ordMsg)</span></span><br><span class="line"><span class="language-javascript">    &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//立即执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//深度监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">deep</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;s)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h1><p>传入一个回调函数，函数里用到什么就会监听什么,会默认调用一次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref, watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> msg = ref&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">before</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">before</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//监听到之前执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>副作用刷新时机 flush 一般使用post</p></blockquote><table><thead><tr><th align="left"></th><th align="left">pre</th><th align="left">sync</th><th align="left">post</th></tr></thead><tbody><tr><td align="left">更新时机</td><td align="left">组件<strong>更新前</strong>执行</td><td align="left">强制效果始终同步触发</td><td align="left">组件<strong>更新后</strong>执行</td></tr></tbody></table><blockquote><p>onTrigger  可以帮助我们调试 watchEffect</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref, watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> msg = ref&lt;string&gt;(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">before</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">before</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//监听到之前执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">flush</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    onTrigger (e) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//进入断点调试</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//debugger</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="组件及vue的生命周期"><a href="#组件及vue的生命周期" class="headerlink" title="组件及vue的生命周期"></a>组件及vue的生命周期</h1><blockquote><p>组件</p></blockquote><p>每一个.vue 文件呢都可以充当组件来使用，每一个组件都可以复用</p><blockquote><p>导入一个组件</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>生命周期</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;div&quot;</span>&gt;</span>&#123;&#123;str&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref, onUnmounted,onBeforeUnmount,onUpdated,onBeforeUpdate,onBeforeMount,onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> str = ref&lt;<span class="title class_">String</span>&gt;(<span class="string">&quot;hello world!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> div = ref&lt;<span class="title class_">HTMLDivElement</span>&gt;();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    str.<span class="property">value</span> = <span class="string">&quot;不~我被修改了&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setup&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeMount</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建之前&quot;</span>,div.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建完成&quot;</span>,div.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//更新</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新数据时&quot;</span>,div.<span class="property">value</span>?.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新数据之后&quot;</span>,div.<span class="property">value</span>?.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//卸载</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onBeforeUnmount</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;卸载组件之前&quot;</span>,div.<span class="property">value</span>?.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;卸载组件&quot;</span>,div.<span class="property">value</span>?.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;flag = !flag&quot;</span>&gt;</span>安装-销毁<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> flag = ref&lt;<span class="title class_">Boolean</span>&gt;(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="less和scoped"><a href="#less和scoped" class="headerlink" title="less和scoped"></a>less和scoped</h1><p>less:</p><p><strong>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。这里呈现的是 Less 的官方文档（中文版），包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</strong></p><p>官方文档 <a href="https://less.bootcss.com/#%E6%A6%82%E8%A7%88">Less 快速入门 | Less.js 中文文档 - Less 中文网</a></p><blockquote><p>安装less</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader -D</span><br></pre></td></tr></table></figure><blockquote><p>使用less</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="布局小项目"><a href="#布局小项目" class="headerlink" title="布局小项目"></a>布局小项目</h1><p>flex布局:<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><p>实现一个类似布局</p><img src= "vue/p2.png"><h1 id="父子组件传参"><a href="#父子组件传参" class="headerlink" title="父子组件传参"></a>父子组件传参</h1><h2 id="父组件给子组件"><a href="#父组件给子组件" class="headerlink" title="父组件给子组件"></a>父组件给子组件</h2><blockquote><p>defineProps传参(js可用)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span> <span class="attr">:title</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&quot;./components/A.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">str</span>:<span class="title class_">String</span> = <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;title&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>:<span class="string">&quot;空&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ts特有</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span> <span class="attr">:title</span>=<span class="string">&quot;str&quot;</span> <span class="attr">:arr</span>=<span class="string">&quot;arr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&quot;./components/A.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="attr">str</span>:<span class="title class_">String</span> = <span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> arr = reactive&lt;number[]&gt;([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子集<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;i in arr&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">withDefaults</span>(defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//传入参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arr</span>:number[]</span></span><br><span class="line"><span class="language-javascript">&#125;&gt;(),&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//参数默认值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>:<span class="function">()=&gt;</span><span class="string">&quot;空&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arr</span>:<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> [<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子组件给父组件传参数"><a href="#子组件给父组件传参数" class="headerlink" title="子组件给父组件传参数"></a>子组件给父组件传参数</h2><blockquote><p>defineEmits</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子集<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;on()&quot;</span>&gt;</span>发给父类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = reactive&lt;number[]&gt;([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;on&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">on</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;on&#x27;</span>,list);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span> @<span class="attr">on</span>=<span class="string">&quot;getlist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&quot;./components/A.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">getlist</span> = (<span class="params">list:<span class="built_in">Number</span>[]</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ts写法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子集<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;on()&quot;</span>&gt;</span>发给父类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = reactive&lt;number[]&gt;([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">    (<span class="attr">e</span>:<span class="string">&#x27;on&#x27;</span>,<span class="attr">list</span>:number[]):<span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">on</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;on&#x27;</span>,list);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>defineExpose暴露子类属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//子级</span><br><span class="line">const list = reactive&lt;number[]&gt;([4, 5, 6])</span><br><span class="line"> </span><br><span class="line">defineExpose(&#123;</span><br><span class="line">    list</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//父级</span><br><span class="line"> <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">ref</span>=<span class="string">&quot;menus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">//这样获取是有代码提示的</span><br><span class="line"> const menus = ref&lt;InstanceType<span class="tag">&lt;<span class="name">typeof</span> <span class="attr">menus</span>&gt;</span>&gt;()</span><br></pre></td></tr></table></figure><h2 id="瀑布流案例"><a href="#瀑布流案例" class="headerlink" title="瀑布流案例"></a>瀑布流案例</h2><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">waterFallVue</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">waterFallVue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> waterFallVue <span class="keyword">from</span> <span class="string">&#x27;./components/water-fall.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = [</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC00FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;black&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#996666&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#993366&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33FF33&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#6633CC&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#666699&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#66CCFF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC3366&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC9966&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FF00FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#990000&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#999966&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CCCC66&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FF33FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FFFF66&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33CC00&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#330033&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#0066CC&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#006666&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33CCFF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33FF00&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">* &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">waterFallVue</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">waterFallVue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> waterFallVue <span class="keyword">from</span> <span class="string">&#x27;./components/water-fall.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = [</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC00FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;black&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#996666&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#993366&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33FF33&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#6633CC&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#666699&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#66CCFF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC3366&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CC9966&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FF00FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#990000&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#999966&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#CCCC66&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FF33FF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#FFFF66&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33CC00&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#330033&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#0066CC&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;skyblue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#006666&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33CCFF&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;#33FF00&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">300</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;yellow&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">background</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>  <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">* &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="全局组件，局部组件，递归组件"><a href="#全局组件，局部组件，递归组件" class="headerlink" title="全局组件，局部组件，递归组件"></a>全局组件，局部组件，递归组件</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/122862736">https://xiaoman.blog.csdn.net/article/details/122862736</a></p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>main.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;A&quot;</span>,A)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//全局组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;strChange()&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> str = <span class="title function_">ref</span>(<span class="string">&#x27;A&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">strChange</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(str.<span class="property">value</span> == <span class="string">&#x27;A&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        str.<span class="property">value</span> = <span class="string">&#x27;B&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        str.<span class="property">value</span> = <span class="string">&#x27;A&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;idChange()&quot;</span>&gt;</span>切换组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive,ref,markRaw,shallowRef&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">&#x27;./components/B.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">reactive</span>([&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;A组件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">com</span>:<span class="title function_">markRaw</span>(A)</span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&#x27;组件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">com</span>:<span class="title function_">markRaw</span>(B)</span></span><br><span class="line"><span class="language-javascript">&#125;])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> comid = <span class="title function_">shallowRef</span>(A)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//改变组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">idChange</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(comid.<span class="property">value</span> == A)&#123;</span></span><br><span class="line"><span class="language-javascript">        comid.<span class="property">value</span> = B;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        comid.<span class="property">value</span> = A;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="插槽-Slot"><a href="#插槽-Slot" class="headerlink" title="插槽 Slot"></a>插槽 Slot</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子集A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:slot1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello 子集1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">slot1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello 子集1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给父组件传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子集A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot1&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;i&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">slot1</span>=<span class="string">&quot;&#123;data&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello &#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父级<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">A</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #[<span class="attr">name</span>]&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;slot1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="异步组件，代码分包，suspense"><a href="#异步组件，代码分包，suspense" class="headerlink" title="异步组件，代码分包，suspense"></a>异步组件，代码分包，suspense</h1><h1 id="Teleport传送组件"><a href="#Teleport传送组件" class="headerlink" title="Teleport传送组件"></a>Teleport传送组件</h1><h1 id="keep-alive缓存组件"><a href="#keep-alive缓存组件" class="headerlink" title="keep-alive缓存组件"></a>keep-alive缓存组件</h1><p>需求：切换组件后数据没有保存，消失了</p><img src = "vue/p3.png"><blockquote><p>用keep-alive把组件包裹住即可</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>include&#x3D;”[‘A’]” 表示只缓存A组件内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;A&#x27;]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>exclude 表示的意思与Include相反</p></blockquote><blockquote><p>:include &#x3D; “10” 最多缓存10个组件</p></blockquote><h1 id="transition动画组件"><a href="#transition动画组件" class="headerlink" title="transition动画组件"></a>transition动画组件</h1><blockquote><p>基本使用： 本案例使用了element plus，可将把el去掉</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flagChange()&quot;</span>&gt;</span>显示-隐藏<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>  <span class="attr">:fit</span>=<span class="string">&quot;[&#x27;contain&#x27;]&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="attr">url</span>:<span class="title class_">String</span> = <span class="string">&quot;https://wallroom.io/img/1920x1080/bg-c516187.jpg&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">flagChange</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">//开始过度</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-from</span>&#123;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">width</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">height</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>)</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">//开始过度了</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">2.5s</span> linear;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">//过度完成</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-to</span>&#123;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">background</span>:yellow;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">//离开的过度</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-from</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">360deg</span>)</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">//离开中过度</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">1s</span> linear;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">//离开完成</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">   <span class="attribute">height</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>设置图片进入和离开时间</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123;enter:1000,leave:1000&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-image</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>  <span class="attr">:fit</span>=<span class="string">&quot;[&#x27;contain&#x27;]&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Animate.css</p></blockquote><p>官网：<a href="https://animate.style/">Animate.css | A cross-browser library of CSS animations.</a></p><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install animate.css</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span><br></pre></td></tr></table></figure><p>使用：第4版要加animate__animated前缀 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__zoomInDown&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOut&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>  <span class="attr">:fit</span>=<span class="string">&quot;[&#x27;contain&#x27;]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flagChange()&quot;</span>&gt;</span>显示-隐藏<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__zoomInDown&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOut&quot;</span> </span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>  <span class="attr">:fit</span>=<span class="string">&quot;[&#x27;contain&#x27;]&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="attr">url</span>:<span class="title class_">String</span> = <span class="string">&quot;https://wallroom.io/img/1920x1080/bg-c516187.jpg&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">flagChange</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> 八个生命周期</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@before-enter=<span class="string">&quot;beforeEnter&quot;</span> <span class="comment">//对应enter-from</span></span><br><span class="line">@enter=<span class="string">&quot;enter&quot;</span><span class="comment">//对应enter-active</span></span><br><span class="line">@after-enter=<span class="string">&quot;afterEnter&quot;</span><span class="comment">//对应enter-to</span></span><br><span class="line">@enter-cancelled=<span class="string">&quot;enterCancelled&quot;</span><span class="comment">//显示过度打断</span></span><br><span class="line">@before-leave=<span class="string">&quot;beforeLeave&quot;</span><span class="comment">//对应leave-from</span></span><br><span class="line">@leave=<span class="string">&quot;leave&quot;</span><span class="comment">//对应enter-active</span></span><br><span class="line">@after-leave=<span class="string">&quot;afterLeave&quot;</span><span class="comment">//对应leave-to</span></span><br><span class="line">@leave-cancelled=<span class="string">&quot;leaveCancelled&quot;</span><span class="comment">//离开过度打断</span></span><br></pre></td></tr></table></figure><p>结合gsap 动画库使用 <a href="https://greensock.com/">GreenSock</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gsap</span><br></pre></td></tr></table></figure><blockquote><p>页面加载就开始</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">appear-active-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear-<span class="keyword">from</span>-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear-to-<span class="keyword">class</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">appear</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">appear</span></span></span><br><span class="line"><span class="tag">        <span class="attr">appear-active-class</span>=<span class="string">&quot;animate__animated animate__flip&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>  <span class="attr">:fit</span>=<span class="string">&quot;[&#x27;contain&#x27;]&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新看结果</p><h1 id="transition-group过度列表"><a href="#transition-group过度列表" class="headerlink" title="transition-group过度列表"></a>transition-group过度列表</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;flagChange()&quot;</span>&gt;</span>显示-隐藏<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;de()&quot;</span>&gt;</span>减<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;into()&quot;</span>&gt;</span>加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">enter-to-class</span>=<span class="string">&quot;animate__animated animate__zoomInDown&quot;</span> <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__bounceOut&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">key</span>=<span class="string">&quot;li&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span> = <span class="string">&quot;li in datas&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;li.name + &#x27;\t&#x27; + li.date + &#x27;\t&#x27; +  li.address &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;animate.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="attr">url</span>:<span class="title class_">String</span> = <span class="string">&quot;https://wallroom.io/img/1920x1080/bg-c516187.jpg&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">flagChange</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> datas = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">de</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    datas.<span class="title function_">pop</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">into</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    datas.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>: <span class="string">&#x27;No. 189, Grove St, Los Angeles&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>移动过度</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">class</span>=<span class="string">&quot;wraps&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mmm&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.number &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>  <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> items = <span class="title function_">ref</span>(<span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">81</span> &#125; <span class="keyword">as</span> number[]).<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>: index,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>: (index % <span class="number">9</span>) + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;))</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">shuffle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    items.<span class="property">value</span> = _.<span class="title function_">shuffle</span>(items.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wraps</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">25px</span> * <span class="number">10</span> + <span class="number">9px</span>);</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mmm-move</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: transform <span class="number">0.8s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>状态过度</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num.current&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> gsap <span class="keyword">from</span> <span class="string">&#x27;gsap&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> num = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tweenedNumber</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">current</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>num.<span class="property">current</span>, <span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    gsap.<span class="title function_">to</span>(num, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">duration</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tweenedNumber</span>: newVal</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gsap</span><br></pre></td></tr></table></figure><h1 id="provide-x2F-Inject依赖注入"><a href="#provide-x2F-Inject依赖注入" class="headerlink" title="provide&#x2F;Inject依赖注入"></a>provide&#x2F;Inject依赖注入</h1><blockquote><p>父级直接传数据给孙级</p></blockquote><p>孙级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123;messge&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> messge = <span class="title function_">inject</span>(<span class="string">&#x27;messge&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DeepC</span>&gt;</span><span class="tag">&lt;/<span class="name">DeepC</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">DeepC</span> <span class="keyword">from</span> <span class="string">&#x27;./DeepC.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;message&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">C</span>&gt;</span><span class="tag">&lt;/<span class="name">C</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> C <span class="keyword">from</span> <span class="string">&#x27;./components/C.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = ref&lt;<span class="title class_">String</span>&gt;(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="string">&#x27;messge&#x27;</span>,message)</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="兄弟组件传参和Mitt"><a href="#兄弟组件传参和Mitt" class="headerlink" title="兄弟组件传参和Mitt"></a>兄弟组件传参和Mitt</h1><blockquote><p>平常写法，A传给App，App传给B</p></blockquote><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">A</span> @<span class="attr">toApp</span>=<span class="string">&quot;getObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>B组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">B</span> <span class="attr">:obj</span>=<span class="string">&quot;get&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">&#x27;./components/B.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义数据类型</span></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">region</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: string,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义接受A数据的变量,并传给B</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> get = reactive&lt;<span class="title class_">Obj</span>&gt;(&#123;&#125; <span class="keyword">as</span> <span class="title class_">Obj</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//接受A传入的数据输送给get</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getObj</span> = (<span class="params">obj:Obj</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    get.<span class="property">name</span> = obj.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">    get.<span class="property">region</span> = obj.<span class="property">region</span>;</span></span><br><span class="line"><span class="language-javascript">    get.<span class="property">type</span> = obj.<span class="property">type</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(get);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label-position</span>=<span class="string">&quot;labelPosition&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:model</span>=<span class="string">&quot;formLabelAlign&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;max-width: 460px&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Activity zone&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.region&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Activity form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.type&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;toApp()&quot;</span>&gt;</span>传给App<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义表单类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> labelPosition = <span class="title function_">ref</span>(<span class="string">&#x27;top&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义传出的对象类型</span></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">region</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: string,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义传出对象数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formLabelAlign = <span class="title function_">reactive</span>(&#123;&#125; <span class="keyword">as</span> <span class="title class_">Obj</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义传出</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>:<span class="string">&#x27;toApp&#x27;</span>,<span class="attr">object</span>:<span class="title class_">Obj</span>):<span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//toApp()函数传出数据，父组件@toApp接收,传出formLabelAlign</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toApp</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;toApp&#x27;</span>,formLabelAlign)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>B.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">stripe</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Date&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;region&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Address&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;push()&quot;</span>&gt;</span>接受App的数据<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义类型</span></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">region</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: string,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//接收App传来的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> get = </span></span><br><span class="line"><span class="language-javascript"><span class="title function_">withDefaults</span>(defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">obj</span>:<span class="title class_">Obj</span></span></span><br><span class="line"><span class="language-javascript">  &#125;&gt;(),&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">obj</span>:<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;name&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">region</span>: <span class="string">&#x27;region&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>:<span class="string">&#x27;type&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义一个对象数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = <span class="title function_">reactive</span>([&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;测试数据&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">region</span>:<span class="string">&quot;测试数据&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>:<span class="string">&quot;测试数据&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;])</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//将获得的数据传入对象数组</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">push</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  tableData.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:get.<span class="property">obj</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">region</span>:get.<span class="property">obj</span>.<span class="property">region</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">type</span>:get.<span class="property">obj</span>.<span class="property">type</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>利用Mitt</p></blockquote><p><code>安装</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mitt -s</span><br></pre></td></tr></table></figure><p><code>配置</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mit</span> = <span class="title function_">mitt</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//Vue3挂载全局API</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span> = <span class="title class_">Mit</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>使用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//获得$Bus</span></span><br><span class="line"><span class="keyword">const</span> $Bus = <span class="title function_">getCurrentInstance</span>()?.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span></span><br><span class="line"><span class="comment">//发送订阅</span></span><br><span class="line">$Bus.<span class="title function_">emit</span>(<span class="string">&#x27;eName&#x27;</span>,data)</span><br><span class="line"><span class="comment">//监听并接受订阅</span></span><br><span class="line">$Bus.<span class="title function_">on</span>(<span class="string">&#x27;eName&#x27;</span>,<span class="function">(<span class="params">data:dataType</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//关闭单个订阅</span></span><br><span class="line">$Bus.<span class="title function_">off</span>(<span class="string">&#x27;eName&#x27;</span>,<span class="title class_">Fn</span>)</span><br><span class="line"><span class="comment">//关闭所有订阅</span></span><br><span class="line">$Bus.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><blockquote><p>修改上述示例</p></blockquote><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>A组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>B组件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">B</span>&gt;</span><span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./components/A.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">&#x27;./components/B.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>A.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label-position</span>=<span class="string">&quot;labelPosition&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:model</span>=<span class="string">&quot;formLabelAlign&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;max-width: 460px&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Activity zone&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.region&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Activity form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formLabelAlign.type&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;toApp()&quot;</span>&gt;</span>传给App<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;getCurrentInstance,ref,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义表单类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> labelPosition = <span class="title function_">ref</span>(<span class="string">&#x27;top&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义传出的对象类型</span></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Obj</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">region</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: string,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义传出对象数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formLabelAlign = <span class="title function_">reactive</span>(&#123;&#125; <span class="keyword">as</span> <span class="title class_">Obj</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获得instance对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> $Bus = <span class="title function_">getCurrentInstance</span>()?.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toApp</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  $Bus.<span class="title function_">emit</span>(<span class="string">&#x27;toB&#x27;</span>,formLabelAlign)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>B.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-table :data=&quot;tableData&quot; stripe style=&quot;width: 100%&quot;&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;name&quot; label=&quot;Date&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;region&quot; label=&quot;Name&quot; width=&quot;180&quot; /&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;type&quot; label=&quot;Address&quot; /&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;el-button @click=&quot;push()&quot;&gt;接受A的数据&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive,getCurrentInstance &#125; from &#x27;vue&#x27;;</span><br><span class="line">//定义类型</span><br><span class="line">type Obj = &#123;</span><br><span class="line">    name: string,</span><br><span class="line">    region: string,</span><br><span class="line">    type: string,</span><br><span class="line">&#125;</span><br><span class="line">//定义一个对象数据</span><br><span class="line">const tableData = reactive([&#123;</span><br><span class="line">    name:&quot;测试数据&quot;,</span><br><span class="line">    region:&quot;测试数据&quot;,</span><br><span class="line">    type:&quot;测试数据&quot;</span><br><span class="line">&#125;])</span><br><span class="line">//获得$Bus</span><br><span class="line">const $Bus = getCurrentInstance()?.appContext.config.globalProperties.$Bus</span><br><span class="line">//接受数据并传给get</span><br><span class="line">let get= reactive(&#123;&#125; as Obj)</span><br><span class="line">$Bus.on(&#x27;toB&#x27;,(obj:Obj)=&gt;&#123;</span><br><span class="line">   get = obj</span><br><span class="line">&#125;)</span><br><span class="line">//将获得的数据传入对象数组</span><br><span class="line">const push = ()=&gt;&#123;</span><br><span class="line">  tableData.push(&#123;</span><br><span class="line">  name:get.name,</span><br><span class="line">  region:get.region,</span><br><span class="line">  type:get.type</span><br><span class="line">&#125;)&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>法二</p></blockquote><p><a href="https://www.bilibili.com/read/cv16107098?spm_id_from=333.999.0.0">小满Vue3（Mitt） - 哔哩哔哩 (bilibili.com)</a></p><h1 id="TSX"><a href="#TSX" class="headerlink" title="TSX"></a>TSX</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/123172735">(7条消息) 学习Vue3 第二十五章（TSX）_小满zs的博客-CSDN博客_tsx</a></p><p>以往使用Template去写我们模板。现在可以扩展另一种风格TSX风格</p><blockquote><p>安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></table></figure><blockquote><p>配置vite.config.ts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span>;</span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(),<span class="title function_">vueJsx</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>配置tsconfig.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;jsxFactory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;jsxFragmentFactory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fragment&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"> </span><br><span class="line">let v = ref<span class="tag">&lt;<span class="name">string</span>&gt;</span>(&#x27;&#x27;)</span><br><span class="line"> </span><br><span class="line">const renderDom = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        <span class="tag">&lt;&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;v.value&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               &#123;v.value&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">export default renderDom</span><br></pre></td></tr></table></figure><h1 id="自动import插件"><a href="#自动import插件" class="headerlink" title="自动import插件"></a>自动import插件</h1><p><a href="https://github.com/antfu/unplugin-auto-import">antfu&#x2F;unplugin-auto-import: Auto import APIs on-demand for Vite, Webpack and Rollup (github.com)</a></p><h1 id="深入V-model"><a href="#深入V-model" class="headerlink" title="深入V-model"></a>深入V-model</h1><blockquote><p>组件的双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//父组件调用时</span><br><span class="line"><span class="tag">&lt;<span class="name">V</span> <span class="attr">v-model:textVal</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">V</span>&gt;</span></span><br><span class="line">//绑定</span><br><span class="line">const name = ref<span class="tag">&lt;<span class="name">string</span>&gt;</span>(&#x27;hello&#x27;)</span><br><span class="line">const flag = ref<span class="tag">&lt;<span class="name">boolean</span>&gt;</span>(true)</span><br><span class="line">//子组件接收</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">    modelValue:boolean</span><br><span class="line">    textVal:string</span><br><span class="line">&#125;&gt;()</span><br><span class="line">//子组件修改数据</span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;,&#x27;update:textVal&#x27;])</span><br><span class="line"></span><br><span class="line">emit(&#x27;update:modelValue&#x27;,false)</span><br><span class="line">emit(&#x27;update:textVal&#x27;,str)</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeFlag()&quot;</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">V</span> <span class="attr">v-model:textVal</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;flag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">V</span>&gt;</span></span><br><span class="line">        &#123;&#123;name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> V <span class="keyword">from</span> <span class="string">&#x27;./components/V-model.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = ref&lt;boolean&gt;(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeFlag</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = ref&lt;string&gt;(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.button</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">2%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">v-show</span>=<span class="string">&quot;modelValue&quot;</span> <span class="attr">shadow</span>=<span class="string">&quot;always&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;sendName()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> @<span class="attr">input</span>=<span class="string">&quot;changeInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;textVal&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">modelValue</span>:boolean</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">textVal</span>:string</span></span><br><span class="line"><span class="language-javascript">    &#125;&gt;()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>,<span class="string">&#x27;update:textVal&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">sendName</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>,<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">changeInput</span> = (<span class="params">e:Event</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> target = e.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> str = target.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emit</span>(<span class="string">&#x27;update:textVal&#x27;</span>,str)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.button</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-left</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="directive自定义指令"><a href="#directive自定义指令" class="headerlink" title="directive自定义指令"></a>directive自定义指令</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/123228132">(7条消息) 学习Vue3 第二十七章（自定义指令directive）_小满zs的博客-CSDN博客</a></p><h1 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h1><p>相关笔记：<a href="https://xiaoman.blog.csdn.net/article/details/123271189">(7条消息) 学习Vue3 第二十八章（自定义Hooks）_小满zs的博客-CSDN博客_vue3自定义hooks</a></p><p>文档：<a href="https://vueuse.org/guide/">Get Started | VueUse</a></p><h1 id="vue3定义全局函数和变量"><a href="#vue3定义全局函数和变量" class="headerlink" title="vue3定义全局函数和变量"></a>vue3定义全局函数和变量</h1><blockquote><p>全局变量函数定义</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变量</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$value</span> = <span class="string">&#x27;value&#x27;</span></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Fn</span> = <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="comment">//页面调用</span></span><br><span class="line">&#123;&#123;$value&#125;&#125;</span><br><span class="line"><span class="comment">//ts调用</span></span><br><span class="line"><span class="comment">//法一</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance?.<span class="property">proxy</span>?.<span class="property">$value</span>)</span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="keyword">const</span> $value = <span class="title function_">getCurrentInstance</span>()?.<span class="property">appContext</span>.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($value)</span><br></pre></td></tr></table></figure><blockquote><p>console.log(instance?.proxy.$value)标红解决方法</p></blockquote><p><code>main.ts</code>加入过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">        <span class="attr">$value</span>: string</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="编写vue3插件"><a href="#编写vue3插件" class="headerlink" title="编写vue3插件"></a>编写vue3插件</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/123300264">(7条消息) 学习Vue3 第三十章（编写Vue3插件）_小满zs的博客-CSDN博客_vue3 插件开发</a></p><h1 id="了解UI库"><a href="#了解UI库" class="headerlink" title="了解UI库"></a>了解UI库</h1><blockquote><p>setup (组合式）+ ts 模式</p></blockquote><p>Element Plus:<a href="https://element-plus.gitee.io/zh-CN/component/button.html">Button 按钮 | Element Plus (gitee.io)</a></p><blockquote><p>选项式 + ts 模式</p></blockquote><p>Ant Design Vue:<a href="https://www.antdv.com/components/button">Button - Ant Design Vue (antdv.com)</a></p><blockquote><p>选项式 + js 模式</p></blockquote><p>View Design:<a href="https://www.iviewui.com/view-ui-plus/component/base/button">按钮 - View Design (iviewui.com)</a></p><blockquote><p>移动端</p></blockquote><p>Vant 3:<a href="https://vant3.uihtm.com/#/zh-CN">Vant 3 - 轻量、可靠的移动端组件库 (uihtm.com)</a></p><h1 id="Scoped和样式穿透"><a href="#Scoped和样式穿透" class="headerlink" title="Scoped和样式穿透"></a>Scoped和样式穿透</h1><blockquote><p>:deep()进行样式穿透</p></blockquote><p><a href="https://www.bilibili.com/video/BV1dS4y1y7vd/?p=43&spm_id_from=pageDriver&vd_source=0eb91c8870140dce3593534de767f4cf">小满Vue3（第三十二章 样式穿透:deep()）_哔哩哔哩_bilibili</a></p><h1 id="css-Style完整新特性"><a href="#css-Style完整新特性" class="headerlink" title="css Style完整新特性"></a>css Style完整新特性</h1><blockquote><p>:slotted()插槽选择器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-pseudo">:slotted</span>(<span class="selector-class">.hello</span>)&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">D</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">D</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> D <span class="keyword">from</span> <span class="string">&#x27;./components/D.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>:global()全局选择器</p></blockquote><p><code>D.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Hello?</span><br><span class="line">        <span class="tag">&lt;<span class="name">D</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">D</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> D <span class="keyword">from</span> <span class="string">&#x27;./components/D.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">:<span class="built_in">global</span>(div)&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>动态css  用v-bind()绑定变量</p></blockquote><p><code>更换背景颜色</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>背景颜色:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;color&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> color = ref&lt;string&gt;(<span class="string">&quot;blue&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.d</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">v-bind</span>(color);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">37px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>css module</p></blockquote><p><code>默认名字</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.red&quot;</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>指定名字</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[zs.red,zs.border]&quot;</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>=<span class="string">&quot;zs&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.border</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="集成Tailwind-Css"><a href="#集成Tailwind-Css" class="headerlink" title="集成Tailwind Css"></a>集成Tailwind Css</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/124951311">(7条消息) 学习Vue3 第三十四章（Vue3集成Tailwind CSS）_小满zs的博客-CSDN博客_vue3 使用tailwindcss</a></p><h1 id="Event-Loop-和-nextTick"><a href="#Event-Loop-和-nextTick" class="headerlink" title="Event Loop 和 nextTick"></a>Event Loop 和 nextTick</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/125237755">(7条消息) 学习Vue3 第三十五章（Evnet Loop 和 nextTick）_小满zs的博客-CSDN博客</a></p><h1 id="vue如何开发移动端"><a href="#vue如何开发移动端" class="headerlink" title="vue如何开发移动端"></a>vue如何开发移动端</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/125490078">(7条消息) 小满Vue3第三十六章（Vue如何开发移动端）_小满zs的博客-CSDN博客_vue开发移动端</a></p><h1 id="unocss原子化"><a href="#unocss原子化" class="headerlink" title="unocss原子化"></a>unocss原子化</h1><p><code>安装</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D unocss</span><br></pre></td></tr></table></figure><p><code>vite.config.ts </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">import</span> unocss <span class="keyword">from</span> <span class="string">&#x27;unocss/vite&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(),<span class="title function_">unocss</span>(&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      [<span class="string">&#x27;flex&#x27;</span>, &#123; <span class="attr">display</span>: <span class="string">&quot;flex&quot;</span> &#125;],</span><br><span class="line">      [<span class="string">&#x27;red&#x27;</span>,&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;)]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>main.ts</code>引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;uno.css&#x27;</span><br></pre></td></tr></table></figure><p>直接使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex red&quot;</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&#x27;ts&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>动态css</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="title function_">vue</span>(),<span class="title function_">unocss</span>(&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      [<span class="string">&#x27;flex&#x27;</span>, &#123; <span class="attr">display</span>: <span class="string">&quot;flex&quot;</span> &#125;],</span><br><span class="line">      [<span class="string">&#x27;red&#x27;</span>,&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;],</span><br><span class="line">      [<span class="regexp">/^m-(\d+)$/</span>, <span class="function">(<span class="params">[, d]</span>) =&gt;</span> (&#123; <span class="attr">margin</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Number</span>(d) * <span class="number">10</span>&#125;</span>px`</span> &#125;)]</span><br><span class="line">    ]</span><br><span class="line">&#125;)]</span><br></pre></td></tr></table></figure><p><code>使用</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-20&quot;</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 组合样式shortcuts</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="title function_">vue</span>(),<span class="title function_">unocss</span>(&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      [<span class="string">&#x27;flex&#x27;</span>, &#123; <span class="attr">display</span>: <span class="string">&quot;flex&quot;</span> &#125;],</span><br><span class="line">      [<span class="string">&#x27;red&#x27;</span>,&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;],</span><br><span class="line">      [<span class="regexp">/^m-(\d+)$/</span>, <span class="function">(<span class="params">[, d]</span>) =&gt;</span> (&#123; <span class="attr">margin</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Number</span>(d) * <span class="number">10</span>&#125;</span>px`</span> &#125;)]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">shortcuts</span>:&#123;</span><br><span class="line">      <span class="attr">cike</span>: [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;flex&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]</span><br></pre></td></tr></table></figure><p><code>使用</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cike&quot;</span>&gt;</span></span><br><span class="line">        hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>预设样式</p></blockquote><p><code>vite.config.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;presetIcons,presetAttributify,presetUno&#125; <span class="keyword">from</span> <span class="string">&#x27;unocss&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [<span class="title function_">vue</span>(),<span class="title function_">unocss</span>(&#123;</span><br><span class="line">    <span class="comment">//加上预设</span></span><br><span class="line">    <span class="attr">presets</span>:[<span class="title function_">presetIcons</span>(),<span class="title function_">presetAttributify</span>(),<span class="title function_">presetUno</span>()],</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      [<span class="string">&#x27;flex&#x27;</span>, &#123; <span class="attr">display</span>: <span class="string">&quot;flex&quot;</span> &#125;],</span><br><span class="line">      [<span class="string">&#x27;red&#x27;</span>,&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;],</span><br><span class="line">      [<span class="regexp">/^m-(\d+)$/</span>, <span class="function">(<span class="params">[, d]</span>) =&gt;</span> (&#123; <span class="attr">margin</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">Number</span>(d) * <span class="number">10</span>&#125;</span>px`</span> &#125;)]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">shortcuts</span>:&#123;</span><br><span class="line">      <span class="attr">cike</span>: [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;flex&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)]</span><br></pre></td></tr></table></figure><ul><li><p>presetlcons Icon图标预设</p><p><a href="https://icones.js.org/">Icônes (icones.js.org)</a></p><p><code>安装</code>&#x2F;ic为你挑选的图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @iconify-json/ic</span><br></pre></td></tr></table></figure><p><code>使用</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;i-ic-baseline-5g&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>presetAttributify 属性化模式支持</p><p>例如:      [&#x2F;^m-(\d+)$&#x2F;, ([, <em>d</em>]) <em>&#x3D;&gt;</em> ({ margin: <code>$&#123;*Number*(*d*) * 10&#125;px</code> })]</p><p>这个动态属性调用可以直接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">m</span>=<span class="string">&quot;1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>presetUno 工具类预设</p></li></ul><h1 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/125733613">(7条消息) 小满Vue3第三十八章（函数式编程，h函数）_小满zs的博客-CSDN博客_vue函数式编程</a></p><h1 id="vue开发桌面程序"><a href="#vue开发桌面程序" class="headerlink" title="vue开发桌面程序"></a>vue开发桌面程序</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/126063804">(7条消息) 小满Vue3第三十九章（Vue开发桌面程序Electron）_小满zs的博客-CSDN博客_小满vue</a></p><h1 id="vue响应式语法糖"><a href="#vue响应式语法糖" class="headerlink" title="vue响应式语法糖"></a>vue响应式语法糖</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/126275355">(7条消息) 小满Vue3第四十章（Vue响应性语法糖）_小满zs的博客-CSDN博客</a></p><h1 id="从0-1写个vue3-ts项目"><a href="#从0-1写个vue3-ts项目" class="headerlink" title="从0-1写个vue3 + ts项目"></a>从0-1写个vue3 + ts项目</h1><p><a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=54&vd_source=0eb91c8870140dce3593534de767f4cf">小满Vue3（第四十三章 webpack 从0到1 构建vue3）_哔哩哔哩_bilibili</a></p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/126375948">(7条消息) 小满Vue3第四十一章（docker 碰撞 vue3）_小满zs的博客-CSDN博客</a></p><h1 id="vue性能优化"><a href="#vue性能优化" class="headerlink" title="vue性能优化"></a>vue性能优化</h1><p><a href="https://xiaoman.blog.csdn.net/article/details/126275355">(7条消息) 小满Vue3第四十章（Vue响应性语法糖）_小满zs的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3</title>
      <link href="/post/e5a21adb.html"/>
      <url>/post/e5a21adb.html</url>
      
        <content type="html"><![CDATA[<h1 id="懒得做笔记"><a href="#懒得做笔记" class="headerlink" title="懒得做笔记"></a>懒得做笔记</h1><img src = "https://img-blog.csdnimg.cn/20200507153758833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Bhbl9oMTk5NQ==,size_16,color_FFFFFF,t_70#pic_center"/><p><a href="https://blog.csdn.net/pan_h1995/article/details/105827181">https://blog.csdn.net/pan_h1995/article/details/105827181</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/post/b92db53e.html"/>
      <url>/post/b92db53e.html</url>
      
        <content type="html"><![CDATA[<h1 id="懒得做笔记"><a href="#懒得做笔记" class="headerlink" title="懒得做笔记"></a>懒得做笔记</h1><p><a href="https://blog.csdn.net/pan_h1995/article/details/105974385">https://blog.csdn.net/pan_h1995/article/details/105974385</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/post/4b0178e0.html"/>
      <url>/post/4b0178e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法概述-11-x2F-12"><a href="#数据结构与算法概述-11-x2F-12" class="headerlink" title="数据结构与算法概述(11&#x2F;12)"></a>数据结构与算法概述(11&#x2F;12)</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据存储的一种形式</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>程序解决问题的一种方法</p><h2 id="程序-x3D-数据结构-算法"><a href="#程序-x3D-数据结构-算法" class="headerlink" title="程序 &#x3D; 数据结构 + 算法"></a>程序 &#x3D; 数据结构 + 算法</h2><h2 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h2><h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><ul><li><p>有序数据的集合</p></li><li><p>常见的有：线性表，数组，栈，队列……</p></li><li><p>特点：</p><p>每个线性结构都有第一个数据——前驱</p><p>每个线性结构都有最后一个数据——后继</p></li></ul><img src="/post/4b0178e0/p1.jpg" class=""><h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>树，图，二维数组……</p><img src="/post/4b0178e0/p2.jpg" class=""><h1 id="栈-11-x2F-12"><a href="#栈-11-x2F-12" class="headerlink" title="栈(11&#x2F;12)"></a>栈(11&#x2F;12)</h1><h2 id="栈演示介绍"><a href="#栈演示介绍" class="headerlink" title="栈演示介绍"></a>栈演示介绍</h2><p><a href="https://www.bilibili.com/video/BV1HQ4y1d7th?p=7&amp;spm_id_from=pageDriver&amp;vd_source=0eb91c8870140dce3593534de767f4cf">https://www.bilibili.com/video/BV1HQ4y1d7th?p=7&amp;spm_id_from=pageDriver&amp;vd_source=0eb91c8870140dce3593534de767f4cf</a></p><ul><li><strong>栈是限制插入和删除只能在一个位置上进行的线性表</strong>。</li><li>允许插入和删除的一端位于表的末端，叫做栈顶（top）</li><li>不允许插入和删除的另一端叫做栈底（bottom）</li><li>插入数据：<strong>压栈(PUSH)</strong></li><li>取出数据：<strong>出栈(POP)</strong></li><li>栈是一种<strong>后进先出（LIFO）</strong>的数据结构，最先被删除的是最近压栈的元素。</li></ul><h2 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h2><h2 id="数组实现（静态栈）"><a href="#数组实现（静态栈）" class="headerlink" title="数组实现（静态栈）"></a>数组实现（静态栈）</h2><ul><li>压栈：压栈前需要判断栈是否满了</li><li>出栈：出栈前需要判断栈是否空了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStack</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作</span></span><br><span class="line"><span class="comment">     * 1.压栈：压栈前需要判断栈是否满了</span></span><br><span class="line"><span class="comment">     * 2.出栈：出栈前需要判断栈是否空了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack;</span><br><span class="line">    <span class="comment">//栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> stackMax;</span><br><span class="line">    <span class="comment">//栈顶部指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> stackMax)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stackMax = stackMax;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[stackMax];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否满额了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == stackMax - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="comment">//如果栈满了，抛出提示信息</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈满了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果还没满，压栈</span></span><br><span class="line">            top++;</span><br><span class="line">            stack[top] = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> stack[top--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个长度为5的栈</span></span><br><span class="line">        <span class="type">ArrayStack</span> <span class="variable">arrayStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//赋值1-5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">            arrayStack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> arrayStack.pop();</span><br><span class="line">            System.out.print(data + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="栈泛型化"><a href="#栈泛型化" class="headerlink" title="栈泛型化"></a>栈泛型化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStack</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作</span></span><br><span class="line"><span class="comment">     * 1.压栈：压栈前需要判断栈是否满了</span></span><br><span class="line"><span class="comment">     * 2.出栈：出栈前需要判断栈是否空了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T[] stack;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> stackMax;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span> <span class="params">(<span class="type">int</span> stackMax)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stackMax = stackMax;</span><br><span class="line">        <span class="built_in">this</span>.stack = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[stackMax];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断栈是否满额了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == stackMax - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="comment">//如果栈满了，抛出提示信息</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈满了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果还没满，压栈</span></span><br><span class="line">            top++;</span><br><span class="line">            stack[top] = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否空栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> stack[top--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历栈数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayStack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        stack.push(<span class="string">&quot;??&quot;</span>);</span><br><span class="line">        stack.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">??</span><br><span class="line">你好</span><br><span class="line">hi</span><br><span class="line">world</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="判断是否是回文"><a href="#判断是否是回文" class="headerlink" title="判断是否是回文"></a>判断是否是回文</h3><p>回文：遵循aba，cbabc这种的规律的叫回文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否回文aba</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHuiWen</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串修改器</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">        <span class="comment">//创建一个字符串一样长度的字符栈</span></span><br><span class="line">        ArrayStack&lt;Character&gt; arrayStack = <span class="keyword">new</span> <span class="title class_">ArrayStack</span>&lt;&gt;(stringBuilder.length());</span><br><span class="line">        <span class="comment">//判断标志</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//将字符放入栈中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stringBuilder.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//将第i个码点字符放入栈中</span></span><br><span class="line">            arrayStack.push((<span class="type">char</span>)stringBuilder.codePointAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果栈中顶部的字符等于字符相应字符，则说明是回文,否则不是回文</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stringBuilder.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">char</span>)stringBuilder.codePointAt(i) != arrayStack.pop())&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//hello world!不是回文</span></span><br><span class="line">        System.out.println(isHuiWen(<span class="string">&quot;hello world!&quot;</span>));</span><br><span class="line">        <span class="comment">//abcba是回文</span></span><br><span class="line">        System.out.println(isHuiWen(<span class="string">&quot;abcba&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="链表实现（动态栈）"><a href="#链表实现（动态栈）" class="headerlink" title="链表实现（动态栈）"></a>链表实现（动态栈）</h2><h1 id="链表-11-x2F-13"><a href="#链表-11-x2F-13" class="headerlink" title="链表(11&#x2F;13)"></a>链表(11&#x2F;13)</h1><ul><li>链表是一种物理存储单元上非连续，非顺序的存储结构</li><li>特点：链表是以结点形式存储，是链式存储</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li><p><strong>单向链表每个结点包含data区域和next区域</strong></p></li><li><p><strong>结点类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">//链表结点的data域</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">//链表结点的next域</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>链表类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linked</span> &#123;</span><br><span class="line">    <span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;header&quot;</span>);</span><br><span class="line">    <span class="comment">//表示当前操作的结点</span></span><br><span class="line">    <span class="keyword">private</span> Node node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getHeader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得链尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getEnd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加结点操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="comment">//如果头结点next域为空</span></span><br><span class="line">        <span class="keyword">if</span> (header.getNext() == <span class="literal">null</span>)&#123;</span><br><span class="line">            header.setNext(node);</span><br><span class="line">            <span class="built_in">this</span>.node = node;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不是空，则增加到当前结点的next域中</span></span><br><span class="line">            <span class="built_in">this</span>.node.setNext(node);</span><br><span class="line">            <span class="built_in">this</span>.node = <span class="built_in">this</span>.node.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找结点：index为零时为第一个结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">find</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//header的next结点为index等于零的结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">indexNode</span> <span class="operator">=</span> header.getNext();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            <span class="comment">//当indexNode不为空时继续查找</span></span><br><span class="line">            <span class="keyword">if</span> (indexNode != <span class="literal">null</span>)&#123;</span><br><span class="line">                indexNode = indexNode.getNext();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//为空时，不再查找,返回空</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> indexNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index:删除结点序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 判断是否删除成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        Node preNode;</span><br><span class="line">        Node nextNode;</span><br><span class="line">        <span class="comment">//判断标准</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//当删除第一个结点时，要用到头结点</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">            nextNode = find(index + <span class="number">1</span>);</span><br><span class="line">            header.setNext(nextNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (find(index) == <span class="literal">null</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            preNode = find(index - <span class="number">1</span>);</span><br><span class="line">            nextNode = find(index + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nextNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                node = preNode;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode.setNext(nextNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改结点内容(编号修改)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index:要修改的结点编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str:要修改的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否修改成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateByIndex</span><span class="params">(<span class="type">int</span> index,String str)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (find(index) == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            find(index).setData(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接由内容修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要修改的结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 修改成str2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateByNode</span><span class="params">(Node node,String str2)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">nextNode</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (!nextNode.getData().equals(node.getData()))&#123;</span><br><span class="line">            nextNode = nextNode.getNext();</span><br><span class="line">            <span class="keyword">if</span> (nextNode == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nextNode.setData(str2);</span><br><span class="line">        <span class="comment">//递归该方法，一直到最后一个结点</span></span><br><span class="line">        updateByNode(node,str2);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回链表当前的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">len</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (index.getNext() != <span class="literal">null</span>)&#123;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历每个结点数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len(); i++) &#123;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">            System.out.print(index.getData() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Linked</span> <span class="variable">linked</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linked</span>();</span><br><span class="line">        <span class="comment">//增加结点</span></span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        <span class="comment">//删除结点</span></span><br><span class="line">        System.out.println(linked.delete(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//修改结点</span></span><br><span class="line">        System.out.println(linked.updateByIndex(<span class="number">0</span>,<span class="string">&quot;hi&quot;</span>));</span><br><span class="line">        <span class="comment">//修改结点</span></span><br><span class="line">        System.out.println(linked.updateByNode(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;!&quot;</span>),<span class="string">&quot;?&quot;</span>));</span><br><span class="line">        <span class="comment">//查找结点</span></span><br><span class="line">        System.out.println(linked.find(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//遍历内容</span></span><br><span class="line">        linked.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">Node&#123;data=<span class="string">&#x27;?&#x27;</span>, next=Node&#123;data=<span class="string">&#x27;?&#x27;</span>, next=Node&#123;data=<span class="string">&#x27;?&#x27;</span>, next=Node&#123;data=<span class="string">&#x27;?&#x27;</span>, next=Node&#123;data=<span class="string">&#x27;?&#x27;</span>, next=<span class="literal">null</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">hi?????</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><ul><li><p>data域，前驱pre，后继next</p></li><li><p>Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">//前驱</span></span><br><span class="line">    <span class="keyword">private</span> Node pre;</span><br><span class="line">    <span class="comment">//后继</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getPre</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPre</span><span class="params">(Node pre)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Linked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linked</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>,<span class="string">&quot;header&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getHeader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (index.getNext() != <span class="literal">null</span>)&#123;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        node.setPre(index);</span><br><span class="line">        index.setNext(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有序插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrdered</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (index.getNext() != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (node.getId() &lt; index.getNext().getId())&#123;</span><br><span class="line">                node.setPre(index);</span><br><span class="line">                index.getNext().setPre(node);</span><br><span class="line">                node.setNext(index.getNext());</span><br><span class="line">                index.setNext(node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index.getNext() == <span class="literal">null</span>)&#123;</span><br><span class="line">            index.setNext(node);</span><br><span class="line">            node.setPre(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header.getNext();</span><br><span class="line">        <span class="keyword">while</span> (index != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(index + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Linked</span> <span class="variable">linked</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Linked</span>();</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>,<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        linked.add(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, <span class="string">&quot;world&quot;</span>));</span><br><span class="line">        linked.addByOrdered(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>,<span class="string">&quot;world&quot;</span>));</span><br><span class="line">        linked.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node&#123;id=<span class="number">1</span>, data=<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">2</span>, data=<span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">4</span>, data=<span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><ul><li><p>data域，next域，链尾next域指向header</p></li><li><p>Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">//data域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">//next域</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> id, String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Linked</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linked</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>,<span class="string">&quot;header&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getHeader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(Node header)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.header = header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结尾处添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (index.getNext() != header &amp;&amp; index.getNext() != <span class="literal">null</span>)&#123;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        index.setNext(node);</span><br><span class="line">        node.setNext(header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id有序添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addById</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">while</span> (index.getNext() != header &amp;&amp; index.getNext() != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (node.getId() &lt; index.getNext().getId())&#123;</span><br><span class="line">                node.setNext(index.getNext());</span><br><span class="line">                index.setNext(node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index.getNext() == header || index.getNext() == <span class="literal">null</span>)&#123;</span><br><span class="line">            index.setNext(node);</span><br><span class="line">            node.setNext(header);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">index</span> <span class="operator">=</span> header;</span><br><span class="line">        System.out.println(header);</span><br><span class="line">        index = index.getNext();</span><br><span class="line">        <span class="keyword">while</span> (index != <span class="literal">null</span> &amp;&amp; index != header)&#123;</span><br><span class="line">            System.out.println(index);</span><br><span class="line">            index = index.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">LinkedTest</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Linked</span> linked = <span class="keyword">new</span> <span class="title class_">Linked</span>();</span><br><span class="line">        linked.<span class="title function_">setHeader</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>,<span class="string">&quot;hello-0号&quot;</span>));</span><br><span class="line">        linked.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>,<span class="string">&quot;hello-1号&quot;</span>));</span><br><span class="line">        linked.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>,<span class="string">&quot;hello-2号&quot;</span>));</span><br><span class="line">        linked.<span class="title function_">add</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>,<span class="string">&quot;hello-4号&quot;</span>));</span><br><span class="line">        linked.<span class="title function_">addById</span>(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>,<span class="string">&quot;hello-3号&quot;</span>));</span><br><span class="line">        linked.<span class="title function_">list</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node&#123;id=<span class="number">0</span>, data=<span class="string">&#x27;hello-0号&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">1</span>, data=<span class="string">&#x27;hello-1号&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">2</span>, data=<span class="string">&#x27;hello-2号&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">3</span>, data=<span class="string">&#x27;hello-3号&#x27;</span>&#125;</span><br><span class="line">Node&#123;id=<span class="number">4</span>, data=<span class="string">&#x27;hello-4号&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="稀疏数组和队列-11-x2F-14"><a href="#稀疏数组和队列-11-x2F-14" class="headerlink" title="稀疏数组和队列(11&#x2F;14)"></a>稀疏数组和队列(11&#x2F;14)</h1><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><h3 id="压缩条件："><a href="#压缩条件：" class="headerlink" title="压缩条件："></a>压缩条件：</h3><ul><li>原数组中存在大量的无效数据，占据了大量的存储空间，真正有用的数据很少</li><li>压缩存储可以节省储存空间，避免资源的不必要的浪费，在数据序列化到磁盘时，压缩存储可以提高IO效率。</li><li>将二维数组压缩成一维数组</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>一维数组存储的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    private int line;</span><br><span class="line">    private int row;</span><br><span class="line">    private int data;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">Data</span>(int line, int row, int data) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">line</span> = line;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">row</span> = row;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="title function_">getLine</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">setLine</span>(<span class="params">int line</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">line</span> = line;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="title function_">getRow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">setRow</span>(<span class="params">int row</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">row</span> = row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">setData</span>(<span class="params">int data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;line=&quot;</span> + line +</span><br><span class="line">                <span class="string">&quot;, row=&quot;</span> + row +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>稀疏数组实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Data[] sparseArray;</span><br><span class="line">    <span class="comment">//初始化稀疏数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SparseArray</span><span class="params">(<span class="type">int</span>[][] array)</span>&#123;</span><br><span class="line">        <span class="comment">//统计有效个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建稀疏数组</span></span><br><span class="line">        sparseArray = <span class="keyword">new</span> <span class="title class_">Data</span>[count + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//赋第一个值</span></span><br><span class="line">        sparseArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Data</span>(array.length,array[<span class="number">0</span>].length,count);</span><br><span class="line">        <span class="comment">//给稀疏数组赋值</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArray[count] = <span class="keyword">new</span> <span class="title class_">Data</span>(i,j,array[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回稀疏数组</span></span><br><span class="line">    <span class="keyword">public</span> Data[] getSparseArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> sparseArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回原数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] getArray()&#123;</span><br><span class="line">        <span class="comment">//创建原数组</span></span><br><span class="line">        <span class="type">int</span>[][] array = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArray[<span class="number">0</span>].getLine()][sparseArray[<span class="number">0</span>].getRow()];</span><br><span class="line">        <span class="comment">//循环赋值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sparseArray[count].getLine() == i &amp;&amp; sparseArray[count].getRow() == j)&#123;</span><br><span class="line">                    array[i][j] = sparseArray[count].getData();</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count == sparseArray[<span class="number">0</span>].getData() + <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SparseArray&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sparseArray=&quot;</span> + Arrays.toString(sparseArray) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//初始化稀疏数组</span></span><br><span class="line">        <span class="type">SparseArray</span> <span class="variable">sparse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SparseArray</span>(a);</span><br><span class="line">        <span class="comment">//返回稀疏数组</span></span><br><span class="line">        Data[] sparseArray = sparse.getSparseArray();</span><br><span class="line">        System.out.println(Arrays.toString(sparseArray));</span><br><span class="line">        <span class="comment">//返回原数组</span></span><br><span class="line">        <span class="type">int</span>[][] array = sparse.getArray();</span><br><span class="line">        System.out.println(Arrays.deepToString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Data&#123;line=<span class="number">2</span>, row=<span class="number">3</span>, data=<span class="number">3</span>&#125;, Data&#123;line=<span class="number">0</span>, row=<span class="number">0</span>, data=<span class="number">1</span>&#125;, Data&#123;line=<span class="number">0</span>, row=<span class="number">1</span>, data=<span class="number">2</span>&#125;, Data&#123;line=<span class="number">1</span>, row=<span class="number">1</span>, data=<span class="number">1</span>&#125;]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>特点：先入先出</li></ul><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><ul><li><p>队尾指针实现队列</p></li><li><p>队列指针：队尾（rear）</p></li><li><p>队列元素：队尾，数据</p></li><li><p>操作：入队和出队</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue</span> &#123;</span><br><span class="line">    <span class="comment">//指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">rear</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="comment">//数组模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] queue;</span><br><span class="line">    <span class="comment">//队列长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> maxQueue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxQueue = maxQueue;</span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">int</span>[maxQueue];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查是否满了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rear == maxQueue - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队:检查队伍是否满了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            rear++;</span><br><span class="line">            queue[rear] = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查队列是否已空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rear == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队：检查队列是否已空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列已空&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> queue[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rear; i++) &#123;</span><br><span class="line">                queue[i] = queue[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            rear--;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= rear; i++) &#123;</span><br><span class="line">            System.out.print(queue[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayQueue</span> <span class="variable">arrayQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayQueue</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//入队5个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            arrayQueue.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        arrayQueue.list();</span><br><span class="line">        <span class="comment">//出队4个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            arrayQueue.getData();</span><br><span class="line">        &#125;</span><br><span class="line">        arrayQueue.list();</span><br><span class="line">        <span class="comment">//入队4个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            arrayQueue.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        arrayQueue.list();</span><br><span class="line">        <span class="comment">//全部出队</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            arrayQueue.getData();</span><br><span class="line">        &#125;</span><br><span class="line">        arrayQueue.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">3</span></span><br><span class="line">队列为空</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="递归-11-x2F-15"><a href="#递归-11-x2F-15" class="headerlink" title="递归(11&#x2F;15)"></a>递归(11&#x2F;15)</h1><ul><li><p><strong>递归就是方法自己去调用自己</strong>，每次调用时传入的参数是不同的，递归有助于解决程序中复杂的问题，同时可以让代码更为简洁。</p></li><li><p><strong>可解决问题：</strong></p><ul><li><p>可以解决各种数学问题，汉若塔，迷宫问题， 8皇后问题等等</p></li><li><p>各种算法的递归，如快排，归并排序，二分查找，分治算法等</p></li></ul></li><li><p><strong>递归的规则：</strong></p><ul><li><p>执行一个方法时，就创建一个新的受保护的独立栈空间</p></li><li><p>方法的局部变量是独立的，不会相互影响。</p></li><li><p>如果方法中使用的是引用型类型变量，比如数组，则会共享引用型的数据</p></li><li><p>递归必须向退出递归的条件接近，否则就是无线递归，会出现StackOverflowError。</p></li><li><p>一个方法执行完毕后，或者遇到return，会就返回数据，遵守谁调用就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p></li></ul></li></ul><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><ul><li><p>给一个二维迷宫，写一个算法走出迷宫</p></li><li><p>解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionTest</span> &#123;</span><br><span class="line">    <span class="comment">//记录当前位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> currentX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> currentY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置10-10迷宫地图</span></span><br><span class="line"><span class="comment">         * 0：可行道路</span></span><br><span class="line"><span class="comment">         * 1：墙</span></span><br><span class="line"><span class="comment">         * 2：目标地点</span></span><br><span class="line"><span class="comment">         * 3: 自身行走路径</span></span><br><span class="line"><span class="comment">         * (0,1)为迷宫入口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span>[][] maze = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//遍历地图</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===============地图===================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maze.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; maze[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (maze[i][j] == <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="comment">//找到当前坐标</span></span><br><span class="line">                    currentX = j;</span><br><span class="line">                    currentY = i;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(maze[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===================解=================&quot;</span>);</span><br><span class="line">        <span class="comment">//解法</span></span><br><span class="line">        <span class="type">int</span>[][] solution = solution(maze);</span><br><span class="line">        <span class="comment">//遍历地图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; solution.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; solution[i].length; j++) &#123;</span><br><span class="line">                System.out.print(solution[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        isWin(solution);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] solution(<span class="type">int</span>[][] maze)&#123;</span><br><span class="line">        <span class="keyword">if</span> (isRoad(maze))&#123;</span><br><span class="line">            maze[currentY][currentX] = <span class="number">3</span>;</span><br><span class="line">            solution(maze);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maze;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得可行路劲</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isRoad</span><span class="params">(<span class="type">int</span>[][] maze)</span>&#123;</span><br><span class="line">        <span class="comment">//判断道路是否可行</span></span><br><span class="line">        <span class="comment">//判断下方</span></span><br><span class="line">        <span class="keyword">if</span> (currentY != <span class="number">9</span> &amp;&amp; maze[currentY + <span class="number">1</span>][currentX] != <span class="number">1</span> &amp;&amp; maze[currentY + <span class="number">1</span>][currentX] != <span class="number">3</span>)&#123;</span><br><span class="line">            currentY++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断上方</span></span><br><span class="line">        <span class="keyword">if</span> (currentY != <span class="number">0</span> &amp;&amp; maze[currentY - <span class="number">1</span>][currentX] != <span class="number">1</span> &amp;&amp; maze[currentY - <span class="number">1</span>][currentX] != <span class="number">3</span>)&#123;</span><br><span class="line">            currentY--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断左方</span></span><br><span class="line">        <span class="keyword">if</span> (currentX != <span class="number">0</span> &amp;&amp; maze[currentY][currentX - <span class="number">1</span>] != <span class="number">1</span> &amp;&amp; maze[currentY][currentX - <span class="number">1</span>] != <span class="number">3</span>)&#123;</span><br><span class="line">            currentX--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右方</span></span><br><span class="line">        <span class="keyword">if</span> (currentX != <span class="number">9</span> &amp;&amp; maze[currentY][currentX + <span class="number">1</span>] != <span class="number">1</span> &amp;&amp; maze[currentY][currentX + <span class="number">1</span>] != <span class="number">3</span>)&#123;</span><br><span class="line">            currentX++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否胜利</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isWin</span><span class="params">(<span class="type">int</span>[][] maze)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] a:maze) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> e:a) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="number">2</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你还没出来&quot;</span>);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜你通关！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===============地图===================</span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line">==================解==================</span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line">恭喜你通关！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>存在问题，因为探索路劲的方向存在先后顺序，所以存在找不到的问题，且不能记录最短路径</p></li><li><p>例如改变目标地点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===============地图===================</span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line">==================解==================</span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">2</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">0</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">3</span><span class="number">3</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span><span class="number">1</span></span><br><span class="line">你还没出来</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果跑不出来了</p></li><li><p>优化，调整先后顺序，获得解</p></li></ul><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="排序算法介绍"><a href="#排序算法介绍" class="headerlink" title="排序算法介绍"></a>排序算法介绍</h2><h2 id="算法时间效率"><a href="#算法时间效率" class="headerlink" title="算法时间效率"></a>算法时间效率</h2><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="快速排序-11-x2F-16"><a href="#快速排序-11-x2F-16" class="headerlink" title="快速排序(11&#x2F;16)"></a>快速排序(11&#x2F;16)</h2><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h2 id="归并排序-11-x2F-17"><a href="#归并排序-11-x2F-17" class="headerlink" title="归并排序(11&#x2F;17)"></a>归并排序(11&#x2F;17)</h2><h1 id="查找算法-11-x2F-18"><a href="#查找算法-11-x2F-18" class="headerlink" title="查找算法(11&#x2F;18)"></a>查找算法(11&#x2F;18)</h1><h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h2 id="插值查找算法"><a href="#插值查找算法" class="headerlink" title="插值查找算法"></a>插值查找算法</h2><h2 id="黄金分割算法"><a href="#黄金分割算法" class="headerlink" title="黄金分割算法"></a>黄金分割算法</h2><h1 id="哈希表-11-x2F-19"><a href="#哈希表-11-x2F-19" class="headerlink" title="哈希表(11&#x2F;19)"></a>哈希表(11&#x2F;19)</h1><h1 id="树-11-x2F-20"><a href="#树-11-x2F-20" class="headerlink" title="树(11&#x2F;20)"></a>树(11&#x2F;20)</h1><h1 id="树结构应用-11-x2F-21-22"><a href="#树结构应用-11-x2F-21-22" class="headerlink" title="树结构应用(11&#x2F;21-22)"></a>树结构应用(11&#x2F;21-22)</h1><h1 id="多路查找树-11-x2F-23-24"><a href="#多路查找树-11-x2F-23-24" class="headerlink" title="多路查找树(11&#x2F;23-24)"></a>多路查找树(11&#x2F;23-24)</h1><h1 id="图-11-x2F-25-26"><a href="#图-11-x2F-25-26" class="headerlink" title="图(11&#x2F;25-26)"></a>图(11&#x2F;25-26)</h1><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><h2 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h2><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><h2 id="动态规划算法-11-x2F-27"><a href="#动态规划算法-11-x2F-27" class="headerlink" title="动态规划算法(11&#x2F;27)"></a>动态规划算法(11&#x2F;27)</h2><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h2 id="普利姆算法-11-x2F-28"><a href="#普利姆算法-11-x2F-28" class="headerlink" title="普利姆算法(11&#x2F;28)"></a>普利姆算法(11&#x2F;28)</h2><h2 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h2><h2 id="迪杰斯特算法"><a href="#迪杰斯特算法" class="headerlink" title="迪杰斯特算法"></a>迪杰斯特算法</h2><h2 id="弗洛伊德算法-11-x2F-29"><a href="#弗洛伊德算法-11-x2F-29" class="headerlink" title="弗洛伊德算法(11&#x2F;29)"></a>弗洛伊德算法(11&#x2F;29)</h2><h2 id="马踏棋盘算法-11-x2F-30"><a href="#马踏棋盘算法-11-x2F-30" class="headerlink" title="马踏棋盘算法(11&#x2F;30)"></a>马踏棋盘算法(11&#x2F;30)</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="/post/dbb714e3.html"/>
      <url>/post/dbb714e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h1><details blue><summary> 爬虫基本介绍 </summary>              <div class='content'>              <ul><li>网络爬虫又称网络蜘蛛、网络机器人，它是一种按照一定的规则自动浏览、检索网页信息的程序或者脚本。网络爬虫能够自动请求网页，并将所需要的数据抓取下来。</li><li>百度搜索引擎，其实可以更形象地称之为百度蜘蛛（Baiduspider），它每天会在海量的互联网信息中爬取优质的信息，并进行收录。</li><li>为了限制爬虫带来的危险，大多数网站都有良好的反爬措施</li></ul><h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><p>爬虫可分为三大类：通用网络爬虫、聚焦网络爬虫、增量式网络爬虫。</p><h2 id="爬虫应用"><a href="#爬虫应用" class="headerlink" title="爬虫应用"></a>爬虫应用</h2><ol><li><p>数据分析</p></li><li><p>商业分析</p></li></ol><h2 id="python编写爬虫的步骤"><a href="#python编写爬虫的步骤" class="headerlink" title="python编写爬虫的步骤"></a>python编写爬虫的步骤</h2><ul><li>可写爬虫的语言有很多，如:PHP、Java、C&#x2F;C++ ，但是相对简单的是用python</li></ul><p>爬虫程序与其他程序不同，它的的思维逻辑一般都是相似的， 所以无需我们在逻辑方面花费大量的时间。下面对 Python 编写爬虫程序的流程做简单地说明：</p><ul><li>先由 urllib 模块的 request 方法打开 URL 得到网页 HTML 对象。</li><li>使用浏览器打开网页源代码分析网页结构以及元素节点。</li><li>通过 Beautiful Soup 或则正则表达式提取数据。</li><li>存储数据到本地磁盘或数据库。</li></ul>              </div>            </details><h1 id="网页基本构成"><a href="#网页基本构成" class="headerlink" title="网页基本构成"></a>网页基本构成</h1><p>网页一般由三部分组成，分别是 HTML（超文本标记语言）、CSS（层叠样式表）和 JavaScript（简称“JS”动态脚本语言），它们三者在网页中分别承担着不同的任务。</p><ul><li>HTML 负责定义网页的内容</li><li>CSS 负责描述网页的布局</li><li>JavaScript 负责网页的行为</li></ul><h1 id="静态与动态页面"><a href="#静态与动态页面" class="headerlink" title="静态与动态页面"></a>静态与动态页面</h1><h2 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h2><ul><li>静态网页是标准的 HTML 文件，通过 GET 请求方法可以直接获取，文件的扩展名是<code>.html</code>、<code>.htm</code>等</li><li>静态网页的内容相对固定，且不需要连接后台数据库，因此响应速度非常快。</li></ul><h2 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h2><ul><li>动态网页指的是采用了动态网页技术的页面。</li><li>AJAX（是指一种创建交互式、快速动态网页应用的网页开发技术）</li><li>ASP(是一种创建动态交互式网页并建立强大的 web 应用程序)</li><li>JSP(是 Java 语言创建动态网页的技术标准) 等技术，它不需要重新加载整个页面内容，就可以实现网页的局部更新。</li></ul><h1 id="第一个爬虫程序"><a href="#第一个爬虫程序" class="headerlink" title="第一个爬虫程序"></a>第一个爬虫程序</h1><ul><li>使用 Python 内置的 urllib 库获取网页的 html 信息。</li><li>urllib 库属于 Python 的标准库模块，无须单独安装，它是 Python 爬虫的常用模块。</li></ul><h2 id="获取网页html信息"><a href="#获取网页html信息" class="headerlink" title="获取网页html信息"></a>获取网页html信息</h2><p><strong>1) 获得响应对象</strong></p><p>获得百度首页的响应对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包,发起请求使用urllib库的request请求模块</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># urlopen()向URL发请求,返回响应对象,注意url必须完整</span></span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response) <span class="comment"># &lt;http.client.HTTPResponse object at 0x000002B250598B50&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2) 输出html信息</strong></p><p>通过调用 response 响应对象的 read() 方法提取 HTML 信息，该方法返回的结果是字节串类型(bytes)，因此需要使用 decode() 转换为字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取响应内容，并转成utf-8编码</span></span><br><span class="line">html = response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#打印响应内容</span></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p>获取得到百度首页HTML信息</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>爬虫库 urllib的常用方法</p><ul><li><h4 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen()"></a>urlopen()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示向网站发起请求并获取响应对象</span></span><br><span class="line">urllib.request.urlopen(url,timeout)</span><br><span class="line"><span class="comment"># url：表示要爬取数据的 url 地址。</span></span><br><span class="line"><span class="comment"># timeout：设置等待超时时间，指定时间内未得到响应则抛出超时异常。</span></span><br></pre></td></tr></table></figure></li><li><h4 id="Request"><a href="#Request" class="headerlink" title="Request()"></a>Request()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该方法用于创建请求对象、包装请求头。</span></span><br><span class="line">urllib.request.Request(url,headers)</span><br><span class="line"><span class="comment"># url：请求的URL地址。</span></span><br><span class="line"><span class="comment"># headers：重构请求头。</span></span><br></pre></td></tr></table></figure></li><li><h4 id="html响应对象方法"><a href="#html响应对象方法" class="headerlink" title="html响应对象方法"></a>html响应对象方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bytes</span> = response.read() <span class="comment"># read()返回结果为 bytes 数据类型</span></span><br><span class="line">string = response.read().decode() <span class="comment"># decode()将字节串转换为 string 类型</span></span><br><span class="line">url = response.geturl() <span class="comment"># 返回响应对象的URL地址</span></span><br><span class="line">code = response.getcode() <span class="comment"># 返回请求时的HTTP响应码</span></span><br></pre></td></tr></table></figure></li><li><h4 id="编码解码操作"><a href="#编码解码操作" class="headerlink" title="编码解码操作"></a>编码解码操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串转换为字节码</span></span><br><span class="line">string.encode(<span class="string">&quot;utf-8&quot;</span>) </span><br><span class="line"><span class="comment">#字节码转换为字符串</span></span><br><span class="line"><span class="built_in">bytes</span>.decode(<span class="string">&quot;utf-8&quot;</span>) </span><br></pre></td></tr></table></figure></li></ul><h1 id="User-Agent-用户代理"><a href="#User-Agent-用户代理" class="headerlink" title="User-Agent(用户代理)"></a>User-Agent(用户代理)</h1><h2 id="常见User-Agent"><a href="#常见User-Agent" class="headerlink" title="常见User-Agent"></a>常见User-Agent</h2><table><thead><tr><th>系统</th><th>浏览器</th><th align="left">User-Agent字符串</th></tr></thead><tbody><tr><td>Mac</td><td>Chrome</td><td align="left">Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;73.0.3683.75 Safari&#x2F;537.36</td></tr><tr><td>Mac</td><td>Firefox</td><td align="left">Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko&#x2F;20100101 Firefox&#x2F;65.0</td></tr><tr><td>Mac</td><td>Safari</td><td align="left">Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;605.1.15 (KHTML, like Gecko) Version&#x2F;12.0.3 Safari&#x2F;605.1.15</td></tr><tr><td>Windows</td><td>Edge</td><td align="left">Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;64.0.3282.140 Safari&#x2F;537.36 Edge&#x2F;18.17763</td></tr><tr><td>Windows</td><td>IE</td><td align="left">Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; Trident&#x2F;7.0; rv:11.0) like Gecko</td></tr><tr><td>Windows</td><td>Chrome</td><td align="left">Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;72.0.3626.121 Safari&#x2F;537.36</td></tr><tr><td>iOS</td><td>Chrome</td><td align="left">Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit&#x2F;537.51.1 (KHTML, like Gecko) CriOS&#x2F;31.0.1650.18 Mobile&#x2F;11B554a Safari&#x2F;8536.25</td></tr><tr><td>iOS</td><td>Safari</td><td align="left">Mozilla&#x2F;5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit&#x2F;600.1.4 (KHTML, like Gecko) Version&#x2F;8.0 Mobile&#x2F;12F70 Safari&#x2F;600.1.4</td></tr><tr><td>Android</td><td>Chrome</td><td align="left">Mozilla&#x2F;5.0 (Linux; Android 4.2.1; M040 Build&#x2F;JOP40D) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;31.0.1650.59 Mobile Safari&#x2F;537.36</td></tr><tr><td>Android</td><td>Webkit</td><td align="left">Mozilla&#x2F;5.0 (Linux; U; Android 4.4.4; zh-cn; M351 Build&#x2F;KTU84P) AppleWebKit&#x2F;534.30 (KHTML, like Gecko) Version&#x2F;4.0 Mobile Safari&#x2F;534.30</td></tr></tbody></table><p>通过<a href="https://useragent.buyaocha.com/">在线识别工具</a>，可以查看本机的浏览器版本以及 UA 信息。</p><h2 id="爬虫程序UA信息"><a href="#爬虫程序UA信息" class="headerlink" title="爬虫程序UA信息"></a>爬虫程序UA信息</h2><p>通过向 HTTP 测试网站（<a href="http://httpbin.org/">http://httpbin.org/</a>）发送 GET 请求来查看请求头信息，从而获取<strong>爬虫程序</strong>的 UA。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包,发起请求使用urllib库的request请求模块</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#向网站发送get请求</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line">html = response.read().decode()</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;identity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python-urllib/3.11&quot;</span>, <span class="comment"># UA信息在请求头中</span></span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-636b63df-5a1ee1fd7e91121a3414fb7e&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;1.65.208.162&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重构爬虫UA信息"><a href="#重构爬虫UA信息" class="headerlink" title="重构爬虫UA信息"></a>重构爬虫UA信息</h2><p>**Request(url&#x3D;url,headers&#x3D;headers)**包装请求头信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包,发起请求使用urllib库的request请求模块</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义发送URL</span></span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line"><span class="comment"># 重构请求头，伪装成谷歌浏览器</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 创建请求对象，包装ua信息</span></span><br><span class="line">req = urllib.request.Request(url=url,headers=headers) </span><br><span class="line"><span class="comment"># 发送请求，获取响应对象</span></span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="comment"># 提取html信息</span></span><br><span class="line">html = response.read().decode()</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;identity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="comment"># UA变成了谷歌浏览器</span></span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-636b6ab5-260b85267a5210c47cd2728d&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;42.2.203.245&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/get&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义用户代理池"><a href="#自定义用户代理池" class="headerlink" title="自定义用户代理池"></a>自定义用户代理池</h1><ul><li>一般都会构建一个 User-Agent （用户代理）池，就是把多个浏览器的 UA 信息放进列表中，然后再从中随机选择。</li><li>构建用户代理池，能够避免总是使用一个 UA 来访问网站，因为短时间内总使用一个 UA 高频率访问的网站，可能会引起网站的警觉，从而封杀掉 IP。</li></ul><h2 id="自定义UA代理池"><a href="#自定义UA代理池" class="headerlink" title="自定义UA代理池"></a>自定义UA代理池</h2><ul><li><p>定义一个 ua_info.py 文件，并将以下 UA 信息以列表的形式粘贴到该文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ua_list = [</span><br><span class="line">    <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块随机获取UA"><a href="#模块随机获取UA" class="headerlink" title="模块随机获取UA"></a>模块随机获取UA</h2><ul><li><p>安装第三方模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fake-useragent</span><br></pre></td></tr></table></figure></li><li><p>随机获得UA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment">#实例化一个对象</span></span><br><span class="line">ua=UserAgent()</span><br><span class="line"><span class="comment">#随机获取一个ie浏览器ua</span></span><br><span class="line"><span class="built_in">print</span>(ua.ie)</span><br><span class="line"><span class="built_in">print</span>(ua.ie)</span><br><span class="line"><span class="comment">#随机获取一个火狐浏览器ua</span></span><br><span class="line"><span class="built_in">print</span>(ua.firefox)</span><br><span class="line"><span class="built_in">print</span>(ua.firefox)</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随机获取ie的ua信息</span></span><br><span class="line"></span><br><span class="line">Mozilla/<span class="number">5.0</span> (compatible; MSIE <span class="number">9.0</span>; Windows NT <span class="number">6.1</span>; WOW64; Trident/<span class="number">5.0</span>; .NET CLR <span class="number">3.5</span><span class="number">.30729</span>; .NET CLR <span class="number">3.0</span><span class="number">.30729</span>; .NET CLR <span class="number">2.0</span><span class="number">.50727</span>; Media Center PC <span class="number">6.0</span>)</span><br><span class="line"></span><br><span class="line">Mozilla/<span class="number">5.0</span> (compatible; MSIE <span class="number">10.0</span>; Windows NT <span class="number">6.1</span>; Trident/<span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机获取火狐的ua信息</span></span><br><span class="line">Mozilla/<span class="number">5.0</span> (X11; OpenBSD i386; rv:<span class="number">72.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">72.0</span></span><br><span class="line"></span><br><span class="line">Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; WOW64; rv:<span class="number">31.0</span>) Gecko/<span class="number">20130401</span> Firefox/<span class="number">31.0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="URL编码和解码"><a href="#URL编码和解码" class="headerlink" title="URL编码和解码"></a>URL编码和解码</h1><ul><li>安全字符，指的是没有特殊用途或者特殊意义的字符。</li><li>当 URL 路径或者查询参数中，带有中文或者特殊字符的时候，就需要对 URL 进行编码（采用十六进制编码格式）。</li><li>URL 编码的原则是使用安全字符去表示那些不安全的字符。</li></ul><h2 id="URL组成"><a href="#URL组成" class="headerlink" title="URL组成"></a>URL组成</h2><ul><li><p>URL 是由一些简单的组件构成，比如协议、域名、端口号、路径和查询字符串等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url：</span></span><br><span class="line">https://www.maoyan.com/films?showType=<span class="number">1</span></span><br><span class="line"><span class="comment"># 域名：www.maoyan.com</span></span><br><span class="line"><span class="comment"># 路径和查询字符串之间使用问号?隔开</span></span><br><span class="line"><span class="comment"># 路径：films</span></span><br><span class="line"><span class="comment"># 查询字符串: showType=1</span></span><br></pre></td></tr></table></figure></li><li><p>URL 中规定了一些具有特殊意义的字符，常被用来分隔两个不同的 URL 组件，这些字符被称为<strong>保留字符</strong>。</p><ul><li>冒号：用于分隔协议和主机组件，斜杠用于分隔主机和路径</li><li><code>?</code>：用于分隔路径和查询参数等。</li><li><code>=</code>用于表示查询参数中的键值对。</li><li><code>&amp;</code>符号用于分隔查询多个键值对。</li></ul><p>其余保留字符:&#x2F; . … # @ $ + ; %</p></li></ul><h2 id="编码字符"><a href="#编码字符" class="headerlink" title="编码字符"></a>编码字符</h2><ul><li><p>URL 之所以需要编码，是因为 URL 中的某些字符会引起歧义</p><div class="note blue flat"><p>URL 编码协议规定（RFC3986 协议）：URL 中只允许使用 ASCII 字符集可以显示的字符，比如英文字母、数字、和<code>- _ . ~ ! *</code>这 6 个<strong>特殊字符</strong>。当在 URL 中使用不属于 ASCII 字符集的字符时，就要使用特殊的符号对该字符进行编码，比如空格需要用<code>%20</code>来表示。</p></div></li></ul><h3 id="需要编码的字符"><a href="#需要编码的字符" class="headerlink" title="需要编码的字符"></a>需要编码的字符</h3><ul><li><p>不属于 ASCII 字符集的字符，比如空格需要用<code>%20</code>来表示。</p></li><li><p><strong>保留字符</strong>和<strong>不安全字符</strong>：[ ] &lt; &gt; “ “  { } | \ ^ * · ‘ ’ 等</p><p>查询字符串中包含一些特殊字符，这些特殊字符不需要编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/...?param=<span class="number">10</span>!*&amp;param1=<span class="number">20</span>!-~_</span><br></pre></td></tr></table></figure></li><li><p>部分保留字符，即 &amp; &#x2F; : ; &#x3D; ? @ 。</p></li></ul><h3 id="URL特殊字符编码"><a href="#URL特殊字符编码" class="headerlink" title="URL特殊字符编码"></a>URL特殊字符编码</h3><table><thead><tr><th>字符</th><th>含义</th><th>十六进制值编码</th></tr></thead><tbody><tr><td>+</td><td>URL 中 + 号表示空格</td><td>%2B</td></tr><tr><td>空格</td><td>URL中的空格可以编码为 + 号或者 %20</td><td>%20</td></tr><tr><td>&#x2F;</td><td>分隔目录和子目录</td><td>%2F</td></tr><tr><td>?</td><td>分隔实际的 URL 和参数</td><td>%3F</td></tr><tr><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>&amp;</td><td>URL 中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>&#x3D;</td><td>URL 中指定参数的值</td><td>%3D</td></tr></tbody></table><h2 id="编码的实现"><a href="#编码的实现" class="headerlink" title="编码的实现"></a>编码的实现</h2><ul><li><p>用谷歌浏览器输入爬虫，搜索，可看到URL信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com.hk/search?q=爬虫&amp;rlz=1C1CHWL_zh-CNHK1024HK1024&amp;oq=&amp;aqs=chrome<span class="number">.0</span><span class="number">.69</span>i59i450l8<span class="number">.25089250j</span>0j15&amp;sourceid=chrome&amp;ie=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>删除多余的查询字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com.hk/search?q=爬虫</span><br></pre></td></tr></table></figure></li><li><p>对”爬虫“进行编码</p><ul><li><p>使用**parse.urlencode()**方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入parse模块</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建查询字符串字典</span></span><br><span class="line">query_string = &#123;</span><br><span class="line"><span class="string">&#x27;q&#x27;</span> : <span class="string">&#x27;爬虫&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#调用parse模块的urlencode()进行编码</span></span><br><span class="line">result = parse.urlencode(query_string)</span><br><span class="line"><span class="comment">#使用format格式化字符串,拼接url</span></span><br><span class="line">url = <span class="string">&quot;https://www.google.com.hk/search?&#123;&#125;&quot;</span>.<span class="built_in">format</span>(result)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com.hk/search?q=%E7%<span class="number">88</span>%AC%E8%<span class="number">99</span>%AB</span><br></pre></td></tr></table></figure></li><li><p>使用<strong>parse.quote(string)</strong> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入parse模块</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建查询字符串</span></span><br><span class="line">query_string = <span class="string">&#x27;爬虫&#x27;</span></span><br><span class="line"><span class="comment">#调用parse模块的quote()进行编码</span></span><br><span class="line">result = parse.quote(query_string)</span><br><span class="line"><span class="comment">#使用format格式化字符串,拼接url</span></span><br><span class="line">url = <span class="string">&quot;https://www.google.com.hk/search?&#123;&#125;&quot;</span>.<span class="built_in">format</span>(result)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.com.hk/search?q=%E7%<span class="number">88</span>%AC%E8%<span class="number">99</span>%AB</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="解码实现"><a href="#解码实现" class="headerlink" title="解码实现"></a>解码实现</h2><ul><li>解码是编码的逆向过程</li></ul><h3 id="unquote-string-实现还原"><a href="#unquote-string-实现还原" class="headerlink" title="unquote(string)实现还原"></a>unquote(string)实现还原</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入parse模块</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建查询字符串</span></span><br><span class="line">query_string = <span class="string">&#x27;%E7%88%AC%E8%99%AB&#x27;</span></span><br><span class="line"><span class="comment">#调用parse模块的unquote()进行解码</span></span><br><span class="line">result = parse.unquote(query_string)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爬虫</span><br></pre></td></tr></table></figure><h3 id="URL地址拼接方式"><a href="#URL地址拼接方式" class="headerlink" title="URL地址拼接方式"></a>URL地址拼接方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串相加</span></span><br><span class="line">  baseurl = <span class="string">&#x27;https://www.google.com.hk/search?&#x27;</span></span><br><span class="line">  params=<span class="string">&#x27;q=%E7%88%AC%E8%99%AB&#x27;</span></span><br><span class="line">  url = baseurl + params</span><br><span class="line"><span class="comment"># 字符串格式化（占位符）</span></span><br><span class="line">  params=<span class="string">&#x27;q=%E7%88%AC%E8%99%AB&#x27;</span></span><br><span class="line">  url = <span class="string">&#x27;https://www.google.com.hk/search?%s&#x27;</span>% params</span><br><span class="line"><span class="comment"># format()方法</span></span><br><span class="line">  url = <span class="string">&#x27;https://www.google.com.hk/search?&#123;&#125;&#x27;</span></span><br><span class="line">  params=<span class="string">&#x27;q=%E7%88%AC%E8%99%AB&#x27;</span></span><br><span class="line">  url = url.<span class="built_in">format</span>(params)</span><br></pre></td></tr></table></figure><h1 id="python抓取网页"><a href="#python抓取网页" class="headerlink" title="python抓取网页"></a>python抓取网页</h1><ul><li>抓取您想要的网页，并将其保存至本地计算机。</li><li>该过程分为三个部分、<ul><li><strong>拼接 url 地址</strong></li><li><strong>发送请求</strong></li><li><strong>将照片保存至本地</strong></li></ul></li></ul><h2 id="拼接url地址-书写要发送的url"><a href="#拼接url地址-书写要发送的url" class="headerlink" title="拼接url地址(书写要发送的url)"></a>拼接url地址(书写要发送的url)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.google.com.hk/search?q=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 想要搜索的内容</span></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;请输入要搜索的内容:&#x27;</span>)</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">encordWord = parse.quote(word)</span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">fullUrl = url.<span class="built_in">format</span>(encordWord)</span><br></pre></td></tr></table></figure><h2 id="向URL发送请求"><a href="#向URL发送请求" class="headerlink" title="向URL发送请求"></a>向URL发送请求</h2><p>发送请求主要分为以下几个步骤：</p><ul><li>创建请求对象-Request</li><li>获取响应对象-urlopen</li><li>获取响应内容-read</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向URL发送请求</span></span><br><span class="line"><span class="comment"># 重构请求头</span></span><br><span class="line">hearders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 创建请求</span></span><br><span class="line">req = request.Request(url=fullUrl,headers=hearders)</span><br><span class="line"><span class="comment"># 发送请求，获得响应对象</span></span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="comment"># 获得响应内容</span></span><br><span class="line">html = resp.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="保存为本地文件"><a href="#保存为本地文件" class="headerlink" title="保存为本地文件"></a>保存为本地文件</h2><ul><li><p>把爬取的照片保存至本地，此处需要使用 Python 编程的文件 IO 操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename = word + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure></li></ul><h2 id="完成代码"><a href="#完成代码" class="headerlink" title="完成代码"></a>完成代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.google.com.hk/search?q=&#123;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 想要搜索的内容</span></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;请输入要搜索的内容:&#x27;</span>)</span><br><span class="line">encordWord = parse.quote(word)</span><br><span class="line">fullUrl = url.<span class="built_in">format</span>(encordWord)</span><br><span class="line"><span class="built_in">print</span>(fullUrl)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向URL发送请求</span></span><br><span class="line"><span class="comment"># 重构请求头</span></span><br><span class="line">hearders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 创建请求</span></span><br><span class="line">req = request.Request(url=fullUrl,headers=hearders)</span><br><span class="line"><span class="comment"># 发送请求，获得响应对象</span></span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="comment"># 获得响应内容</span></span><br><span class="line">html = resp.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到当前文件夹</span></span><br><span class="line">filename = word + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure><h2 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>(<span class="params">word</span>):</span><br><span class="line">    url = <span class="string">&#x27;https://www.google.com.hk/search?q=&#123;&#125;&#x27;</span></span><br><span class="line">    <span class="comment"># 想要搜索的内容</span></span><br><span class="line">    encordWord = parse.quote(word)</span><br><span class="line">    <span class="keyword">return</span> url.<span class="built_in">format</span>(encordWord)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向URL发送请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">requestUrl</span>(<span class="params">url,filename</span>):</span><br><span class="line">    <span class="comment"># 重构请求头</span></span><br><span class="line">    hearders = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    <span class="comment"># 创建请求</span></span><br><span class="line">    req = request.Request(url=url,headers=hearders)</span><br><span class="line">    <span class="comment"># 发送请求，获得响应对象</span></span><br><span class="line">    resp = request.urlopen(req)</span><br><span class="line">    <span class="comment"># 获得响应内容</span></span><br><span class="line">    html = resp.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 保存到当前文件夹</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  word = <span class="built_in">input</span>(<span class="string">&#x27;请输入搜索内容:&#x27;</span>)</span><br><span class="line">  url = getUrl(word)</span><br><span class="line">  filename = word + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">  requestUrl(url,filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="抓取百度贴吧数据"><a href="#抓取百度贴吧数据" class="headerlink" title="抓取百度贴吧数据"></a>抓取百度贴吧数据</h1><ul><li>抓取百度贴吧（<a href="https://tieba.baidu.com/">https://tieba.baidu.com/</a>）页面</li></ul><h2 id="判断页面类型"><a href="#判断页面类型" class="headerlink" title="判断页面类型"></a>判断页面类型</h2><ul><li>页面内的所有信息都包含在源码页中，数据并不需要从数据库另行加载，该页面属于静态页面。</li></ul><h2 id="寻找URL变化规律"><a href="#寻找URL变化规律" class="headerlink" title="寻找URL变化规律"></a>寻找URL变化规律</h2><ul><li><p>搜索”python学习”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tieba.baidu.com/f?ie=utf-<span class="number">8</span>&amp;kw=python学习&amp;fr=search</span><br></pre></td></tr></table></figure></li><li><p>点击第二页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tieba.baidu.com/f?kw=python学习&amp;ie=utf-<span class="number">8</span>&amp;pn=<span class="number">50</span></span><br></pre></td></tr></table></figure></li><li><p>点击第三页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tieba.baidu.com/f?kw=python学习&amp;ie=utf-<span class="number">8</span>&amp;pn=<span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>可以观察规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第n页</span></span><br><span class="line">pn = <span class="number">50</span> * (n-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 搜索内容</span></span><br><span class="line">kw = 内容</span><br></pre></td></tr></table></figure></li></ul><h2 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ua_info <span class="keyword">import</span> ua_list <span class="comment">#使用自定义的ua池</span></span><br><span class="line"><span class="comment"># 程序结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TiebaSpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.url = <span class="string">&quot;http://tieba.baidu.com/f?&#123;&#125;&amp;ie=utf-8&quot;</span></span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="comment"># 获取响应内容函数,使用随机User-Agent</span></span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:random.choice(ua_list)&#125;</span><br><span class="line">        req = request.Request(url=url,headers=headers)</span><br><span class="line">        resp = request.urlopen(req)</span><br><span class="line">        <span class="comment">#windows会存在乱码问题，需要使用 gbk解码，并使用ignore忽略不能处理的字节</span></span><br><span class="line">        <span class="comment">#linux不会存在上述问题，可以直接使用decode(&#x27;utf-8&#x27;)解码</span></span><br><span class="line">        <span class="keyword">return</span> resp.read().decode(<span class="string">&quot;gbk&quot;</span>,<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使用正则表达式来解析页面，提取数据</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_html</span>(<span class="params">self,filename,html</span>):</span><br><span class="line">        <span class="comment"># 将提取的数据按要求保存，csv、MySQL数据库等</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 主函数，用来控制整体逻辑</span></span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;输入贴吧名：&#x27;</span>)</span><br><span class="line">        begin = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;开始页码：&#x27;</span>))</span><br><span class="line">        stop = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;终止页码：&#x27;</span>))</span><br><span class="line">        <span class="comment"># +1 操作保证能取到整数</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(begin,stop + <span class="number">1</span>):</span><br><span class="line">            pn = (page - <span class="number">1</span>) * <span class="number">50</span></span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;kw&#x27;</span>:name,</span><br><span class="line">                <span class="string">&#x27;pn&#x27;</span>:<span class="built_in">str</span>(pn)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 拼接url</span></span><br><span class="line">            <span class="comment"># 编码</span></span><br><span class="line">            params = parse.urlencode(params)</span><br><span class="line">            url = self.url.<span class="built_in">format</span>(params)</span><br><span class="line">            <span class="comment"># 发送请求</span></span><br><span class="line">            html = self.get_html(url)</span><br><span class="line">            <span class="comment">#定义路径</span></span><br><span class="line">            filename = <span class="string">&#x27;&#123;&#125;-&#123;&#125;页.html&#x27;</span>.<span class="built_in">format</span>(name,page)</span><br><span class="line">            self.write_html(filename,html)</span><br><span class="line">            <span class="comment"># 提示爬取成功</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span> + <span class="built_in">str</span>(page) + <span class="string">&quot;页爬取成功&quot;</span>)</span><br><span class="line">            <span class="comment"># 爬完一次休眠1-2秒</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 程序开始运行时间</span></span><br><span class="line">    start =time.time()</span><br><span class="line">    spider = TiebaSpider()</span><br><span class="line">    spider.run()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;运行时间：&quot;</span> + <span class="built_in">str</span>(end - start))</span><br></pre></td></tr></table></figure><h2 id="爬虫程序结构"><a href="#爬虫程序结构" class="headerlink" title="爬虫程序结构"></a>爬虫程序结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxxSpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 定义常用变量,比如url或计数变量等</span></span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取响应内容函数,使用随机User-Agent</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使用正则表达式来解析页面，提取数据</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 将提取的数据按要求保存，csv、MySQL数据库等</span></span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 主函数，用来控制整体逻辑</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 程序开始运行时间</span></span><br><span class="line">    spider = xxxSpider()</span><br><span class="line">    spider.run()</span><br></pre></td></tr></table></figure><h4 id="1-请求函数"><a href="#1-请求函数" class="headerlink" title="1) 请求函数"></a>1) 请求函数</h4><p>请求函数最终的结果是返回一个 HTML 对象，以方便后续的函数调用它。 </p><h4 id="2-解析函数"><a href="#2-解析函数" class="headerlink" title="2) 解析函数"></a>2) 解析函数</h4><p>解析函数用来解析 HTML 页面，常用的解析模块有正则解析模块、bs4 解析模块。通过分析页面，提取出所需的数据，在后续内容会做详细介绍。</p><h4 id="3-保存数据函数"><a href="#3-保存数据函数" class="headerlink" title="3) 保存数据函数"></a>3) 保存数据函数</h4><p>该函数负责将抓取下来的数据保至数据库中，比如 MySQL、MongoDB 等，或者将其保存为文件格式，比如 csv、txt、excel 等。</p><h4 id="4-入口函数"><a href="#4-入口函数" class="headerlink" title="4) 入口函数"></a>4) 入口函数</h4><p>入口函数充当整个爬虫程序的桥梁，通过调用不同的功能函数，实现数据的最终抓取。入口函数的主要任务是组织数据，比如要搜索的贴吧名、编码 url 参数、拼接 url 地址、定义文件保存路径。</p><h1 id="正则表达式基本语法"><a href="#正则表达式基本语法" class="headerlink" title="正则表达式基本语法"></a>正则表达式基本语法</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>元字符</th><th>匹配内容</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配所有普通字符(数字、字母或下划线)</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>\b</td><td>匹配一个单词的结尾</td></tr><tr><td>^</td><td>匹配字符串的开始位置</td></tr><tr><td>$</td><td>匹配字符串的结尾位置</td></tr><tr><td>\W</td><td>匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\S</td><td>匹配非空白符</td></tr><tr><td>a|b</td><td>匹配字符 a 或字符 b</td></tr><tr><td>()</td><td>正则表达式分组所用符号，匹配括号内的表达式，表示一个组。</td></tr><tr><td>[…]</td><td>匹配字符组中的字符</td></tr><tr><td>[^…]</td><td>匹配除了字符组中字符的所有字符</td></tr></tbody></table><h2 id="量次"><a href="#量次" class="headerlink" title="量次"></a>量次</h2><table><thead><tr><th>量词</th><th>用法说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或者更多次</td></tr><tr><td>+</td><td>重复一次或者更多次</td></tr><tr><td>？</td><td>重复0次或者一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或者更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>[0123456789]</td><td>8</td><td>True</td><td>在一个字符组里枚举所有字符，字符组里的任意一个字符 和”待匹配字符”相同都视为可以匹配。</td></tr><tr><td>[0123456789]</td><td>a</td><td>False</td><td>由于字符组中没有 “a” 字符，所以不能匹配。</td></tr><tr><td>[0-9]</td><td>7</td><td>True</td><td>也可以用-表示范围，[0-9] 就和 [0123456789] 是一个意思。</td></tr><tr><td>[a-z]</td><td>s</td><td>True</td><td>同样的如果要匹配所有的小写字母，直接用 [a-z] 就可以表示。</td></tr><tr><td>[A-Z]</td><td>B</td><td>True</td><td>[A-Z] 就表示所有的大写字母。</td></tr><tr><td>[0-9a-fA-F]</td><td>e</td><td>True</td><td>可以匹配数字，大小写形式的 a～f，用来验证十六进制字符。</td></tr></tbody></table><h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><ul><li><p>正则表达式默认为贪婪匹配，也就是尽可能多的向后匹配字符。比如 {n,m} 表示匹配前面的内容出现 n 到 m 次（n 小于 m）。</p></li><li><p>在贪婪模式下，首先以匹配 m 次为目标。</p></li><li><p>而在非贪婪模式是尽可能少的向后匹配内容，也就是说匹配 n 次即可。</p></li><li><p>贪婪模式转换为非贪婪模式的方法很简单，在元字符后添加“?”即可实现</p></li></ul><table><thead><tr><th>元字符(贪婪模式)</th><th>非贪婪模式</th></tr></thead><tbody><tr><td>*</td><td>*?</td></tr><tr><td>+</td><td>+？</td></tr><tr><td>？</td><td>??</td></tr><tr><td>{n,m}</td><td>{n,m}？</td></tr></tbody></table><h2 id="正则表达式转义"><a href="#正则表达式转义" class="headerlink" title="正则表达式转义"></a>正则表达式转义</h2><ul><li><p>如果使用正则表达式匹配特殊字符时，则需要在字符前加<code>\</code>表示转意。</p></li><li><p>常见特殊字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + ? ^ $ [] () &#123;&#125; | \</span><br></pre></td></tr></table></figure></li></ul><h1 id="python-re模块"><a href="#python-re模块" class="headerlink" title="python re模块"></a>python re模块</h1><h2 id="re模块常用方法"><a href="#re模块常用方法" class="headerlink" title="re模块常用方法"></a>re模块常用方法</h2><p><strong>1) re.compile()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">regex=re.<span class="built_in">compile</span>(pattern,flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern：正则表达式对象。</span></span><br><span class="line"><span class="comment"># flags：代表功能标志位，扩展正则表达式的匹配。</span></span><br></pre></td></tr></table></figure><p><strong>2)  re.findall()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern,string,flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern：正则表达式对象。</span></span><br><span class="line"><span class="comment"># string：目标字符串</span></span><br><span class="line"><span class="comment"># flags：代表功能标志位，扩展正则表达式的匹配。</span></span><br></pre></td></tr></table></figure><p><strong>3) regex.findall()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">regex.findall(string,pos,endpos)</span><br><span class="line"><span class="comment"># string 目标字符串。</span></span><br><span class="line"><span class="comment"># pos 截取目标字符串的开始匹配位置。</span></span><br><span class="line"><span class="comment"># endpos 截取目标字符串的结束匹配位置。</span></span><br></pre></td></tr></table></figure><p><strong>4) re.split()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern,string,flags = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern：正则表达式。</span></span><br><span class="line"><span class="comment"># string：目标字符串。</span></span><br><span class="line"><span class="comment"># flags：功能标志位,扩展正则表达式的匹配。</span></span><br></pre></td></tr></table></figure><p><strong>5) re.sub</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern,replace,string,<span class="built_in">max</span>,flags = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern：正则表达式。</span></span><br><span class="line"><span class="comment"># replace：替换的字符串。</span></span><br><span class="line"><span class="comment"># string：目标字符串。</span></span><br><span class="line"><span class="comment"># max：最多替换几处，默认替换全部，</span></span><br><span class="line"><span class="comment"># flags：功能标志位,扩展正则表达式的匹配。</span></span><br></pre></td></tr></table></figure><p><strong>6) re.search()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re.search(pattern,string,flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># pattern：正则表达式</span></span><br><span class="line"><span class="comment"># string：目标字符串</span></span><br></pre></td></tr></table></figure><h2 id="flags功能标志位"><a href="#flags功能标志位" class="headerlink" title="flags功能标志位"></a>flags功能标志位</h2><table><thead><tr><th>缩写元字符</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>元字符只能匹配 ASCII码。</td></tr><tr><td>I</td><td>匹配忽略字母大小写。</td></tr><tr><td>S</td><td>使得<code>.</code>元字符可以匹配换行符。</td></tr><tr><td>M</td><td>使 ^ $ 可以匹配每一行的开头和结尾位置。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">html=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;p&gt;hello&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;&lt;p&gt;world&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#贪婪匹配，re.S可以匹配换行符</span></span><br><span class="line"><span class="comment">#创建正则表达式对象</span></span><br><span class="line">pattern=re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div&gt;&lt;p&gt;.*&lt;/p&gt;&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line"><span class="comment">#匹配HTMLX元素，提取信息</span></span><br><span class="line">re_list=pattern.findall(html)</span><br><span class="line"><span class="built_in">print</span>(re_list)</span><br><span class="line"><span class="comment">#非贪婪模式匹配，re.S可以匹配换行符</span></span><br><span class="line">pattern=re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div&gt;&lt;p&gt;.*?&lt;/p&gt;&lt;/div&gt;&#x27;</span>,re.S)</span><br><span class="line">re_list=pattern.findall(html)</span><br><span class="line"><span class="built_in">print</span>(re_list)</span><br></pre></td></tr></table></figure><h2 id="正则表达式分组"><a href="#正则表达式分组" class="headerlink" title="正则表达式分组"></a>正则表达式分组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#正则表达式分组</span></span><br><span class="line">website=<span class="string">&quot;helloWorld www.home.helloWorld&quot;</span></span><br><span class="line"><span class="comment">#提取所有信息</span></span><br><span class="line"><span class="comment">#注意此时正则表达式的 &quot;.&quot; 需要转义因此使用 \.</span></span><br><span class="line">pattern_1=re.<span class="built_in">compile</span>(<span class="string">&#x27;\w+\s+\w+\.\w+\.\w+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern_1.findall(website))</span><br><span class="line"><span class="comment">#提取匹配信息的第一项</span></span><br><span class="line">pattern_2=re.<span class="built_in">compile</span>(<span class="string">&#x27;(\w+)\s+\w+\.\w+\.\w+&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern_2.findall(website))</span><br><span class="line"><span class="comment">#有两个及以上的()则以元组形式显示</span></span><br><span class="line">pattern_3=re.<span class="built_in">compile</span>(<span class="string">&#x27;(\w+)\s+(\w+\.\w+\.\w+)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pattern_3.findall(website))</span><br></pre></td></tr></table></figure><h2 id="网页信息提取"><a href="#网页信息提取" class="headerlink" title="网页信息提取"></a>网页信息提取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">html=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;movie-item-info&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a title=&quot;你好，李焕英&quot;&gt;你好，李焕英&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;star&quot;&gt;</span></span><br><span class="line"><span class="string">主演：贾玲,张小斐,沈腾</span></span><br><span class="line"><span class="string">&lt;/p&gt;    </span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;movie-item-info&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;name&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a title=&quot;刺杀，小说家&quot;&gt;刺杀，小说家&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;star&quot;&gt;</span></span><br><span class="line"><span class="string">主演：雷佳音,杨幂,董子健,于和伟</span></span><br><span class="line"><span class="string">&lt;/p&gt;    </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 寻找HTML规律，书写正则表达式，使用正则表达式分组提取信息</span></span><br><span class="line">pattern=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;div.*?&lt;a title=&quot;(.*?)&quot;.*?star&quot;&gt;(.*?)&lt;/p.*?div&gt;&#x27;</span>,re.S)</span><br><span class="line">r_list=pattern.findall(html)</span><br><span class="line"><span class="built_in">print</span>(r_list)</span><br><span class="line"><span class="comment"># 整理数据格式并输出</span></span><br><span class="line"><span class="keyword">if</span>  r_list:</span><br><span class="line">    <span class="keyword">for</span> r_info <span class="keyword">in</span>  r_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;影片名称：&quot;</span>,r_info[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;影片主演：&quot;</span>,r_info[<span class="number">1</span>].strip())</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">20</span>*<span class="string">&quot;*&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="csv模块-读写文件"><a href="#csv模块-读写文件" class="headerlink" title="csv模块(读写文件)"></a>csv模块(读写文件)</h1><ul><li>CSV 是电子表格和数据库中最常见的输入、输出文件格式</li></ul><h2 id="csv文件写入"><a href="#csv文件写入" class="headerlink" title="csv文件写入"></a>csv文件写入</h2><p><strong>1) csv.writer()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">writer(csvfile, dialect=<span class="string">&#x27;excel&#x27;</span>, fmtparams)</span><br><span class="line"><span class="comment"># csvfile：必须是支持迭代(Iterator)的对象，可以是文件(file)对象或者列表(list)对象。</span></span><br><span class="line"><span class="comment"># dialect：编码风格，默认为 excel 的风格，也就是使用逗号,分隔。</span></span><br><span class="line"><span class="comment"># fmtparam：格式化参数，用来覆盖之前 dialect 对象指定的编码风格。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aggs.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    <span class="comment"># 注意传入数据的格式为列表元组格式</span></span><br><span class="line">    writer.writerows([(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>), (<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;love&#x27;</span>,<span class="string">&#x27;you&#x27;</span>)])</span><br></pre></td></tr></table></figure><ol start="2"><li>csv.DictWriter()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;names.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    <span class="comment">#构建字段名称，也就是key</span></span><br><span class="line">    fieldnames = [<span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    <span class="comment"># 写入字段名，当做表头</span></span><br><span class="line">    writer.writeheader()</span><br><span class="line">    <span class="comment"># 多行写入</span></span><br><span class="line">    writer.writerows([&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Baked&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Beans&#x27;</span>&#125;,&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Lovely&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Spam&#x27;</span>&#125;])</span><br><span class="line">    <span class="comment"># 单行写入</span></span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Wonderful&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Spam&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="csv文件写入-1"><a href="#csv文件写入-1" class="headerlink" title="csv文件写入"></a>csv文件写入</h2><p><strong>1) csv,reader()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csv.reader(csvfile, dialect=&#x27;excel&#x27;, **fmtparams)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;eggs.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamreader = csv.reader(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>, quotechar=<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> spamreader:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;, &#x27;</span>.join(row))</span><br></pre></td></tr></table></figure><p><strong>2) csv.DictReader()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;names.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.DictReader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row[<span class="string">&#x27;first_name&#x27;</span>], row[<span class="string">&#x27;last_name&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="爬取猫眼电影排行榜"><a href="#爬取猫眼电影排行榜" class="headerlink" title="爬取猫眼电影排行榜"></a>爬取猫眼电影排行榜</h1><h2 id="判断页面类型-找出数据分布规律"><a href="#判断页面类型-找出数据分布规律" class="headerlink" title="判断页面类型,找出数据分布规律"></a>判断页面类型,找出数据分布规律</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;board-index board-index-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-link&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;//s3plus.meituan.net/v1/mss_e2821d7f0cfe4ac1bf9202ecf9590e67/cdn-prod/file:5788b470/image/loading_2.e3d934bf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;poster-default&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">class</span>=<span class="string">&quot;board-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://p0.pipi.cn/mmdb/d2dad59253751bd236338fa5bd5a27c710413.jpg?imageView2/1/w/160/h/220&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;board-item-content&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span>我不是药神<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line">                主演：徐峥,周一围,王传君</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;releasetime&quot;</span>&gt;</span>上映时间：2018-07-05<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-number score-num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;score&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;integer&quot;</span>&gt;</span>9.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fraction&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="确定url规律"><a href="#确定url规律" class="headerlink" title="确定url规律"></a>确定url规律</h2><ul><li><p>第一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.maoyan.com/board/<span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>第二页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.maoyan.com/board/<span class="number">4</span>?offset=<span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>第三页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.maoyan.com/board/<span class="number">4</span>?offset=<span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>找到规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">页数：</span><br><span class="line">offset = (n-<span class="number">1</span>)*<span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="确定正则表达式"><a href="#确定正则表达式" class="headerlink" title="确定正则表达式"></a>确定正则表达式</h2><ul><li>根据页面规律</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/films/1200486&quot;</span> <span class="attr">title</span>=<span class="string">&quot;我不是药神&quot;</span> <span class="attr">data-act</span>=<span class="string">&quot;boarditem-click&quot;</span> <span class="attr">data-val</span>=<span class="string">&quot;&#123;movieId:1200486&#125;&quot;</span>&gt;</span>我不是药神<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line">                主演：徐峥,周一围,王传君</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;releasetime&quot;</span>&gt;</span>上映时间：2018-07-05<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>书写正则表达式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;movie-item-info&quot;</span>&gt;.*?title=<span class="string">&quot;(.*?)&quot;</span>.*?<span class="keyword">class</span>=<span class="string">&quot;star&quot;</span>&gt;(.*?)&lt;/p&gt;.*?releasetime<span class="string">&quot;&gt;(.*?)&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>(.*?)表示需要提取的信息</p><h2 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h2><p><a href="http://c.biancheng.net/python_spider/case02.html">http://c.biancheng.net/python_spider/case02.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/post/a4d4b8b8.html"/>
      <url>/post/a4d4b8b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="python环境搭建"><a href="#python环境搭建" class="headerlink" title="python环境搭建"></a>python环境搭建</h1><div class="tag link"><a class="link-card" title="python环境搭建" href="https://bigfunny.github.io/post/d658937b.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">python环境搭建</p><p class="url">https://bigfunny.github.io/post/d658937b.html</p></div></a></div> <h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串。</p></li><li><p>修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: cp-1252 -*-</span></span><br></pre></td></tr></table></figure></li><li><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p></li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>单行注释 #</p></li><li><p>多行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><ul><li><p>python不需要大括号 <strong>{}</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello?&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>缩进不一致会报错</p></li></ul><h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><ul><li>用”&#x2F;“分隔</li><li>在[], {}, 或 () 中不需要</li></ul><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">hello2 = <span class="string">&quot;hello2&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">&#x27;&#x27;&#x27;hello world!&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hello);</span><br></pre></td></tr></table></figure></li><li><p>转义符 \。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">&#x27;&#x27;&#x27;hello world!\n&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hello);</span><br></pre></td></tr></table></figure></li><li><p>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 <strong>\n</strong> 会显示，并不是换行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">r&#x27;hello world!\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hello);</span><br></pre></td></tr></table></figure></li><li><p>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</p></li><li><p>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</p></li><li><p>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>]);<span class="comment"># 12345</span></span><br></pre></td></tr></table></figure></li><li><p>Python 中的字符串不能改变。</p></li><li><p>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</p></li><li><p>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;1234567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]);<span class="comment">#135</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><ul><li>空行也是程序代码的一部分。</li></ul><h2 id="等待输入"><a href="#等待输入" class="headerlink" title="等待输入"></a>等待输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>();</span><br></pre></td></tr></table></figure><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><ul><li><p>用;分割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys;x = <span class="string">&#x27;hello&#x27;</span>;sys.stdout.write(x + <span class="string">&quot; world!\n&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码组"><a href="#代码组" class="headerlink" title="代码组"></a>代码组</h2><ul><li>缩进相同的一组语句构成一个代码块，我们称之代码组。</li></ul><h2 id="import与from…import"><a href="#import与from…import" class="headerlink" title="import与from…import"></a>import与from…import</h2><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p><p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p><p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p><p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python -h</span><br><span class="line">usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-c cmd : program passed <span class="keyword">in</span> <span class="keyword">as</span> string (terminates option <span class="built_in">list</span>)</span><br><span class="line">-d     : debug output <span class="keyword">from</span> parser (also PYTHONDEBUG=x)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="built_in">print</span> this <span class="built_in">help</span> message <span class="keyword">and</span> exit</span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul><li><p>Python 中的变量不需要声明。</p></li><li><p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">1</span>;</span><br><span class="line">hello = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">time = <span class="number">1.2</span>;</span><br><span class="line"><span class="comment"># 多个变量</span></span><br><span class="line">a = b = c = <span class="number">1</span>;</span><br><span class="line"><span class="comment"># 多个不同类型</span></span><br><span class="line">a = b = c = <span class="number">1</span>,<span class="number">1.1</span>,<span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>六个标准数据类型</p><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul></li></ul><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><ul><li><p><strong>int、float、bool、complex（复数）</strong>。</p></li><li><p>type() 函数可以用来查询变量所指的对象类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a));</span><br></pre></td></tr></table></figure></li><li><p>isinstance</p></li><li><p>数值运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(a + b);<span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">print</span>(a - b);<span class="comment"># 减法</span></span><br><span class="line"><span class="built_in">print</span>(a * b);<span class="comment"># 乘法</span></span><br><span class="line"><span class="built_in">print</span>(a / b);<span class="comment"># 除法得浮点数</span></span><br><span class="line"><span class="built_in">print</span>(a % b);<span class="comment"># 取余</span></span><br><span class="line"><span class="built_in">print</span>(a // b);<span class="comment"># 除法得整数</span></span><br><span class="line"><span class="built_in">print</span>(a ** b);<span class="comment"># 乘方</span></span><br></pre></td></tr></table></figure></li><li><p>在混合计算时，Python会把整型转换成为浮点数。</p></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>参考上述</p><ul><li>操作函数</li></ul><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a> 将字符串的第一个字符转换为大写</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg&#x3D; 0,end&#x3D;len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding&#x3D;”utf-8”, errors&#x3D;”strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding&#x3D;’UTF-8’,errors&#x3D;’strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix, beg&#x3D;0, end&#x3D;len(string))</a> 检查字符串是否以 suffix 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 True,否则返回 False。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize&#x3D;8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-find.html">find(str, beg&#x3D;0, end&#x3D;len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-index.html">index(str, beg&#x3D;0, end&#x3D;len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a> 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a> 返回字符串长度</td></tr><tr><td align="left">20</td><td align="left">[ljust(width<a href="https://www.runoob.com/python3/python3-string-ljust.html">, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a> 转换字符串中所有大写字符为小写.</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a> 截掉字符串左边的空格或指定字符。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a> 返回字符串 str 中最大的字母。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a> 返回字符串 str 中最小的字母。</td></tr><tr><td align="left">26</td><td align="left">[replace(old, new <a href="https://www.runoob.com/python3/python3-string-replace.html">, max])</a> 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str, beg&#x3D;0,end&#x3D;len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex( str, beg&#x3D;0, end&#x3D;len(string))</a> 类似于 index()，不过是从右边开始.</td></tr><tr><td align="left">29</td><td align="left">[rjust(width,<a href="https://www.runoob.com/python3/python3-string-rjust.html">, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a> 删除字符串末尾的空格或指定字符。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-split.html">split(str&#x3D;””, num&#x3D;string.count(str))</a> 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="left">32</td><td align="left">[splitlines(<a href="https://www.runoob.com/python3/python3-string-splitlines.html">keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">33</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(substr, beg&#x3D;0,end&#x3D;len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td align="left">34</td><td align="left">[strip(<a href="https://www.runoob.com/python3/python3-string-strip.html">chars])</a> 在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table, deletechars&#x3D;””)</a> 根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a> 转换字符串中的小写字母为大写</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>:]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li><p>append():增加数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.5</span>];</span><br><span class="line">t.append(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">print</span>(t);</span><br></pre></td></tr></table></figure></li><li><p>del():删除列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">del</span> lists[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">print</span>(lists);</span><br></pre></td></tr></table></figure></li><li><p>Python列表脚本操作符</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end&#x3D;” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table></li><li><p>常用函数</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python3/python3-att-list-pop.html">index&#x3D;-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key&#x3D;None, reverse&#x3D;False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td></tr></tbody></table></li></ul><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><ul><li>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">&#x27;as&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t);</span><br></pre></td></tr></table></figure><ul><li>删除元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">del</span> t;</span><br></pre></td></tr></table></figure><ul><li><p>元组运算符</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>len((1, 2, 3))</code></td><td align="left">3</td><td align="left">计算元素个数</td></tr><tr><td align="left"><code>(1, 2, 3) + (4, 5, 6)</code></td><td align="left">(1, 2, 3, 4, 5, 6)</td><td align="left">连接</td></tr><tr><td align="left"><code>(&#39;Hi!&#39;,) * 4</code></td><td align="left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="left">复制</td></tr><tr><td align="left"><code>3 in (1, 2, 3)</code></td><td align="left">True</td><td align="left">元素是否存在</td></tr><tr><td align="left"><code>for x in (1, 2, 3):      print (x, end=&quot; &quot;)</code></td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table></li><li><p>函数</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>len(tuple)</td><td>计算元组元素个数。</td></tr><tr><td>max(tuple)</td><td>返回元组中元素最大值。</td></tr><tr><td>min(tuple)</td><td>返回元组中元素最小值。</td></tr><tr><td>tuple(iterable)</td><td>将可迭代系列转换为元组。</td></tr></tbody></table></li><li><p>所谓元组的不可变指的是元组所指向的内存中的内容不可变。</p></li></ul><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set(集合)"></a>set(集合)</h2><ul><li><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合</p></li><li><p>注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试成员是否在集合</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">2</span> <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>);</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>);</span><br><span class="line"><span class="comment"># 用set集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="built_in">print</span>(a | b); <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(a - b); <span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b); <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b); <span class="comment"># 两个集合中不同时存在得元素</span></span><br></pre></td></tr></table></figure></li><li><p>添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.add( x )</span><br><span class="line">或</span><br><span class="line">s.update( x ) <span class="comment">#参数可以是列表，元组，字典等，语法格式</span></span><br></pre></td></tr></table></figure></li><li><p>移除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.remove( x )<span class="comment">#如果元素不存在，则会发生错误。</span></span><br><span class="line">或</span><br><span class="line">s.discard( x )<span class="comment">#如果元素不存在，不会发生错误。</span></span><br><span class="line">或</span><br><span class="line">s.pop() <span class="comment">#随机删除集合中的一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>元素个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(s)</span><br></pre></td></tr></table></figure></li><li><p>清空集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure></li><li><p>判断元素是否在集合中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x in s</span><br></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td align="left">给集合添加元素</td></tr></tbody></table></li></ul><h2 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h2><ul><li><p>列表是有序的对象集合，字典是无序的对象集合。</p></li><li><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;;</span><br><span class="line">t[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(t[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="built_in">print</span>(t[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="built_in">print</span>(t[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"><span class="built_in">print</span>(t.keys); <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span>(t.values); <span class="comment"># 输出所有的值</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;number&#x27;</span>:<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">del</span> t[<span class="string">&#x27;name&#x27;</span>]; <span class="comment"># 删除单个元素</span></span><br><span class="line"><span class="built_in">print</span>(t);</span><br><span class="line"><span class="keyword">del</span> t; <span class="comment"># 删除整个字典</span></span><br></pre></td></tr></table></figure></li><li><p>函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(dict)</td><td>计算字典元素个数，即键的总数。</td></tr><tr><td>str(dict)</td><td>输出字典，可以打印的字符串表示。</td></tr><tr><td>type(variable)</td><td>返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr></tbody></table><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html">dict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html">dict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html">dict.fromkeys()</a> 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html">dict.get(key, default&#x3D;None)</a> 返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html">key in dict</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html">dict.items()</a> 以列表返回一个视图对象</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html">dict.keys()</a> 返回一个视图对象</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html">dict.setdefault(key, default&#x3D;None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html">dict.update(dict2)</a> 把字典dict2的键&#x2F;值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html">dict.values()</a> 返回一个视图对象</td></tr><tr><td align="left">11</td><td align="left">[pop(key<a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html">,default])</a> 删除字典 key（键）所对应的值，返回被删除的值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html">popitem()</a> 返回并删除字典中的最后一对键和值。</td></tr></tbody></table></li><li><p>注意事项</p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 **{ }**。</li></ul></li></ul><h2 id="python数据转换"><a href="#python数据转换" class="headerlink" title="python数据转换"></a>python数据转换</h2><table><thead><tr><th>[int(x <a href="https://www.runoob.com/python3/python-func-int.html">,base])</a></th><th>将x转换为一个整数</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td>将x转换到一个浮点数</td></tr><tr><td>[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html">,imag])</a></td><td>创建一个复数</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td>将对象 x 转换为字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td>将对象 x 转换为表达式字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td>将序列 s 转换为一个元组</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td>将序列 s 转换为一个列表</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td>转换为可变集合</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td>创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td>转换为不可变集合</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td>将一个整数转换为一个字符</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td>将一个字符转换为它的整数值</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>;</span><br><span class="line">strs = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">c = <span class="number">1.5</span>;</span><br><span class="line"><span class="comment"># 转换成整数</span></span><br><span class="line">res = <span class="built_in">int</span>(strs,base=<span class="number">10</span>); <span class="comment">#base默认为十进制</span></span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 转换成浮点数</span></span><br><span class="line">res = <span class="built_in">float</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 返回对象的string格式</span></span><br><span class="line">res = <span class="built_in">str</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将对象转换成表达式字符串</span></span><br><span class="line">res = <span class="built_in">repr</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 计算在字符串中的有效Python表达式,并返回一个对象</span></span><br><span class="line">res = <span class="built_in">eval</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将序列strs转换成元组</span></span><br><span class="line">res = <span class="built_in">tuple</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将序列strs转换为一个列表</span></span><br><span class="line">res = <span class="built_in">list</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 转换为可变集合</span></span><br><span class="line">res = <span class="built_in">set</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 转为不可变集合</span></span><br><span class="line">res = <span class="built_in">frozenset</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 创建一个字典。d 必须是一个 (key, value)元组序列。</span></span><br><span class="line">res = <span class="built_in">dict</span>(a = <span class="number">1</span>);<span class="comment"># 键a,值1</span></span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将一个整数转换为一个字符</span></span><br><span class="line">res = <span class="built_in">chr</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将一个字符转换为它的整数值</span></span><br><span class="line">res = <span class="built_in">ord</span>(strs);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将一个整数转换为一个十六进制字符串</span></span><br><span class="line">res = <span class="built_in">hex</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br><span class="line"><span class="comment"># 将一个整数转换为一个八进制字符串</span></span><br><span class="line">res = <span class="built_in">oct</span>(x);</span><br><span class="line"><span class="built_in">print</span>(res);</span><br></pre></td></tr></table></figure><h1 id="python推导式"><a href="#python推导式" class="headerlink" title="python推导式"></a>python推导式</h1><p>Python 支持各种数据结构的推导式：</p><ul><li>列表(list)推导式</li><li>字典(dict)推导式</li><li>集合(set)推导式</li><li>元组(tuple)推导式</li></ul><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表] </span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list]</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">[表达式 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表 <span class="keyword">if</span> 条件]</span><br><span class="line">[out_exp_res <span class="keyword">for</span> out_exp <span class="keyword">in</span> input_list <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转大写字母</span></span><br><span class="line">s = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">strUP = [sUP.upper() <span class="keyword">for</span> sUP <span class="keyword">in</span> s <span class="keyword">if</span> <span class="built_in">len</span>(sUP) &gt; <span class="number">3</span>];</span><br><span class="line"><span class="built_in">print</span>(strUP);</span><br><span class="line"><span class="comment"># 大于1的元素减一</span></span><br><span class="line">number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">numberChange = [(n -<span class="number">1</span>) <span class="keyword">for</span> n <span class="keyword">in</span> number <span class="keyword">if</span> n &gt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">print</span>(numberChange);</span><br></pre></td></tr></table></figure><h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">&#123; key_expr: value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="comment"># 将列表的字符串转为key</span></span><br><span class="line">keyLen = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> s <span class="keyword">if</span> <span class="built_in">len</span>(key) &gt; <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(keyLen);</span><br></pre></td></tr></table></figure><h2 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> &#125;</span><br><span class="line">或</span><br><span class="line">&#123; expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional &#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setNew = &#123;i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="keyword">if</span> i &gt; <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(setNew);</span><br></pre></td></tr></table></figure><h2 id="元组推导式（生成器表达式）"><a href="#元组推导式（生成器表达式）" class="headerlink" title="元组推导式（生成器表达式）"></a>元组推导式（生成器表达式）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> )</span><br><span class="line">或</span><br><span class="line">(expression <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">Sequence</span> <span class="keyword">if</span> conditional )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line"><span class="built_in">print</span>(t); <span class="comment"># 返回&lt;generator object &lt;genexpr&gt; at 0x0000025E1E1CF2A0&gt;对象生成器</span></span><br><span class="line"><span class="comment"># 将生成器转为元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(t));</span><br></pre></td></tr></table></figure><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x &#x3D;&#x3D; y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td><td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td><td align="left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td><td align="left">返回数字x的平方根。</td></tr></tbody></table><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td><td align="left">将弧度转换为角度,如degrees(math.pi&#x2F;2) ， 返回90.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td><td align="left">将角度转换为弧度</td></tr></tbody></table><h2 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h2><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><h1 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure><h2 id="match…case"><a href="#match…case" class="headerlink" title="match…case"></a>match…case</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><h2 id="while…else"><a href="#while…else" class="headerlink" title="while…else"></a>while…else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><h2 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h2><ul><li>遍历数字序列</li></ul><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p>Python pass是空语句，是为了保持程序结构的完整性。</p><h1 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ul><li>迭代器是一个可以记住遍历的位置的对象。</li><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。</li><li>迭代器只能往前不会后退。</li><li>迭代器有两个基本的方法：<strong>iter()</strong> 和 **next()**。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line">t = <span class="built_in">iter</span>(lists);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(t));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(t));</span><br></pre></td></tr></table></figure><ul><li><p>创建迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Numbers</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">    self.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">    x = self.a;</span><br><span class="line">    self.a += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line"> </span><br><span class="line">myclass = Numbers();</span><br><span class="line">myiter = <span class="built_in">iter</span>(myclass);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myiter));</span><br></pre></td></tr></table></figure></li><li><p>StopIteration</p><ul><li>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况</li></ul></li></ul><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode写Python</title>
      <link href="/post/d658937b.html"/>
      <url>/post/d658937b.html</url>
      
        <content type="html"><![CDATA[<h1 id="python下载和安装"><a href="#python下载和安装" class="headerlink" title="python下载和安装"></a>python下载和安装</h1><div class="btns rounded grid5">            <a class="button" href='https://github.com/bigFunny/resource/blob/main/python-3.11.0-amd64.exe' title='下载文件'><i class='fas fa-download'></i>下载文件</a>          </div><p>(安装图片为网上找的图，步骤一样)</p><img src="/post/d658937b/p1.jpg" class=""><img src="/post/d658937b/p2.jpg" class=""><img src="/post/d658937b/p3.jpg" class=""><p>测试：</p><p>win+r 输入cmd 打开控制台，输入python -V</p><p>如果输出版本号则安装成功</p><h1 id="在vscode中使用"><a href="#在vscode中使用" class="headerlink" title="在vscode中使用"></a>在vscode中使用</h1><ol><li>下载python插件</li></ol><img src="/post/d658937b/p4.png" class=""><ol start="2"><li>ctrl + shift + p</li></ol><img src="/post/d658937b/p5.png" class=""><img src="/post/d658937b/p6.png" class=""><img src="/post/d658937b/p7.png" class="">]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode编写c语言</title>
      <link href="/post/d53f90b.html"/>
      <url>/post/d53f90b.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode下载"><a href="#vscode下载" class="headerlink" title="vscode下载"></a>vscode下载</h1><div class="btns rounded grid5">            <a class="button" href='https://pan.baidu.com/s/1jN6SpCHawbqj7Y8R0k9gYw' title='下载vscode'><i class='fas fa-download'></i>下载vscode</a>          </div><p>验证码：A123</p><h1 id="编译器下载"><a href="#编译器下载" class="headerlink" title="编译器下载"></a>编译器下载</h1><div class="btns rounded grid5">            <a class="button" href='https://github.com/bigFunny/resource/blob/main/mingw-get-setup.exe' title='下载编译器'><i class='fas fa-download'></i>下载编译器</a>          </div><h2 id="编译器安装"><a href="#编译器安装" class="headerlink" title="编译器安装"></a>编译器安装</h2><img src="/post/d53f90b/p1.png" class=""><img src="/post/d53f90b/p2.png" class=""><img src="/post/d53f90b/p3.png" class=""><img src="/post/d53f90b/p4.png" class=""><img src="/post/d53f90b/p5.png" class=""><img src="/post/d53f90b/p6.png" class=""><p>点击Apply</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><img src="/post/d53f90b/p7.png" class=""><img src="/post/d53f90b/p8.png" class=""><p>点击编辑</p><img src="/post/d53f90b/p9.png" class=""><p>点击新建，目录为bin目录</p><img src="/post/d53f90b/p10.png" class=""><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>window + R </p><p>输入cmd打开黑框框,输入gcc -v</p><img src="/post/d53f90b/p11.png" class=""><h1 id="vscode中配置"><a href="#vscode中配置" class="headerlink" title="vscode中配置"></a>vscode中配置</h1><p>安装C&#x2F;C++和code runner两个插件</p><img src="/post/d53f90b/p12.png" class=""><img src="/post/d53f90b/p13.png" class=""><p>随便打开一个文件夹，创建一个.c文件</p><img src="/post/d53f90b/p14.png" class=""><p>编写c程序，按F5编译观察是否出问题，左侧是否生成.exe文件</p><p>如果没有，继续下述。</p><h1 id="出错？"><a href="#出错？" class="headerlink" title="出错？"></a>出错？</h1><h2 id="配置json文件"><a href="#配置json文件" class="headerlink" title="配置json文件"></a>配置json文件</h2><img src="/post/d53f90b/p16.png" class=""> <ul><li>搜launch.json，修改成</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\MinGW\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">//你的编译程序名</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入程序名称，例如 $&#123;workspaceFolder&#125;/a.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">//是否弹出黑框框</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> ture<span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/path/to/gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>搜tasks.json,修改</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-g&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span><span class="string">&quot;-o&quot;</span><span class="punctuation">,</span><span class="string">&quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译命令参数</span></span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>按F5编译，左侧出现.exe文件，右键选择run code，完美运行</p><h2 id="想出黑框框运行？黑框框闪烁？"><a href="#想出黑框框运行？黑框框闪烁？" class="headerlink" title="想出黑框框运行？黑框框闪烁？"></a>想出黑框框运行？黑框框闪烁？</h2><p>配置launch.json</p><p>把”externalConsole”设置成ture (有两个)（上述json文件已经设置）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">60</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">120</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!%d,%d,%d&quot;</span>,a,b,c);</span><br><span class="line">    <span class="comment">//在return前加上system(&quot;pause&quot;);</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>按F5编译并运行，不要用run code运行，只能用F5运行。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程编程</title>
      <link href="/post/46bf65ac.html"/>
      <url>/post/46bf65ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="java多线程编程介绍"><a href="#java多线程编程介绍" class="headerlink" title="java多线程编程介绍"></a>java多线程编程介绍</h1><ul><li><p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p></li><li><p>多线程理解</p><div class="note blue flat"><p>在windows中，每一个打开运行的应用程序或后台程序，比如运行中的QQ、谷歌浏览器、网易云音乐、资源管理器等都是一个进程。我们感觉这些程序是“同时”运行的，但实际上，一个处理器同一时刻只能运行一个进程，只是CPU在高速轮换执行让我们有这样的错觉，我们感受不到中断的原因是CPU执行速度相对于我们的感觉实在是太快了。</p></div></li><li><p><strong>并发：</strong></p><div class="note blue flat"><p>指同一时刻只能有一条指令（或一个进程、一个线程）运行，但由于CPU的轮换执行速度超乎想象，在宏观上看，就有多条指令同时执行的效果。(并不是同时运行)</p></div></li><li><p><strong>并行：</strong></p><div class="note blue flat"><p>指同一时刻有多条指令在多个处理机上同时执行。(就是同时运行)</p></div></li></ul><h1 id="进程和线程的概念和区别"><a href="#进程和线程的概念和区别" class="headerlink" title="进程和线程的概念和区别"></a>进程和线程的概念和区别</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><div class="note blue flat"><p>在计算机中，我们把一个任务称为一个进程，浏览器就是一个进程，是<strong>系统进行资源调度和分配的的基本单位，实现了操作系统的并发</strong>；</p></div><h3 id="进程的三种状态："><a href="#进程的三种状态：" class="headerlink" title="进程的三种状态："></a>进程的三种状态：</h3><ul><li><p>就绪态</p><div class="note blue flat"><p>就绪状态是指程序已达到可以运行的状态，只等CPU分配资源就可以运行的状态。</p></div></li><li><p>阻塞态</p><div class="note blue flat"><p>当程序运行条件没有满足时，需要等待条件满足时候才能执行时所处的状态，如等待i&#x2F;o操作时候，此刻的状态就叫阻塞态。</p></div></li><li><p>运行态</p><div class="note blue flat"><p>进程占用CPU，并在CPU上运行。即程序正在运行时所处的状态。</p></div></li></ul><h3 id="线程（Thread）"><a href="#线程（Thread）" class="headerlink" title="线程（Thread）:"></a>线程（Thread）:</h3><div class="note blue flat"><ul><li>线程是进程的子任务，<strong>是CPU调度和分派的基本单位</strong>，<strong>用于保证程序的实时性，实现进程内部的并发；</strong></li><li><strong>线程是操作系统可识别的最小执行和调度单位</strong>。</li><li>每个线程都独自占用一个<strong>虚拟处理器</strong>：独自的<strong>寄存器组</strong>，<strong>指令计数器和处理器状态</strong>。</li><li>每个线程完成不同的任务，但是<strong>共享同一地址空间</strong>（也就是同样的<strong>动态内存，映射文件，目标代码等等</strong>），<strong>打开的文件队列和其他内核资源</strong>。</li></ul></div><h2 id="线程与进程区别"><a href="#线程与进程区别" class="headerlink" title="线程与进程区别"></a>线程与进程区别</h2><ol><li><p><strong>一个线程只能属于一个进程，而一个进程可以有多个线程</strong>，但至少有一个线程。线程依赖于进程而存在。</p></li><li><p><strong>进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存</strong>。</p></li></ol><div class="note blue flat"><p>资源分配给进程，同一进程的所有线程共享该进程的所有资源。同一进程中的多个线程共享代码段（代码和常量），数据段（全局变量和静态变量），扩展段（堆存储）。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。</p></div><ol start="3"><li><p><strong>进程是资源分配的最小单位，线程是CPU调度的最小单位</strong>；</p></li><li><p><strong>进程切换的开销也远大于线程切换的开销</strong>。</p></li></ol><div class="note blue flat"><p>系统开销： 由于在创建或撤消进程时，系统都要为之分配或回收资源，如内存空间、I／o设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。类似地，在进行进程切换时，涉及到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置。而线程切换只须保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作。</p></div><ol start="5"><li><strong>进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性</strong>。</li></ol><div class="note blue flat"><p>通信：由于同一进程中的多个线程具有相同的地址空间，致使它们之间的同步和通信的实现，也变得比较容易</p></div><ol start="6"><li><p><strong>进程编程调试简单可靠性高，但是创建销毁开销大；线程正相反，开销小，切换速度快，但是编程调试相对复杂</strong>。</p></li><li><p><strong>进程间不会相互影响 ；线程一个线程挂掉将导致整个进程挂掉</strong></p></li><li><p><strong>进程适应于多核、多机分布；线程适用于多核</strong></p></li></ol><h1 id="多任务的实现方式"><a href="#多任务的实现方式" class="headerlink" title="多任务的实现方式"></a>多任务的实现方式</h1><ul><li>多进程模式（每个进程只有一个线程）</li><li>多线程模式（一个进程多个线程）</li><li>多进程 + 多线程模式（多个进程，并且每个进程还有多个线程）</li></ul><h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><ul><li>当java程序启动时，jvm进程会启动，同时jvm启动主线程main()</li><li>主线程main()方法又可以启动其他线程</li><li>创建其他线程可以通过实现Runnable和继承Thread接口实现</li></ul><h2 id="实现Runnable接口创建"><a href="#实现Runnable接口创建" class="headerlink" title="实现Runnable接口创建"></a>实现Runnable接口创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//Thread(Runnable threadOb,String threadName);</span></span><br><span class="line">        <span class="comment">//threadOb   传入实现该接口的参数</span></span><br><span class="line">        <span class="comment">//threadName 设置线程名字</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">        <span class="comment">//开启子线程,调用子线程中的run方法</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h2><ul><li><p><strong>Thread</strong>类的方法</p><br></li></ul><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td></tr><tr><td align="left">3</td><td align="left"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td></tr><tr><td align="left">4</td><td align="left"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td></tr><tr><td align="left">5</td><td align="left"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td></tr><tr><td align="left">6</td><td align="left"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td></tr><tr><td align="left">7</td><td align="left"><strong>public void interrupt()</strong> 中断线程。</td></tr><tr><td align="left">8</td><td align="left"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td></tr></tbody></table><ul><li>静态方法</li></ul><table><thead><tr><th align="left"><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td></tr><tr><td align="left">2</td><td><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td></tr><tr><td align="left">3</td><td><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td></tr><tr><td align="left">4</td><td><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td></tr><tr><td align="left">5</td><td><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td></tr></tbody></table><p>练习使用:</p><p>MyThread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(currentThread.getName() + <span class="string">&quot;是否存活？&quot;</span> + currentThread.isAlive());</span><br><span class="line">            System.out.println(currentThread.getName() + <span class="string">&quot;:hello world!&quot;</span></span><br><span class="line">                    + (++i) + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否中断线程:&quot;</span> + currentThread.getName() + <span class="string">&quot;?y/n&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanner.nextLine().equals(<span class="string">&quot;y&quot;</span>))&#123;</span><br><span class="line">                currentThread.interrupt();</span><br><span class="line">                System.out.println(currentThread.getName() + <span class="string">&quot;已中断&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        thread.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        thread2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">2</span>是否存活？<span class="literal">true</span></span><br><span class="line">线程<span class="number">1</span>是否存活？<span class="literal">true</span></span><br><span class="line">线程<span class="number">2</span>:hello world!<span class="number">1</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">1</span>次</span><br><span class="line">是否中断线程:线程<span class="number">1</span>?y/n</span><br><span class="line">是否中断线程:线程<span class="number">2</span>?y/n</span><br><span class="line">n</span><br><span class="line">n</span><br><span class="line">线程<span class="number">2</span>是否存活？<span class="literal">true</span></span><br><span class="line">线程<span class="number">2</span>:hello world!<span class="number">2</span>次</span><br><span class="line">线程<span class="number">1</span>是否存活？<span class="literal">true</span></span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">2</span>次</span><br><span class="line">是否中断线程:线程<span class="number">1</span>?y/n</span><br><span class="line">是否中断线程:线程<span class="number">2</span>?y/n</span><br><span class="line">n</span><br><span class="line">y</span><br><span class="line">线程<span class="number">1</span>是否存活？<span class="literal">true</span></span><br><span class="line">线程<span class="number">2</span>已中断</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">3</span>次</span><br><span class="line">是否中断线程:线程<span class="number">1</span>?y/n</span><br><span class="line">y</span><br><span class="line">线程<span class="number">1</span>已中断</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="继承Thread类创建"><a href="#继承Thread类创建" class="headerlink" title="继承Thread类创建"></a>继承Thread类创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.setName(<span class="string">&quot;子线程&quot;</span>);</span><br><span class="line">        System.out.println(myThread.getName() + <span class="string">&quot;在叫&quot;</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子线程在叫</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><p>其实继承Thread实现多线程的本质还是Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看Thread源码可见,它也是实现了Runnable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h1><h1 id="线程的状态（生命周期）"><a href="#线程的状态（生命周期）" class="headerlink" title="线程的状态（生命周期）"></a>线程的状态（生命周期）</h1><img src="/post/46bf65ac/p1.png" class=""><ul><li><strong>NEW</strong> - 初始状态，一个新创建的线程，还没开始执行。</li><li><strong>RUNNABLE</strong> - 可执行的状态，要么是在执行，要么是一切就绪等待执行，例如等待分配CPU时间。</li><li><strong>WAITING</strong> - 等待状态，等待其他的线程去执行特定的动作，没有时间限制。</li><li><strong>TIMED_WAITING</strong> - 限时等待状态，等待其他的线程去执行特定的动作，这个是在一个指定的时间范围内。</li><li><strong>BLOCKED</strong> - 阻塞状态，等待锁，以便进入同步块儿。</li><li><strong>TERMINATED</strong> - 终止状态，线程执行结束。</li></ul><h2 id="New"><a href="#New" class="headerlink" title="New"></a>New</h2><ul><li>new状态是被创建还没被执行的一种状态</li><li>这个状态直到调用了start()方法后变化</li><li>代码显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br></pre></td></tr></table></figure><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><ul><li><p>start()方法后进入的状态</p></li><li><p>处于 <em>RUNNABLE</em> 状态的线程可能正在运行，也可能在等待系统为其分配资源。</p><div class="note green no-icon simple"><p>JVM 中的 Thread-Scheduler（线程调度器）会为每个线程分配一个固定的执行时间，所以一个线程一次就只执行一段时间，时间到了之后，就会让其他的 <em>RUNNABLE</em> 状态的线程执行。</p></div></li><li><p>代码显示</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h2 id="WAITING"><a href="#WAITING" class="headerlink" title="WAITING"></a>WAITING</h2><ul><li>一个线程在等待其他线程执行特定动作的时候就处于 <em>WAITING</em> 状态。</li><li>实现方法<ol><li><em>object.wait()</em></li><li><em>thread.join()</em></li><li><em>LockSupport.park()</em></li></ol></li><li></li></ul><h2 id="TIMED-WAITING"><a href="#TIMED-WAITING" class="headerlink" title="TIMED WAITING"></a>TIMED WAITING</h2><ul><li><p>一个线程在等待其他线程执行特定动作的时候就处于 <em>WAITING</em> 状态。</p></li><li><p>不同是 <em>WAITING</em> 没有时间限制</p></li><li><p>实现方法</p><ol><li><em>thread.sleep(long millis)</em></li><li><em>wait(int timeout)</em> or <em>wait(int timeout, int nanos)</em></li><li><em>thread.join(long</em> millis*)*</li><li><em>LockSupport.parkNanos</em></li><li><em>LockSupport.parkUntil</em></li></ol></li><li><p>例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(thread.getName() + <span class="string">&quot;:hello world!&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="comment">//等待1000ms</span></span><br><span class="line">                    thread.join(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        currentThread.setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(currentThread.getName() + <span class="string">&quot;:hello world!&quot;</span> + i + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">主线程:hello world!<span class="number">1</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">1</span>次</span><br><span class="line">主线程:hello world!<span class="number">2</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">2</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">3</span>次</span><br><span class="line">主线程:hello world!<span class="number">3</span>次</span><br><span class="line">主线程:hello world!<span class="number">4</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">4</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">5</span>次</span><br><span class="line">主线程:hello world!<span class="number">5</span>次</span><br><span class="line">主线程:hello world!<span class="number">6</span>次</span><br><span class="line">主线程:hello world!<span class="number">7</span>次</span><br><span class="line">主线程:hello world!<span class="number">8</span>次</span><br><span class="line">主线程:hello world!<span class="number">9</span>次</span><br><span class="line">主线程:hello world!<span class="number">10</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">6</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">7</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">8</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">9</span>次</span><br><span class="line">线程<span class="number">1</span>:hello world!<span class="number">10</span>次</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/post/f6491cfb.html"/>
      <url>/post/f6491cfb.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程介绍"><a href="#网络编程介绍" class="headerlink" title="网络编程介绍"></a>网络编程介绍</h1><ul><li>网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。</li></ul><h2 id="两种常见的网络协议"><a href="#两种常见的网络协议" class="headerlink" title="两种常见的网络协议"></a>两种常见的网络协议</h2><ul><li><p>TCP（传输控制协议）:</p><div class="note blue flat"><p>是一种面向连接的、可靠的、基于字节流的传输层通信协议，TCP 层是位于 IP 层之上，应用层之下的中间层。TCP 保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP &#x2F; IP。</p></div></li><li><p>UDP（用户数据报协议）：</p><div class="note blue flat"><p>位于 OSI 模型的传输层。一个无连接的协议。提供了应用程序之间要发送数据的数据报。由于UDP缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误或重复的数据包。</p></div></li></ul><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>套接字使用TCP提供了两台计算机之间的通信机制。 </p></li><li><p>客户端程序创建一个套接字，并尝试连接服务器的套接字。</p></li><li><p>当连接建立时，服务器会创建一个 Socket 对象。</p></li><li><p>客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p></li><li><p>java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p></li><li><p>以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：</p><p>​1) 服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</p><p>​2) 服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</p><p>​3) 服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</p><p>​4) Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</p><p>​5) 在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</p></li><li><p>连接建立后，通过使用 I&#x2F;O 流在进行通信，每一个socket都有一个输出流和一个输入流，客户端的输出流连接到服务器端的输入流，而客户端的输入流连接到服务器端的输出流。</p></li><li><p>TCP 是一个双向的通信协议，因此数据可以通过两个数据流在同一时间发送。</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="serverSocket类"><a href="#serverSocket类" class="headerlink" title="serverSocket类"></a>serverSocket类</h3><ul><li>服务器应用程序通过使用 java.net.ServerSocket 类以获取一个端口,并且侦听客户端请求。</li></ul><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public ServerSocket(int port) throws IOException</strong> 创建绑定到特定端口的服务器套接字。</td></tr><tr><td>2</td><td><strong>public ServerSocket(int port, int backlog) throws IOException</strong> 利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号。</td></tr><tr><td>3</td><td><strong>public ServerSocket(int port, int backlog, InetAddress address) throws IOException</strong> 使用指定的端口、侦听 backlog 和要绑定到的本地 IP 地址创建服务器。</td></tr><tr><td>4</td><td><strong>public ServerSocket() throws IOException</strong> 创建非绑定服务器套接字。</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public int getLocalPort()</strong>   返回此套接字在其上侦听的端口。</td></tr><tr><td>2</td><td><strong>public Socket accept() throws IOException</strong> 侦听并接受到此套接字的连接。</td></tr><tr><td>3</td><td><strong>public void setSoTimeout(int timeout)</strong>  通过指定超时值启用&#x2F;禁用 SO_TIMEOUT，以毫秒为单位。</td></tr><tr><td>4</td><td><strong>public void bind(SocketAddress host, int backlog)</strong> 将 ServerSocket 绑定到特定地址（IP 地址和端口号）。</td></tr></tbody></table><h3 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h3><ul><li>java.net.Socket 类代表客户端和服务器都用来互相沟通的套接字。客户端要获取一个 Socket 对象通过实例化 ，而 服务器获得一个 Socket 对象则通过 accept() 方法的返回值。</li></ul><h4 id="对象创建-1"><a href="#对象创建-1" class="headerlink" title="对象创建"></a>对象创建</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public Socket(String host, int port) throws UnknownHostException, IOException.</strong> 创建一个流套接字并将其连接到指定主机上的指定端口号。</td></tr><tr><td>2</td><td><strong>public Socket(InetAddress host, int port) throws IOException</strong> 创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</td></tr><tr><td>3</td><td><strong>public Socket(String host, int port, InetAddress localAddress, int localPort) throws IOException.</strong> 创建一个套接字并将其连接到指定远程主机上的指定远程端口。</td></tr><tr><td>4</td><td><strong>public Socket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException.</strong> 创建一个套接字并将其连接到指定远程地址上的指定远程端口。</td></tr><tr><td>5</td><td><strong>public Socket()</strong> 通过系统默认类型的 SocketImpl 创建未连接套接字</td></tr></tbody></table><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public void connect(SocketAddress host, int timeout) throws IOException</strong> 将此套接字连接到服务器，并指定一个超时值。</td></tr><tr><td>2</td><td><strong>public InetAddress getInetAddress()</strong>  返回套接字连接的地址。</td></tr><tr><td>3</td><td><strong>public int getPort()</strong> 返回此套接字连接到的远程端口。</td></tr><tr><td>4</td><td><strong>public int getLocalPort()</strong> 返回此套接字绑定到的本地端口。</td></tr><tr><td>5</td><td><strong>public SocketAddress getRemoteSocketAddress()</strong> 返回此套接字连接的端点的地址，如果未连接则返回 null。</td></tr><tr><td>6</td><td><strong>public InputStream getInputStream() throws IOException</strong> 返回此套接字的输入流。</td></tr><tr><td>7</td><td><strong>public OutputStream getOutputStream() throws IOException</strong> 返回此套接字的输出流。</td></tr><tr><td>8</td><td><strong>public void close() throws IOException</strong> 关闭此套接字。</td></tr></tbody></table><h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><ul><li>这个类表示互联网协议(IP)地址。</li></ul><h4 id="对象创建-2"><a href="#对象创建-2" class="headerlink" title="对象创建"></a>对象创建</h4><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>static InetAddress getByAddress(byte[] addr)</strong> 在给定原始 IP 地址的情况下，返回 InetAddress 对象。</td></tr><tr><td>2</td><td><strong>static InetAddress getByAddress(String host, byte[] addr)</strong> 根据提供的主机名和 IP 地址创建 InetAddress。</td></tr><tr><td>3</td><td><strong>static InetAddress getByName(String host)</strong> 在给定主机名的情况下确定主机的 IP 地址。</td></tr><tr><td>4</td><td><strong>String getHostAddress()</strong>  返回 IP 地址字符串（以文本表现形式）。</td></tr><tr><td>5</td><td><strong>String getHostName()</strong>   获取此 IP 地址的主机名。</td></tr><tr><td>6</td><td><strong>static InetAddress getLocalHost()</strong> 返回本地主机。</td></tr><tr><td>7</td><td><strong>String toString()</strong> 将此 IP 地址转换为 String。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化</title>
      <link href="/post/693bdb7c.html"/>
      <url>/post/693bdb7c.html</url>
      
        <content type="html"><![CDATA[<h1 id="序列化简述"><a href="#序列化简述" class="headerlink" title="序列化简述"></a>序列化简述</h1><ul><li><p>序列化：</p><div class="note pink flat"><p>一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。</p></div></li><li><p>反序列化：</p><div class="note pink flat"><p>将序列化对象的字节序列反向读取，创建成对象</p></div></li><li><p>可以在一个平台序列化，在另一个平台反序列化该对象，两个过程是独立的</p></li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="序列化需要的两个条件"><a href="#序列化需要的两个条件" class="headerlink" title="序列化需要的两个条件"></a>序列化需要的两个条件</h2><ol><li><p>该类必须实现 java.io.Serializable 接口</p></li><li><p>该类的所有属性必须是可序列化的，否则必须注明是短暂的。</p></li></ol><div class="note pink flat"><p>检验一个类的实例是否能序列化十分简单， 只需要查看该类有没有实现 java.io.Serializable接口。</p></div><h2 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h2><h3 id="创建序列化对象"><a href="#创建序列化对象" class="headerlink" title="创建序列化对象"></a>创建序列化对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonSerialize</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//表明不需要序列化的变量,该变量在序列化后无法被访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> money;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将对象序列化并输出ser文件"><a href="#将对象序列化并输出ser文件" class="headerlink" title="将对象序列化并输出ser文件"></a>将对象序列化并输出ser文件</h3><ul><li>利用ObjectOutputStream(fileOutputStream)实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonSerialize</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonSerialize</span>();</span><br><span class="line">        person.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        person.age = <span class="number">18</span>;</span><br><span class="line">        person.money = <span class="number">10086</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test\\test01\\src\\serialize&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建输出流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path + <span class="string">&quot;/person.ser&quot;</span>);</span><br><span class="line">            <span class="comment">//序列化操作对象</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            <span class="comment">//将对象序列化的字符输入到.ser文件</span></span><br><span class="line">            out.writeObject(person);</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">//关闭输出流</span></span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;person对象系列化成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;io报错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会有一个.ser文件生成。</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><ul><li>利用ObjectInputStream(fileInputStream)读取，实现反序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonSerialize</span> <span class="variable">person</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\test\\test01\\src\\serialize&quot;</span>;</span><br><span class="line">            <span class="comment">//创建输入流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path + <span class="string">&quot;/person.ser&quot;</span>);</span><br><span class="line">            <span class="comment">//读取序列化对象</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            <span class="comment">//将序列化的字节流转化成对象</span></span><br><span class="line">            person = (PersonSerialize) in.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;反序列化失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类型转化错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========测试属性========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + person.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + person.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;薪资：&quot;</span> + person.money);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========测试方法========&quot;</span>);</span><br><span class="line">        person.said();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==========测试属性========</span><br><span class="line">姓名：小明</span><br><span class="line">年龄：<span class="number">18</span></span><br><span class="line">薪资：<span class="number">0</span></span><br><span class="line">==========测试方法========</span><br><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>薪资因为并没有被发送到输出流，所以反序列化后为0</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/post/8601bab2.html"/>
      <url>/post/8601bab2.html</url>
      
        <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><ul><li>流可以理解为一个数据的序列。</li><li>输入流表示从一个源读取数据，输出流表示向一个目标写数据。</li></ul><h1 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h1><ul><li><p>Java 的控制台输入由 System.in 完成。</p></li><li><p>把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>read()读取一个字符，readLine(）读取一个字符串</p><ul><li><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>read()方法读取一个字符</p></div></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;输入&#x27;e&#x27;退出&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (c != <span class="string">&#x27;e&#x27;</span>)&#123;</span><br><span class="line">            c = (<span class="type">char</span>) bufferedReader.read();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="string">&#x27;e&#x27;</span>退出</span><br><span class="line">你好</span><br><span class="line">你</span><br><span class="line">好</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>readLine()读取一行字符</p></div></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;输入&#x27;exit&#x27;退出&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!c.equals(<span class="string">&quot;exit&quot;</span>))&#123;</span><br><span class="line">            c = bufferedReader.readLine();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="string">&#x27;exit&#x27;</span>退出</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">你好</span><br><span class="line">你好</span><br><span class="line">exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h1><ul><li><p>控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p></li><li><p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p></li><li><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>void write(int byteval) 该方法将 byteval 的低八位字节写到流中。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="comment">//读取一个字符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> bufferedReader.read();</span><br><span class="line">        <span class="comment">//输出一个字符</span></span><br><span class="line">        System.out.write(read);</span><br><span class="line">        System.out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">A</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="IO流层次图"><a href="#IO流层次图" class="headerlink" title="IO流层次图"></a>IO流层次图</h1><img src="/post/8601bab2/p1.png" class=""><h1 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h1><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ul><li>字符输入流</li><li>该类按字符读取流中数据。</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li><p>在给定从中读取数据的 File 的情况下创建一个新 FileReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader(File file)</span><br></pre></td></tr></table></figure></li><li><p>在给定从中读取数据的 FileDescriptor 的情况下创建一个新 FileReader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader(FileDescriptor fd) </span><br></pre></td></tr></table></figure></li><li><p>在给定从中读取数据的文件名的情况下创建一个新 FileReader。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader(String fileName) </span><br></pre></td></tr></table></figure></li></ul><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><table><thead><tr><th align="left">序号</th><th align="left">文件描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public int read() throws IOException</strong> 读取单个字符，返回一个int型变量代表读取到的字符</td></tr><tr><td align="left">2</td><td align="left"><strong>public int read(char [] c, int offset, int len)</strong> 读取字符到c数组，返回读取到字符的个数</td></tr></tbody></table><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">    <span class="comment">//创建字符输出流</span></span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">    <span class="comment">//把hello world!输出到文件</span></span><br><span class="line">    fileWriter.write(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="comment">//close()关闭，释放资源</span></span><br><span class="line">    fileWriter.close();</span><br><span class="line">    <span class="comment">//创建字符输入流</span></span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="comment">//输入并打印到控制台,直到输入到!号</span></span><br><span class="line">    <span class="keyword">while</span> (c  != <span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//读取一个字符</span></span><br><span class="line">        c = (<span class="type">char</span>) fileReader.read();</span><br><span class="line">        System.out.print(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//close()关闭，释放资源</span></span><br><span class="line">    fileReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//文件</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//控制台</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h2 id="FilelnputStream类"><a href="#FilelnputStream类" class="headerlink" title="FilelnputStream类"></a>FilelnputStream类</h2><ul><li>字节流文件输入流，可以从文件读取数据</li></ul><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol><li>利用字符串地址直接创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(dir);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>用文件对象创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FilelnputStream常用方法"><a href="#FilelnputStream常用方法" class="headerlink" title="FilelnputStream常用方法"></a>FilelnputStream常用方法</h3><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void close() throws IOException{}</strong> 关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</td></tr><tr><td align="left">2</td><td align="left"><strong>protected void finalize()throws IOException {}</strong> 这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</td></tr><tr><td align="left">3</td><td align="left"><strong>public int read(int r)throws IOException{}</strong> 这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。</td></tr><tr><td align="left">4</td><td align="left"><strong>public int read(byte[] r) throws IOException{}</strong> 这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。</td></tr><tr><td align="left">5</td><td align="left"><strong>public int available() throws IOException{}</strong> 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//hello文件内容</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="comment">//读取一个字符</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fileInputStream.read();</span><br><span class="line">    System.out.write(read);</span><br><span class="line">    System.out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="comment">//返回字节数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fileInputStream.available();</span><br><span class="line">    <span class="comment">//读取一个数组长度的字符</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">    <span class="type">int</span> <span class="variable">reads</span> <span class="operator">=</span> fileInputStream.read(bytes);</span><br><span class="line">    System.out.write(bytes);</span><br><span class="line">    System.out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    fileInputStream.close();<span class="comment">//关闭，释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">ello world!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="其他输入流"><a href="#其他输入流" class="headerlink" title="其他输入流"></a>其他输入流</h2><ul><li>ByteArrayInputStream</li><li>DataInputStream</li></ul><h1 id="输出文件"><a href="#输出文件" class="headerlink" title="输出文件"></a>输出文件</h1><h2 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h2><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><ul><li>在给出 File 对象的情况下构造一个 FileWriter 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(File file)</span><br></pre></td></tr></table></figure><ul><li>在给出 File 对象的情况下构造一个 FileWriter 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 append 参数为 true，则将字节写入文件末尾处，相当于追加信息。</span></span><br><span class="line"><span class="comment">//如果 append 参数为 false, 则写入文件开始处。</span></span><br><span class="line">FileWriter(File file, <span class="type">boolean</span> append)</span><br></pre></td></tr></table></figure><ul><li>构造与某个文件描述符相关联的 FileWriter 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(FileDescriptor fd)</span><br></pre></td></tr></table></figure><ul><li>在给出文件名的情况下构造 FileWriter 对象，它具有指示是否挂起写入数据的 boolean 值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileWriter(String fileName, <span class="type">boolean</span> append)</span><br></pre></td></tr></table></figure><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><ul><li><table><thead><tr><th align="left">序号</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void write(int c) throws IOException</strong> 写入单个字符c。</td></tr><tr><td align="left">2</td><td align="left"><strong>public void write(char [] c, int offset, int len)</strong> 写入字符数组中开始为offset长度为len的某一部分。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void write(String s, int offset, int len)</strong> 写入字符串中开始为offset长度为len的某一部分。</td></tr></tbody></table></li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">    fileWriter.write(<span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    fileWriter.close();</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fileWriterLast</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">char</span>[] c = &#123;<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;!&#x27;</span>&#125;;</span><br><span class="line">    fileWriterLast.write(c);</span><br><span class="line">    fileWriterLast.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//文件</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><h2 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h2><ul><li>该类用来创建一个文件并向文件中输出数据。</li><li>如果输出文件不存在，则创建文件。</li></ul><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><ul><li><p>创建方法与字节文件输入流类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dir);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件对象创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及描述</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public void close() throws IOException{}</strong> 关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</td></tr><tr><td align="left">2</td><td align="left"><strong>protected void finalize()throws IOException {}</strong> 这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</td></tr><tr><td align="left">3</td><td align="left"><strong>public void write(int w)throws IOException{}</strong> 这个方法把指定的字节写到输出流中。</td></tr><tr><td align="left">4</td><td align="left"><strong>public void write(byte[] w)</strong> 把指定数组中w.length长度的字节写到OutputStream中。</td></tr></tbody></table><Br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制一张图片(该方法有溢出风险，若文件太大)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//创建文件1</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\OIP-C.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建克隆文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\clone.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    <span class="comment">//创建输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line">    <span class="comment">//获得图片字节长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fileInputStream.available();</span><br><span class="line">    <span class="comment">//创建与图片长度一样的字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">    <span class="comment">//读取图片信息到字节数组</span></span><br><span class="line">    fileInputStream.read(bytes);</span><br><span class="line">    <span class="comment">//将读取的图片字节信息数组输出到克隆文件上</span></span><br><span class="line">    fileOutputStream.write(bytes);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><ul><li>因为字节输出流代码属于二进制写入，会存在乱码问题，可以利用OutputStreamWriter(fop, “UTF-8”)设置写入的编码</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\hello&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="comment">//指定编码为UTF-8，windows上是gbk</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fileOutputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//将字符串输入到缓冲区</span></span><br><span class="line">        writer.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        writer.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        writer.append(<span class="string">&quot;world!&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭,同时把缓存区内容写入到文件</span></span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="comment">//关闭输出流</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//修改编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fileInputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字符串构造对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//reader.ready(),读取下一个字节，如果没有返回false</span></span><br><span class="line">        <span class="keyword">while</span> (reader.ready())&#123;</span><br><span class="line">            <span class="comment">//(char) reader.read()读取一个字节并返回char类型</span></span><br><span class="line">            stringBuilder.append((<span class="type">char</span>) reader.read());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">//关闭输出流</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(stringBuilder);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="其他输出流"><a href="#其他输出流" class="headerlink" title="其他输出流"></a>其他输出流</h2><ul><li>ByteArrayOutputStream</li><li>DataOutputStream</li></ul><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="对象创建-1"><a href="#对象创建-1" class="headerlink" title="对象创建"></a>对象创建</h2><ul><li><p>通过给定的父抽象路径名和子路径名字符串创建一个新的File实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(File parent, String child)</span><br></pre></td></tr></table></figure></li><li><p>通过将给定路径名字符串转换成抽象路径名来创建一个新 File 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(String pathname)</span><br></pre></td></tr></table></figure></li><li><p>根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(String parent, String child)</span><br></pre></td></tr></table></figure></li><li><p>通过将给定的 file: URI 转换成一个抽象路径名来创建一个新的 File 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File(URI uri) </span><br></pre></td></tr></table></figure></li></ul><h2 id="文件操作方法"><a href="#文件操作方法" class="headerlink" title="文件操作方法"></a>文件操作方法</h2><table><thead><tr><th align="left">序号</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getName()</strong> 返回由此抽象路径名表示的文件或目录的名称。</td></tr><tr><td align="left">2</td><td align="left"><strong>public String getParent()</strong> 返回此抽象路径名的父路径名的路径名字符串，如果此路径名没有指定父目录，则返回 <code>null</code>。</td></tr><tr><td align="left">3</td><td align="left"><strong>public File getParentFile()</strong> 返回此抽象路径名的父路径名的抽象路径名，如果此路径名没有指定父目录，则返回 <code>null</code>。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getPath()</strong> 将此抽象路径名转换为一个路径名字符串。</td></tr><tr><td align="left">5</td><td align="left"><strong>public boolean isAbsolute()</strong> 测试此抽象路径名是否为绝对路径名。</td></tr><tr><td align="left">6</td><td align="left"><strong>public String getAbsolutePath()</strong> 返回抽象路径名的绝对路径名字符串。</td></tr><tr><td align="left">7</td><td align="left"><strong>public boolean canRead()</strong> 测试应用程序是否可以读取此抽象路径名表示的文件。</td></tr><tr><td align="left">8</td><td align="left"><strong>public boolean canWrite()</strong> 测试应用程序是否可以修改此抽象路径名表示的文件。</td></tr><tr><td align="left">9</td><td align="left"><strong>public boolean exists()</strong> 测试此抽象路径名表示的文件或目录是否存在。</td></tr><tr><td align="left">10</td><td align="left"><strong>public boolean isDirectory()</strong> 测试此抽象路径名表示的文件是否是一个目录。</td></tr><tr><td align="left">11</td><td align="left"><strong>public boolean isFile()</strong> 测试此抽象路径名表示的文件是否是一个标准文件。</td></tr><tr><td align="left">12</td><td align="left"><strong>public long lastModified()</strong> 返回此抽象路径名表示的文件最后一次被修改的时间。</td></tr><tr><td align="left">13</td><td align="left"><strong>public long length()</strong> 返回由此抽象路径名表示的文件的长度。</td></tr><tr><td align="left">14</td><td align="left"><strong>public boolean createNewFile() throws IOException</strong> 当且仅当不存在具有此抽象路径名指定的名称的文件时，原子地创建由此抽象路径名指定的一个新的空文件。</td></tr><tr><td align="left">15</td><td align="left"><strong>public boolean delete()</strong>  删除此抽象路径名表示的文件或目录。</td></tr><tr><td align="left">16</td><td align="left"><strong>public void deleteOnExit()</strong> 在虚拟机终止时，请求删除此抽象路径名表示的文件或目录。</td></tr><tr><td align="left">17</td><td align="left"><strong>public String[] list()</strong> 返回由此抽象路径名所表示的目录中的文件和目录的名称所组成字符串数组。</td></tr><tr><td align="left">18</td><td align="left"><strong>public String[] list(FilenameFilter filter)</strong> 返回由包含在目录中的文件和目录的名称所组成的字符串数组，这一目录是通过满足指定过滤器的抽象路径名来表示的。</td></tr><tr><td align="left">19</td><td align="left"><strong>public File[] listFiles()</strong>   返回一个抽象路径名数组，这些路径名表示此抽象路径名所表示目录中的文件。</td></tr><tr><td align="left">20</td><td align="left"><strong>public File[] listFiles(FileFilter filter)</strong> 返回表示此抽象路径名所表示目录中的文件和目录的抽象路径名数组，这些路径名满足特定过滤器。</td></tr><tr><td align="left">21</td><td align="left"><strong>public boolean mkdir()</strong> 创建此抽象路径名指定的目录。</td></tr><tr><td align="left">22</td><td align="left"><strong>public boolean mkdirs()</strong> 创建此抽象路径名指定的目录，包括创建必需但不存在的父目录。</td></tr><tr><td align="left">23</td><td align="left"><strong>public boolean renameTo(File dest)</strong>  重新命名此抽象路径名表示的文件。</td></tr><tr><td align="left">24</td><td align="left"><strong>public boolean setLastModified(long time)</strong> 设置由此抽象路径名所指定的文件或目录的最后一次修改时间。</td></tr><tr><td align="left">25</td><td align="left"><strong>public boolean setReadOnly()</strong> 标记此抽象路径名指定的文件或目录，以便只可对其进行读操作。</td></tr><tr><td align="left">26</td><td align="left"><strong>public static File createTempFile(String prefix, String suffix, File directory) throws IOException</strong> 在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。</td></tr><tr><td align="left">27</td><td align="left"><strong>public static File createTempFile(String prefix, String suffix) throws IOException</strong> 在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称。</td></tr><tr><td align="left">28</td><td align="left"><strong>public int compareTo(File pathname)</strong> 按字母顺序比较两个抽象路径名。</td></tr><tr><td align="left">29</td><td align="left"><strong>public int compareTo(Object o)</strong> 按字母顺序比较抽象路径名与给定对象。</td></tr><tr><td align="left">30</td><td align="left"><strong>public boolean equals(Object obj)</strong> 测试此抽象路径名与给定对象是否相等。</td></tr><tr><td align="left">31</td><td align="left"><strong>public String toString()</strong>  返回此抽象路径名的路径名字符串。</td></tr></tbody></table><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><ul><li><mark class="hl-label red">mkdir()</mark> 方法创建一个文件夹，成功则返回true，失败则返回false。</li><li><mark class="hl-label red">mkdirs()</mark> 方法创建一个文件夹和它的所有父文件夹。</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/test/test01/src/iotest/img&quot;</span>);</span><br><span class="line">        System.out.println(file.mkdir());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h4><ul><li>isDirectory() 判断一个是不是一个目录</li><li>list()返回这个目录所包含的文件和文件夹</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="string">&quot;D:/test/test01/src/iotest/img&quot;</span>;</span><br><span class="line">       <span class="comment">//创建img目录对象</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir);</span><br><span class="line">       <span class="comment">//创建a目录对象</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">fileA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir + <span class="string">&quot;/a&quot;</span>);</span><br><span class="line">       <span class="comment">//创建b目录对象</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">fileB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir + <span class="string">&quot;/b.txt&quot;</span>);</span><br><span class="line">       <span class="comment">//创建目录</span></span><br><span class="line">       System.out.println(file.mkdir());</span><br><span class="line">       System.out.println(fileA.mkdir());</span><br><span class="line">       System.out.println(fileB.mkdir());</span><br><span class="line">       <span class="comment">//返回目录列表</span></span><br><span class="line">       String[] list = file.list();</span><br><span class="line">       <span class="comment">//打印列表</span></span><br><span class="line">       <span class="keyword">for</span> (String str:list) &#123;</span><br><span class="line">           <span class="type">File</span> <span class="variable">isFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir + <span class="string">&#x27;/&#x27;</span> + str);</span><br><span class="line">           <span class="keyword">if</span> (isFile.isDirectory())&#123;</span><br><span class="line">               System.out.println(str + <span class="string">&quot;是目录&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">               System.out.println(str + <span class="string">&quot;是文件&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a是目录</span><br><span class="line">b.txt是目录</span><br></pre></td></tr></table></figure><h4 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h4><ul><li>delete()方法，删除文件</li><li>当删除的目录内有其他文件时，删除失败</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除所有文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOTest</span> &#123;</span><br><span class="line">    <span class="comment">//测试入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test\\test01\\src\\iotest\\img&quot;</span>);</span><br><span class="line">        deleteFolder(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除所有文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFolder</span><span class="params">(File file)</span>&#123;</span><br><span class="line">        <span class="comment">//当该文件删除失败时</span></span><br><span class="line">        <span class="keyword">if</span> (!file.delete())&#123;</span><br><span class="line">            <span class="comment">//不能被删除肯定是含有文件的文件夹，列出列表</span></span><br><span class="line">            String[] list = file.list();</span><br><span class="line">            <span class="keyword">for</span> (String str:list)&#123;</span><br><span class="line">                <span class="comment">//删除列表里的文件</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">isFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file.getPath() + <span class="string">&#x27;/&#x27;</span> + str);</span><br><span class="line">                deleteFolder(isFile);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//列表文件被删除后就可以删除了</span></span><br><span class="line">            deleteFolder(file);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//删除</span></span><br><span class="line">            System.out.println(file.getName() + <span class="string">&quot;已删除&quot;</span>);</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.txt已删除</span><br><span class="line">b已删除</span><br><span class="line">a已删除</span><br><span class="line">c已删除</span><br><span class="line">a已删除</span><br><span class="line">img已删除</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode使用</title>
      <link href="/post/a2598390.html"/>
      <url>/post/a2598390.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><ol><li>创建一个文件夹</li></ol><img src="/post/a2598390/p1.png" class=""><ol start="2"><li>在vscode中打开</li></ol><img src="/post/a2598390/p2.png" class=""><ol start="3"><li>创建html文件</li></ol><ul><li>！号，创建html快捷件</li></ul><img src="/post/a2598390/p3.png" class=""><ol start="4"><li>翻译成中文插件</li></ol><img src="/post/a2598390/p4.png" class=""><ol start="5"><li>更换主题颜色</li></ol><img src="/post/a2598390/p5.png" class=""><ol start="6"><li>放大缩小视图</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + +</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + -</span><br></pre></td></tr></table></figure><ol start="7"><li>向上复制一行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + shift + 上方向按键</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + shift + 下方向按键</span><br></pre></td></tr></table></figure><ol start="8"><li>推荐插件</li></ol><img src="/post/a2598390/p6.png" class=""><h1 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h1><div class="tag link"><a class="link-card" title="vscode快捷键大全" href="https://blog.csdn.net/dreaming317/article/details/103823950"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">vscode快捷键大全</p><p class="url">https://blog.csdn.net/dreaming317/article/details/103823950</p></div></a></div> ]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/post/28877bf.html"/>
      <url>/post/28877bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="java异常处理的介绍"><a href="#java异常处理的介绍" class="headerlink" title="java异常处理的介绍"></a>java异常处理的介绍</h1><ul><li><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p></li><li><p><strong>异常发生原因通常包括以下几类</strong></p><ul><li><strong>用户输入了非法数据</strong></li><li><strong>要打开的文件不存在</strong></li><li><strong>网络通信中断，或者JVM溢出</strong></li></ul></li><li><p><strong>三种异常类型</strong></p><ul><li><p><strong>检查性异常(编译时异常)</strong></p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。（即编译时可出）</p></div></li><li><p><strong>运行时异常</strong></p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。（编译时不可被查出，运行时才产生）</p></div></li><li><p><strong>错误</strong></p><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</p></div></li></ul></li></ul><h1 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h1><ul><li><p>所有的异常类是从 <strong>java.lang.Exception</strong> 类继承的子类。</p></li><li><p>Exception 类是 <strong>Throwable</strong> 类的子类。除了Exception类外，Throwable还有一个子类<strong>Error</strong> 。</p></li><li><p><strong>Error</strong>（错误）不能被捕捉，错误一般发生在严重故障时。</p><div class="note red flat"><p>关系图</p></div><img src="/post/28877bf/p1.png" class=""></li></ul><h1 id="java内置异常类"><a href="#java内置异常类" class="headerlink" title="java内置异常类"></a>java内置异常类</h1><h2 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h2><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ArithmeticException</td><td align="left">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td align="left">ArrayIndexOutOfBoundsException</td><td align="left">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td align="left">ArrayStoreException</td><td align="left">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td align="left">ClassCastException</td><td align="left">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td align="left">IllegalArgumentException</td><td align="left">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td align="left">IllegalMonitorStateException</td><td align="left">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td align="left">IllegalStateException</td><td align="left">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td align="left">IllegalThreadStateException</td><td align="left">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td align="left">IndexOutOfBoundsException</td><td align="left">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td align="left">NegativeArraySizeException</td><td align="left">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td align="left">NullPointerException</td><td align="left">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td align="left">NumberFormatException</td><td align="left">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td align="left">SecurityException</td><td align="left">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td align="left">StringIndexOutOfBoundsException</td><td align="left">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td align="left">UnsupportedOperationException</td><td align="left">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table><h2 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h2><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ClassNotFoundException</td><td align="left">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td align="left">CloneNotSupportedException</td><td align="left">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td align="left">IllegalAccessException</td><td align="left">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td align="left">InstantiationException</td><td align="left">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td align="left">InterruptedException</td><td align="left">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td align="left">NoSuchFieldException</td><td align="left">请求的变量不存在</td></tr></tbody></table><h1 id="异常相关方法"><a href="#异常相关方法" class="headerlink" title="异常相关方法"></a>异常相关方法</h1><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getMessage()</strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Throwable getCause()</strong> 返回一个 Throwable 对象代表异常原因。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String toString()</strong> 返回此 Throwable 的简短描述。</td></tr><tr><td align="left">4</td><td align="left"><strong>public void printStackTrace()</strong> 将此 Throwable 及其回溯打印到标准错误流。。</td></tr><tr><td align="left">5</td><td align="left"><strong>public StackTraceElement [] getStackTrace()</strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td></tr><tr><td align="left">6</td><td align="left"><strong>public Throwable fillInStackTrace()</strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());<span class="comment">//getMessage()获得报错信息</span></span><br><span class="line">            System.out.println(e.toString());<span class="comment">//将报错信息转成字符串</span></span><br><span class="line">            e.printStackTrace();<span class="comment">//打印异常信息</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> e.getCause();<span class="comment">//getCause()获得报错对象Throwable</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e2) &#123;</span><br><span class="line">                e2.printStackTrace();<span class="comment">//打印异常信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">异常</span><br><span class="line">java.lang.Exception: 异常</span><br><span class="line">java.lang.Exception: 异常</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">8</span>)</span><br><span class="line">java.lang.NullPointerException</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException: 空指针异常</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="多重捕获"><a href="#多重捕获" class="headerlink" title="多重捕获"></a>多重捕获</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>可以在 try 语句后面添加任意数量的 catch 块。</p><p>如果保护代码中发生异常，异常被抛给第一个 catch 块。</p><p>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</p><p>如果不匹配，它会被传递给第二个 catch 块。</p><p>如此，直到异常被捕获或者通过所有的 catch 块。</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个catch&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (StringIndexOutOfBoundsException e2)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个catch&quot;</span>);</span><br><span class="line">        e2.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e3)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个catch&quot;</span>);</span><br><span class="line">        e3.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第三个<span class="keyword">catch</span></span><br><span class="line">java.lang.NullPointerException: 空指针异常</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h1><ul><li><p>语句格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>finally无论异常是否发生都会执行</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e3)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三个catch&quot;</span>);</span><br><span class="line">        e3.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally运行完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第三个<span class="keyword">catch</span></span><br><span class="line">程序运行完成！</span><br><span class="line">java.lang.NullPointerException: 空指针异常</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="throws-x2F-throw关键字"><a href="#throws-x2F-throw关键字" class="headerlink" title="throws&#x2F;throw关键字"></a>throws&#x2F;throw关键字</h1><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><ul><li><p>抛出异常， 把异常抛给调用者处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        exceptions();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exceptions</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException: 空指针异常</span><br><span class="line">at ExceptionTest.exceptions(ExceptionTest.java:<span class="number">7</span>)</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>调用者也可以抛，一直抛给JVM处理，JVM摆烂直接报错。main方法扔出的异常直接交换JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        exception2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception2&quot;</span>);</span><br><span class="line">        exception1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception1&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hello!</span><br><span class="line">exception2</span><br><span class="line">exception1</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.IOException: IO异常</span><br><span class="line">at ExceptionTest.exception1(ExceptionTest.java:<span class="number">14</span>)</span><br><span class="line">at ExceptionTest.exception2(ExceptionTest.java:<span class="number">10</span>)</span><br><span class="line">at ExceptionTest.main(ExceptionTest.java:<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>可以抛出多个异常，用逗号隔开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">()</span> <span class="keyword">throws</span> IOException , RuntimeException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><ul><li><p>主动制造异常</p></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>();</span><br></pre></td></tr></table></figure></li></ul><h1 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h1><ul><li><p>可以测试打开的异常，并且可以在语句执行完毕后确保每个资源都被自动关闭 。</p></li><li><p>语句格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (resource declaration) &#123;</span><br><span class="line">  <span class="comment">// 使用的资源</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType e1) &#123;</span><br><span class="line">  <span class="comment">// 异常块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上的语法中 try 用于声明和实例化资源，catch 用于处理关闭资源时可能引发的所有异常。</p><p> 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    String line;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="finally关闭"><a href="#finally关闭" class="headerlink" title="finally关闭"></a>finally关闭</h2><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering try block&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering finally block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;IOException in finally block =&gt;&quot;</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="处理多个资源"><a href="#处理多个资源" class="headerlink" title="处理多个资源"></a>处理多个资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering try block&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering finally block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;IOException in finally block =&gt;&quot;</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><p>示例：</p><p>​<div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>模拟支付系统，如果不够钱，则报错并说明欠的钱</p></div></p><ul><li>个人类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> payTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">My</span><span class="params">(String name, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">identifyMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (money &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没钱了...&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>商品类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> payTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PayObject</span> &#123;</span><br><span class="line">    PAPER(<span class="string">&quot;纸张&quot;</span>,<span class="number">20</span>),APPLE(<span class="string">&quot;苹果&quot;</span>,<span class="number">15</span>),PENCIL(<span class="string">&quot;铅笔&quot;</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    PayObject(String name, Integer price)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Integer price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;商品列表：\n&quot;</span> + PayObject.APPLE</span><br><span class="line">                + <span class="string">&#x27;\n&#x27;</span> + PayObject.PAPER +</span><br><span class="line">                <span class="string">&#x27;\n&#x27;</span> + PayObject.PENCIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;:\t&quot;</span> + price + <span class="string">&quot;元&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> payTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">        System.out.println(<span class="string">&quot;您的余额不足，还欠&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>支付过程类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> payTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pay</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PayObject payObject;</span><br><span class="line">    <span class="keyword">private</span> My my;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pay</span><span class="params">(PayObject payObject, My my)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.payObject = payObject;</span><br><span class="line">        <span class="built_in">this</span>.my = my;</span><br><span class="line">        paying();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paying</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> my.getMoney() - payObject.getPrice();</span><br><span class="line">        <span class="keyword">if</span> (end &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(end);</span><br><span class="line">        &#125;</span><br><span class="line">        my.setMoney(end);</span><br><span class="line">        System.out.println(<span class="string">&quot;尊敬的客户,&quot;</span>+my.getName() +</span><br><span class="line">                <span class="string">&quot;先生,您购买&quot;</span> + payObject.getName() +</span><br><span class="line">                <span class="string">&quot;成功，您还有的余额：&quot;</span> + my.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>支付测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> payTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请注册您的用户:&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">useName</span> <span class="operator">=</span> scanner2.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;金额:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> scanner2.nextInt();</span><br><span class="line">        <span class="type">My</span> <span class="variable">XM</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">My</span>(useName, money);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;======================&quot;</span>);</span><br><span class="line">            PayObject.list();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入您需要购买的商品名称:&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (name.equals(PayObject.APPLE.getName()))&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Pay</span>(PayObject.APPLE, XM);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.equals(PayObject.PAPER.getName()))&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Pay</span>(PayObject.PAPER, XM);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.equals(PayObject.PENCIL.getName()))&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Pay</span>(PayObject.PENCIL, XM);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误，购买失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续购买?y/n（输入n退出）&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">yn</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (yn.equals(<span class="string">&quot;n&quot;</span>)|yn.equals(<span class="string">&quot;N&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">请注册您的用户:</span><br><span class="line">姓名:小明</span><br><span class="line">金额:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">商品列表：</span><br><span class="line">苹果:<span class="number">15</span>元</span><br><span class="line">纸张:<span class="number">20</span>元</span><br><span class="line">铅笔:<span class="number">16</span>元</span><br><span class="line">输入您需要购买的商品名称:</span><br><span class="line">纸张</span><br><span class="line">尊敬的客户,小明先生,您购买纸张成功，您还有的余额：<span class="number">10</span></span><br><span class="line">是否继续购买?y/n（输入n退出）</span><br><span class="line">y</span><br><span class="line">======================</span><br><span class="line">商品列表：</span><br><span class="line">苹果:<span class="number">15</span>元</span><br><span class="line">纸张:<span class="number">20</span>元</span><br><span class="line">铅笔:<span class="number">16</span>元</span><br><span class="line">输入您需要购买的商品名称:</span><br><span class="line">铅笔</span><br><span class="line">您的余额不足，还欠-<span class="number">6</span>元</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> payTest.MyException: 余额不足</span><br><span class="line">at payTest.Pay.paying(Pay.java:<span class="number">15</span>)</span><br><span class="line">at payTest.Pay.&lt;init&gt;(Pay.java:<span class="number">10</span>)</span><br><span class="line">at payTest.PayTest.main(PayTest.java:<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>源码</li></ul><div class="btns rounded grid5">            <a class="button" href='https://github.com/bigFunny/resource/blob/main/%E5%B0%8F%E9%A1%B9%E7%9B%AE/payTest.rar' title='下载源码'><i class='fas fa-download'></i>下载源码</a>          </div>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/post/6c92115f.html"/>
      <url>/post/6c92115f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1. Spring概述"></a>1. Spring概述</h1><h2 id="1-1-什么是Spring"><a href="#1-1-什么是Spring" class="headerlink" title="1.1 什么是Spring"></a>1.1 什么是Spring</h2><p>​Spring是由Rod Johnson组织和开发的一个分层的Java SE&#x2F;EE full-stack（一站式）轻量级开源框架，它以IoC（Inversion of Control，控制反转）和AOP（Aspect Oriented Programming，面向切面编程）为内核，使用基本的JavaBean来完成以前只可能由EJB（Enterprise Java Beans, Java企业Bean）完成的工作，取代了EJB的臃肿、低效的开发模式。</p><h2 id="1-2-Spring框架的优点"><a href="#1-2-Spring框架的优点" class="headerlink" title="1.2 Spring框架的优点"></a>1.2 Spring框架的优点</h2><ul><li><strong>非侵入式设计</strong></li><li><strong>方便解耦、简化开发</strong></li><li><strong>支持AOP</strong></li><li><strong>支持声明式事务处理</strong></li><li><strong>方便程序的测试</strong></li><li><strong>方便集成各种优秀框架</strong></li><li><strong>降低Java EE API的使用难度</strong></li></ul><h2 id="1-3-Spring体系结构"><a href="#1-3-Spring体系结构" class="headerlink" title="1.3 Spring体系结构"></a><strong>1.3 Spring体系结构</strong></h2><h3 id="1-Core-Container（核心容器）"><a href="#1-Core-Container（核心容器）" class="headerlink" title="1.Core Container（核心容器）"></a><strong>1.Core Container（核心容器）</strong></h3><ul><li><strong>Beans模块：提供了BeanFactory，是工厂模式的经典实现，Spring将管理对象称为Bean。</strong></li><li><strong>Core核心模块：提供了Spring框架的基本组成部分，包括IoC和DI功能。</strong></li><li><strong>Context-support模块：提供了对第三方库嵌入Spring应用的集成支持，比如缓存（EhCache、Guava、JCache）、邮件服务（JavaMail）、任务调度（CommonJ、Quartz）和模板引擎（FreeMarker、JasperReports、速率）。</strong></li><li><strong>SpEL模块：是Spring 3.0后新增的模块，它提供了Spring Expression Language支持，是运行时查询和操作对象图的强大的表达式语言。</strong></li></ul><h3 id="2-Data-Access-x2F-Integration（数据访问-x2F-集成）"><a href="#2-Data-Access-x2F-Integration（数据访问-x2F-集成）" class="headerlink" title="2.Data Access&#x2F;Integration（数据访问&#x2F;集成）"></a><strong>2.Data Access&#x2F;Integration（数据访问&#x2F;集成）</strong></h3><ul><li><p><strong>ORM模块：对流行的对象关系映射API，包括JPA、JDO和Hibernate提供了集成层支持。</strong></p></li><li><p><strong>OXM模块：提供了一个支持对象&#x2F; XML映射的抽象层实现，如JAXB、Castor、XMLBeans、JiBX和XStream。</strong></p></li><li><p><strong>JMS模块：指Java消息传递服务，包含使用和产生信息的特性，自4.1版本后支持与Spring-message模块的集成。</strong></p></li><li><p><strong>Transactions事务模块：支持对实现特殊接口以及所有POJO类的编程和声明式的事务管理。</strong></p></li></ul><h3 id="3-Web"><a href="#3-Web" class="headerlink" title="3.Web"></a><strong>3.Web</strong></h3><ul><li><strong>WebSocket模块：Spring 4.0以后新增的模块，它提供了WebSocket和SockJS的实现，以及对STOMP的支持。</strong></li><li><strong>Servlet模块：也称为Spring-webmvc模块，包含了Spring的模型—视图—控制器（MVC）和REST Web Services实现的Web应用程序。</strong></li><li><strong>Web模块：提供了基本的Web开发集成特性，例如：多文件上传功能、使用Servlet监听器来初始化IoC容器以及Web应用上下文。</strong></li><li><strong>Portlet模块：提供了在Portlet环境中使用MVC实现，类似Servlet模块的功能。</strong></li></ul><h3 id="4．其他模块"><a href="#4．其他模块" class="headerlink" title="4．其他模块"></a><strong>4．其他模块</strong></h3><ul><li><p><strong>AOP模块：提供了面向切面编程实现，允许定义方法拦截器和切入点，将代码按照功能进行分离，以降低耦合性。</strong></p></li><li><p><strong>Aspects模块：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的面向切面编程（AOP）框架。</strong></p></li><li><p><strong>Instrumentation模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</strong></p></li><li><p><strong>Messaging模块：Spring 4.0以后新增的模块，它提供了对消息传递体系结构和协议的支持。</strong></p></li><li><p><strong>Test模块：提供了对单元测试和集成测试的支持。</strong></p></li></ul><h2 id="1-4-IoC和DI"><a href="#1-4-IoC和DI" class="headerlink" title="1.4 IoC和DI"></a>1.4 IoC和DI</h2><p>​<strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/254878">面向对象编程</a>中的一种设计原则，可以用来减低计算机<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048">代码</a>之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>。</p><ul><li><strong>依赖查找：</strong>容器提供回调接口和上下文条件给组件。EJB和Apache Avalon 都使用这种方式。这样一来，组件就必须使用容器提供的API来查找资源和协作对象，仅有的控制反转只体现在那些回调方法上（也就是上面所说的 类型1）：容器将调用这些回调方法，从而让应用代码获得相关资源。</li><li><strong>依赖注入：</strong>组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。容器全权负责的组件的装配，它会把符合依赖关系的对象通过JavaBean属性或者<a href="https://baike.baidu.com/item/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a>传递给需要的对象。通过JavaBean属性注射依赖关系的做法称为设值方法注入(Setter Injection)；将依赖关系作为构造函数参数传入的做法称为<a href="https://baike.baidu.com/item/%E6%9E%84%E9%80%A0%E5%99%A8">构造器</a>注入（Constructor Injection）</li></ul><p>​       Spring中IoC，可理解为，传统的程序设计中，调用者<strong>需要</strong>被调用者<strong>协助</strong>时，调用者通过<strong>创建</strong>被调用者<strong>实例</strong>的方式来进行，但是在Spring中，创建被调用者的实例任务，不再是调用者来完成，而是交给<strong>Sring的容器</strong>来实现，控制权得到了反转。</p><p>​      依赖注入(DI)，Spring容器将依赖对象注入到bean中，如将Dao层的对象注入到Service层。依赖注入的方式有两种分别是属性setter方法注入和构造方法注入。</p><p><strong>属性setter方法注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"><span class="comment">//user属性的setter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--user对象的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.dao.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--userService对象的bean--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.service.UserService&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--将user注入到userService bean中--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过xml方式创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span>   <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获取bean对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法注入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.dao.User&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.service.UserService&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--name为构造器中形参的名字 ref为bean的引用--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过xml方式创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span>   <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获取bean对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr></br><h1 id="2-Spring的Bean"><a href="#2-Spring的Bean" class="headerlink" title="2.Spring的Bean"></a>2.Spring的Bean</h1><h2 id="2-1Bean的配置"><a href="#2-1Bean的配置" class="headerlink" title="2.1Bean的配置"></a>2.1Bean的配置</h2><ul><li>XML配置和Properties配置</li><li>Bean中常用的标签为id和name，class指定对象的实现类</li></ul><p><strong>注意：如果Bean未指定id，和name属性，则将class的值作为id使用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.dao.User&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//id=User.class</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(User.class);</span><br><span class="line">        user.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2Bean中对象的获取"><a href="#2-2Bean中对象的获取" class="headerlink" title="2.2Bean中对象的获取"></a>2.2Bean中对象的获取</h2><ul><li><p>普通方式</p></li><li><p>静态工厂方式获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> People <span class="title function_">getPeople</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用factory-method确认工厂中的哪个方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.factory.MyBeanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUser&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.factory.MyBeanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getPeople&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获得bean对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> (People) context.getBean(<span class="string">&quot;people&quot;</span>);</span><br><span class="line">        user.save();</span><br><span class="line">        people.save();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>实例化工厂方式获取</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> People <span class="title function_">getPeople</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--    配置工厂--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.factory.MyBeanFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   调用工厂方法--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myBeanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUser&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myBeanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getPeople&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获得bean对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> (People) context.getBean(<span class="string">&quot;people&quot;</span>);</span><br><span class="line">        user.save();</span><br><span class="line">        people.save();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3Bean的作用域"><a href="#2-3Bean的作用域" class="headerlink" title="2.3Bean的作用域"></a>2.3Bean的作用域</h2><ul><li><p>bean的作用域由<strong>scope属性</strong>来指定</p></li><li><p>bean的作用域有七种，分别为singleton(默认作用域)，prototype，request，session，globalSession，application，websocket。</p></li><li><p><strong>singleton</strong>(默认作用域)作用域，其输出结果为一个实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.dao.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获得bean的静态工厂</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><img src="/post/6c92115f/p1.png" class=""></li><li><p><strong>protoype</strong>作用域</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bigFunny.ioc.dao.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获得bean的静态工厂</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649764985629.png" alt="1649764985629"></p></li></ul><h2 id="2-4-Bean的生命周期"><a href="#2-4-Bean的生命周期" class="headerlink" title="2.4 Bean的生命周期"></a>2.4 Bean的生命周期</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649765430834.png" alt="1649765430834"></p><p>（1）根据配置情况调用Bean构造方法或工厂方法<strong>实例化Bean</strong>。</p><p>（2）利用<strong>依赖注入</strong>完成Bean中所有属性值的配置注入。</p><p>（3）如果Bean实现了<strong>BeanNameAware</strong>接口，则Spring<strong>调用Bean的setBeanName()方法传入当前Bean的id值</strong>。</p><p>（4）如果Bean实现了<strong>BeanFactoryAware</strong>接口，则Spring<strong>调用setBeanFactory()方法传入当前工厂实例的引用</strong>。</p><p>（5）如果Bean实现了<strong>ApplicationContextAware</strong>接口，则Spring调用<strong>setApplicationContext()方法传入当前ApplicationContext实例的引用</strong>。</p><p>（6）如果<strong>BeanPostProcessor和Bean关联</strong>，则Spring将<strong>调用该接口的预初始化方法postProcessBeforeInitialzation()<strong>对</strong>Bean进行加工操作</strong>，这个非常重要，Spring的<strong>AOP</strong>就是用它实现的。</p><p>（7）如果Bean实现了<strong>InitializingBean</strong>接口，则Spring将调用<strong>afterPropertiesSet()方法</strong>。</p><p>（8）如果在配置文件中通过<strong>init-method属性指定了初始化方法</strong>，则调用该初始化方法。</p><p>（9）如果有<strong>BeanPostProcessor和Bean关联</strong>，则Spring将调用该接口的初始化方法<strong>post ProcessAfterInitialization()<strong>。此时，</strong>Bean已经可以被应用系统使用了</strong>。</p><p>（10）如果在<bean> 中指定了该Bean的作用范围为<strong>scope&#x3D;”singleton”<strong>，则将该</strong>Bean放入Spring IoC的缓存池</strong>中，将触发Spring对该Bean的生命周期管理；如果在<bean>中指定了该Bean的作用范围为<strong>scope&#x3D;”prototype”<strong>，则将该Bean交给调用者，</strong>调用者管理该Bean的生命周期</strong>，Spring不再管理该Bean。</p><p>（11）如果Bean实现了<strong>DisposableBean</strong>接口，则Spring会调用<strong>destory()<strong>方法将Spring中的</strong>Bean销毁</strong>；如果在配置文件中通过<strong>destory-method</strong>属性指定了<strong>Bean的销毁方法</strong>，则Spring将调用该方法进行销毁。</p><h2 id="2-5-Bean的装配方式"><a href="#2-5-Bean的装配方式" class="headerlink" title="2.5 Bean的装配方式"></a>2.5 Bean的装配方式</h2><p><strong>xml装配</strong></p><p>​Spring实例化Bean过程中，<strong>先</strong>调用默认构造器实例化Bean，<strong>然后</strong>通过<strong>反射方式</strong>调用setter方法来注入属性值。因此值注入方式必须满足两点。</p><ul><li>Bean类必须提供一个默认构造器</li><li>Bean类必须为需要注入的属性提供一个setter方法</li></ul><p><strong>Annotation(注解)</strong>  <strong>注入</strong></p><ul><li>常用注解</li></ul><p><img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml4104\wps1.jpg" alt="img"></p><p><img src="file:///C:\Users\Administrator\AppData\Local\Temp\ksohtml4104\wps2.jpg" alt="img"></p><ul><li><p>注解配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    扫描注解所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bigFunny.ioc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@Resource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *Resource的name不赋值时相当于<span class="doctag">@Autowired</span>自动导入与变量名相同的属性</span></span><br><span class="line"><span class="comment">     *Resource(&quot;user&quot;)相当于id为userService的bean注入了user属性等于<span class="doctag">@Autowired</span> + <span class="doctag">@Qualifier</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-Spring-AOP"><a href="#3-Spring-AOP" class="headerlink" title="3.Spring AOP"></a>3.Spring AOP</h1><h2 id="3-1-什么是AOP"><a href="#3-1-什么是AOP" class="headerlink" title="3.1 什么是AOP"></a>3.1 什么是AOP</h2><ul><li><p><strong>AOP</strong>的全称是Aspect-Oriented Programming，即<strong>面向切面编程</strong>（也称面向方面编程）。它是面向对象编程（OOP）的一种补充，目前已成为一种比较成熟的编程方式。</p></li><li><p><strong>AOP</strong>的使用，使开发人员在编写业务逻辑时可以专心于核心业务，而不用过多地关注于其他业务逻辑的实现，这不但提高了开发效率，而且增强了代码的<strong>可维护性</strong>。</p></li><li><p>目前最流行的AOP框架有两个，分别为<strong>Spring AOP和AspectJ</strong>。Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期间通过代理方式向目标类织入增强的代码。</p></li></ul><h3 id="3-1-1-AOP专业术语"><a href="#3-1-1-AOP专业术语" class="headerlink" title="3.1.1 AOP专业术语"></a>3.1.1 AOP专业术语</h3><ul><li>这些术语包括<strong>Aspect、Joinpoint、Pointcut、Advice、Target Object、Proxy</strong>和<strong>Weaving</strong>。</li></ul><h2 id="3-2-动态代理"><a href="#3-2-动态代理" class="headerlink" title="3.2 动态代理"></a>3.2 动态代理</h2><ul><li><p>Spring中的AOP代理，可以是JDK动态代理，也可以是CGLIB代理。</p><h3 id="3-2-1-JDK动态代理（一定需要实现接口）"><a href="#3-2-1-JDK动态代理（一定需要实现接口）" class="headerlink" title="3.2.1 JDK动态代理（一定需要实现接口）"></a>3.2.1 JDK动态代理（一定需要实现接口）</h3><ul><li><p>可以调用<strong>Proxy</strong>类的**newProxyInstance()**方法来创建代理对象。对于使用业务接口的类，Spring默认会使用JDK动态代理来实现AOP。</p></li><li><p>创造User的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建切面（要增强的功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check_Permissions</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;模拟检查权限....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;模拟记录日志....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//声明目标类接口</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">//创建代理方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">createProxy</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">        <span class="comment">//1.类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JdkProxy.class.getClassLoader();</span><br><span class="line">        <span class="comment">//2.被代理对象实现所有接口</span></span><br><span class="line">        Class&lt;?&gt;[] clazz = userDao.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//3.使用代理类进行强化，返回代理后对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public static Object newProxyInstance(ClassLoader loader,---本类（代理对象）加载器</span></span><br><span class="line"><span class="comment">         *                                       Class&lt;?&gt;[] interfaces,---被代理对象的所有接口</span></span><br><span class="line"><span class="comment">         *                                       InvocationHandler h)---InvocationHandler，多态</span></span><br><span class="line"><span class="comment">         *         throws IllegalArgumentException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader,clazz,<span class="built_in">this</span>);<span class="comment">//this表示当前类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有动态代理对象交给invoke()方法处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理对象将要执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 执行的方法需要的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//1.声明切面</span></span><br><span class="line">        <span class="type">MyAspect</span> <span class="variable">myAspect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAspect</span>();</span><br><span class="line">        <span class="comment">//被代理对象（userDao）调用方法前增强的功能</span></span><br><span class="line">        myAspect.check_Permissions();</span><br><span class="line">        <span class="comment">//被代理对象（userDao）调用方法，并传入参数</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(userDao, args);</span><br><span class="line">        <span class="comment">//被代理对象（userDao）调用方法后增强的功能</span></span><br><span class="line">        myAspect.log();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">JdkProxy</span> <span class="variable">jdkProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkProxy</span>();</span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="comment">//从代理对象中获取增强后的代理目标对象</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">proxyUserDao</span> <span class="operator">=</span> (UserDao) jdkProxy.createProxy(userDao);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        proxyUserDao.addUser();</span><br><span class="line">        proxyUserDao.deleteUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-2-CGLIB动态代理"><a href="#3-2-2-CGLIB动态代理" class="headerlink" title="3.2.2 CGLIB动态代理"></a>3.2.2 CGLIB动态代理</h3><ul><li><p>JDK动态代理有一定局限性—–使用动态代理的对象<strong>必须</strong>实现一个或多个接口，如果没有对应实现接口的类进行代理，可以使用<strong>CGLIB</strong>。</p></li><li><p>CGLIB是一个高性能代码生成包，<strong>Spring</strong>核心包中<strong>集成了CGLIB</strong>所需的包，所以开发中不需另外导包。</p></li><li><p>CGLIB动态代理实现步骤</p></li><li><p>1.创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建user实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.创建切面（需要增强的功能）</p></li><li><pre><code class="java">public class MyAspect &#123;    public void check_Permissions()&#123;        System.out.println(&quot;模拟检查权限....&quot;);    &#125;    public void log()&#123;        System.out.println(&quot;模拟记录日志....&quot;);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 3.创建代理类</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  public class CglibProxy implements MethodInterceptor &#123;</span><br><span class="line">      public Object createProxy(Object target)&#123;</span><br><span class="line">          //创建一个动态代理类对象</span><br><span class="line">          Enhancer enhancer = new Enhancer();</span><br><span class="line">          //确定需要增强的类</span><br><span class="line">          enhancer.setSuperclass(target.getClass());</span><br><span class="line">          //添加回调函数</span><br><span class="line">          enhancer.setCallback(this);</span><br><span class="line">          //返回代理类</span><br><span class="line">          return enhancer.create();</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">          //创建切面对象</span><br><span class="line">          MyAspect myAspect = new MyAspect();</span><br><span class="line">          //增强代理功能</span><br><span class="line">          myAspect.check_Permissions();</span><br><span class="line">          //目标执行方法</span><br><span class="line">          Object o1 = methodProxy.invokeSuper(o, objects);</span><br><span class="line">          //增强代理功能</span><br><span class="line">          myAspect.log();</span><br><span class="line">          return o1;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建实体类对象</span></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">CglibProxy</span> <span class="variable">cglibProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxy</span>();</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao1</span> <span class="operator">=</span> (UserDaoImpl) cglibProxy.createProxy(userDao);</span><br><span class="line">        userDao1.addUser();</span><br><span class="line">        userDao1.deleteUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-3-基于代理类的AOP实现"><a href="#3-3-基于代理类的AOP实现" class="headerlink" title="3.3 基于代理类的AOP实现"></a>3.3 基于代理类的AOP实现</h2><h3 id="3-3-1Spring的通知方式"><a href="#3-3-1Spring的通知方式" class="headerlink" title="3.3.1Spring的通知方式"></a>3.3.1Spring的通知方式</h3><ul><li><strong>org.aopalliance.intercept.MethodInterceptor</strong>（环绕通知）在目标方法执行前后实施增强，可以应用于日志、事务管理等功能。</li><li><strong>org.springframework.aop.MethodBeforeAdvice</strong>（前置通知）在目标方法执行前实施增强，可以应用于权限管理等功能。</li><li><strong>org.springframework.aop.AfterReturningAdvice</strong>（后置通知）在目标方法执行后实施增强，可以应用于关闭流、上传文件、删除临时文件等功能。</li><li><strong>org.springframework.aop.ThrowsAdvice</strong>（异常通知）在方法抛出异常后实施增强，可以应用于处理异常记录日志等功能。</li><li><strong>org.springframework.aop.IntroductionInterceptor</strong>（引介通知）在目标类中添加一些新的方法和属性，可以应用于修改老版本程序（增强类）。</li></ul><h3 id="3-3-2-ProxyFactoryBean"><a href="#3-3-2-ProxyFactoryBean" class="headerlink" title="3.3.2 ProxyFactoryBean"></a>3.3.2 ProxyFactoryBean</h3><ul><li><p><strong>ProxyFactoryBean</strong>是<strong>FactoryBean</strong>接口的实现类，FactoryBean负责实例化一个Bean，而ProxyFactoryBean负责为其他Bean创建代理实例。</p></li><li><p><strong>ProxyFactoryBean</strong>类常用属性</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649947890813.png" alt="1649947890813"></p></li></ul><h3 id="3-3-3-代码实现"><a href="#3-3-3-代码实现" class="headerlink" title="3.3.3 代码实现"></a>3.3.3 代码实现</h3><ul><li><p>1.导入aop坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring为AOP提供的实现包，Spring的包中已经提供。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aopalliance-1.0.jar：是AOP联盟提供的规范包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2.创建切面类MyAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        check_Permissions();</span><br><span class="line"><span class="comment">//        执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> methodInvocation.proceed();</span><br><span class="line">        </span><br><span class="line">        log();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check_Permissions</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;模拟检查权限...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;模拟记录日记...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbigFunny.aop.jdk.Impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    2.切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbigFunny.aop.factorybean.MyAspect&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    3.使用Spring代理工厂定义一个名称为userDaoProxy的代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        指定代理实现的接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyInterfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itbigFunny.aop.jdk.UserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        指定目标对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        指定切面，植入环绕通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myAspect&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        指定代理对象方式，ture：使用cglib，false：使用jdk动态代理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyTargetClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryBeanTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创造容器</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">con</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器中获得代理后对象</span></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDaoProxy</span> <span class="operator">=</span> (UserDaoImpl) con.getBean(<span class="string">&quot;userDaoProxy&quot;</span>);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        userDaoProxy.addUser();</span><br><span class="line">        userDaoProxy.deleteUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649948629607.png" alt="1649948629607"></p></li></ul><h2 id="3-4AspectJ开发"><a href="#3-4AspectJ开发" class="headerlink" title="3.4AspectJ开发"></a>3.4AspectJ开发</h2><ul><li><strong>AspectJ</strong>是一个基于Java语言的AOP框架，它提供了强大的AOP功能。使用AspectJ实现AOP有两种方式：<strong>一种是基于XML的声明式AspectJ，另一种是基于注解的声明式AspectJ。</strong></li></ul><h3 id="3-4-1-基于XML的声明式AspectJ"><a href="#3-4-1-基于XML的声明式AspectJ" class="headerlink" title="3.4.1 基于XML的声明式AspectJ"></a>3.4.1 基于XML的声明式AspectJ</h3><ul><li><p>**&lt; aop:config&gt;**的元素及子元素</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649949031111.png" alt="1649949031111"></p></li><li><p><strong>配置切面</strong></p></li><li><p><strong>&lt; aop:aspect&gt;</strong>  将<strong>普通bean对象转为切面对象</strong>，下图为aop:aspect元素的<strong>属性</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1649949211648.png" alt="1649949211648"></p></li><li><p><strong>切入点 &lt; aop:pointcut&gt;</strong></p><p>当&lt; aop:pointcut&gt;为&lt; aop:config&gt;的子元素时，表示为全局切入点，可全局引入</p><p>当&lt; aop:pointcut&gt;为&lt; aop:aspect&gt;的子元素时，表示为局部切入点，只可共当前切面使用</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650013627000.png" alt="1650013627000"></p><p><strong>execution()说明</strong></p><p><img src="/../../../Desktop/img/Snipaste_2022-04-15_17-14-11.png" alt="Snipaste_2022-04-15_17-14-11"></p><p><img src="/../../../Desktop/img/1650014795621.png" alt="1650014795621"></p></li><li><p><strong>配置通知</strong></p><p><strong>配置通知有以下属性</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650022359141.png" alt="1650022359141"></p></li><li><p><strong>代码实现</strong></p></li><li><p>0.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring02_AOP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入aop依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aopalliance--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入AspectJ框架--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>1.实体类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.定义切面类，配置增强的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知：模拟执行权限检擦........&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;目标类是：&quot;</span> + joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;,被植入增强处理目标方法为&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知：执行记录日志........&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;目标类是：&quot;</span> + joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;,被植入增强处理目标方法为&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * ProceedingJoinPoint是JoinPoint子接口，表示可执行目标方法</span></span><br><span class="line"><span class="comment">     * 1.必须是Object类型返回值</span></span><br><span class="line"><span class="comment">     * 2.必须接受一个参数，类型为ProceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * 3.必须throws Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//开始</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕开始：执行目标方法之前，模拟开始事务，..&quot;</span>);</span><br><span class="line">        <span class="comment">//执行当前目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;坏绕结束：执行目标方法之后，模拟关闭事务&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知：&quot;</span> + <span class="string">&quot;出错了&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知：模拟方法结束后释放资源.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.aop的xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--0，定义目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbigFunny.aop.jdk.Impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    定义切面bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbigFunny.aop.aspect.xml.MyAspect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        1.配置切面，将普通bean转为切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;aspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        2.配置切入点：jdk包下所有类的所有方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itbigFunny.aop.jdk.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--        3.配置通知--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            关联通知Advice和切入点pointCut--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;myBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--后置通知,在方法返回之后执行，就可以获得返回值</span></span><br><span class="line"><span class="comment">            returning属性：用于设置后置通知的第二个参数的名称，类型是Object--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;myAfterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;returnVal&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;myAround&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;myAfterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--最终通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;myAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>后置通知</strong>与<strong>最终通知</strong>都是在方法<strong>执行后</strong>通知切面执行方法，区别在于<strong>后置通知</strong>必须要在目标方法<strong>不报错</strong>的情况下才能执行，而<strong>最终通知</strong>无论报不报错都执行。</p></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestXmlAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">con</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDaoImpl) con.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650027774178.png" alt="1650027774178"></p></li><li><p>将add返回10&#x2F;0制造异常，测试异常通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;添加成功......&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650028108043.png" alt="1650028108043"></p><p>由图也可看出<strong>后置通知</strong>与<strong>最终通知</strong>的区别</p></li></ul><h3 id="3-4-2-基于注解的声明式AspectJ"><a href="#3-4-2-基于注解的声明式AspectJ" class="headerlink" title="3.4.2 基于注解的声明式AspectJ"></a>3.4.2 基于注解的声明式AspectJ</h3><p><strong>基于XML的声明式AspectJ</strong>会产生大量的配置信息，造成代码的臃肿，为了解决这类问题Spring提供了<strong>注解</strong>方式实现<strong>AOP</strong>。</p><ul><li><p><strong>AspectJ的注解及其描述</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650028894045.png" alt="1650028894045"></p></li><li><p><strong>代码实现</strong></p></li><li><p>1.创建目标类给目标类加个注解@Repository(“userDao”)，导坐标</p></li><li><p>2.注解方式创建切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *定义切面类，在此类中书写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">//定义切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itbigFunny.aop.jdk.*.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">//使用一个返回值为空，方法体为空的方法为切入点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">myPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//定义通知</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知：模拟执行权限检擦........&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;目标类是：&quot;</span> + joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;,被植入增强处理目标方法为&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知：执行记录日志........&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;目标类是：&quot;</span> + joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;,被植入增强处理目标方法为&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * ProceedingJoinPoint是JoinPoint子接口，表示可执行目标方法</span></span><br><span class="line"><span class="comment">     * 1.必须是Object类型返回值</span></span><br><span class="line"><span class="comment">     * 2.必须接受一个参数，类型为ProceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * 3.必须throws Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//开始</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕开始：执行目标方法之前，模拟开始事务，..&quot;</span>);</span><br><span class="line">        <span class="comment">//执行当前目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        <span class="comment">//结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;坏绕结束：执行目标方法之后，模拟关闭事务&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;myPointCut()&quot;,throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知：&quot;</span> + <span class="string">&quot;出错了&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(&quot;myPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知：模拟方法结束后释放资源.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.配置扫描注解，声明AspectJ</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫描注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbigFunny.aop&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    启动基于注解声明式Aspect--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>4.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestXmlAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">con</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) con.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650030835565.png" alt="1650030835565"></p><p><strong>注意</strong></p><p>​如果在<strong>同一个连接点</strong>有<strong>多个通知</strong>需要执行，那么在<strong>同一切面</strong>中，目标方法之前的<strong>前置通知和环绕通知的执行顺序是未知的</strong>，目标方法之后的<strong>后置通知</strong>和<strong>环绕通知</strong>的执行顺序也是<strong>未知的</strong>。</p><h3 id="3-5-AOP知识总结"><a href="#3-5-AOP知识总结" class="headerlink" title="3.5 AOP知识总结"></a>3.5 AOP知识总结</h3><p>​<strong>面向切面编程</strong>，和面向对象不一样，<strong>面向对象</strong>是<strong>从类出发</strong>；而<strong>面向切面</strong>是从对象的<strong>方法出发</strong>，将<strong>对象方法看作类的组件</strong>，<strong>aop</strong>关注的就是这些组件，可以类比理解Vue的设计，将页面拆分成多个组件的思想。我对它还有个更直白的理解：<strong>aop编程就是在目标方法执行前后做某些事，比如在执行前开启事务，在执行后提交或回滚事务。</strong></p><ul><li><p><strong>切面(Aspect):</strong> 切入目标业务方法前后的独立完整模块</p></li><li><p>**连接点(Join point):**具体切入的位置，即符合匹配条件的目标业务方法</p></li><li><p>**切入点(Point Cut):**切入点，定义匹配条件。</p></li><li><p>**通知(Advice):**切面的具体实现方法。</p><ul><li>**前置通知(Before):**在目标业务方法执行前执行。</li><li>**环绕通知(Around):**在目标业务方法执行前后都会执行。</li><li>**后置通知(AfterReturning):**在目标业务方法正常执行后并且没有抛出异常执行。</li><li>**异常通知(AfterThrowing):**在目标业务方法执行抛出异常时执行。</li><li>**最终通知(After):**在目标业务方法执行后，不论是否正常执行完，最终通知都会执行。</li></ul></li><li><p><strong>通知执行顺序</strong></p><p><strong>Around-&gt;Before-&gt;Around-&gt;After-&gt;AfterReturning</strong></p></li><li><p><strong>切入点的相关细节</strong></p><ul><li><strong>jointpoint:<strong>程序运行过程中可识别的点，这个点可以用来作为<a href="https://so.csdn.net/so/search?q=AOP&spm=1001.2101.3001.7020">AOP</a>切入点，通过</strong>JpointPoint</strong>对象可以获取到下面信息。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 返回目标对象，即被代理的对象</span><br><span class="line">Object <span class="title function_">getTarget</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"># 返回切入点的参数</span><br><span class="line">Object[] getArgs();</span><br><span class="line"></span><br><span class="line"># 返回切入点的Signature</span><br><span class="line">Signature <span class="title function_">getSignature</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"># 返回切入的类型，比如method-call，field-get等等，感觉不重要 </span><br><span class="line"> String <span class="title function_">getKind</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li><h4 id="ProceedingJoinPoint：继承了-JoinPoint，是在JoinPoint的基础上暴露出-proceed-这个方法。"><a href="#ProceedingJoinPoint：继承了-JoinPoint，是在JoinPoint的基础上暴露出-proceed-这个方法。" class="headerlink" title="ProceedingJoinPoint：继承了 JoinPoint，是在JoinPoint的基础上暴露出 proceed 这个方法。"></a><strong>ProceedingJoinPoint：</strong>继承了 JoinPoint，是在JoinPoint的基础上暴露出 proceed 这个方法。</h4><p>​<strong>环绕通知&#x3D;前置+目标方法执行+后置通知，proceed方法就是用于启动目标方法执行的</strong></p><p>​暴露出这个方法，就能支持 <strong>aop:around</strong> 这种切面（而其他的几种切面只需要用到<strong>JoinPoint</strong>，，这也是环绕通知和前置、后置通知方法的一个最大区别。这跟切面类型有关）， 能决定是否走<strong>代理链</strong>还是走<strong>自己拦截的其他逻辑</strong>。建议看一下 JdkDynamicAopProxy的invoke方法，了解一下代理链的执行原理。</p></li><li><p><strong>pointcut:<strong>是一种程序结构和规则，它用于选取</strong>joinpoin</strong>t并收集这些<strong>poin</strong>t的上下文信息，可以把<strong>Pointcut</strong>当做<strong>jointpoint</strong>的集合。</p></li></ul></li><li><p><strong>AOP代理方式</strong></p><ul><li><p><strong>JDK代理方式</strong>(必须传入接口)</p></li><li><p><strong>JGLIB代理方式</strong>(传入接口和对象都行)</p></li><li><p><strong>切换方式</strong>（默认为false即JDK代理方式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    使用CGLIB代理方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="4-Spring数据库开发"><a href="#4-Spring数据库开发" class="headerlink" title="4.Spring数据库开发"></a>4.Spring数据库开发</h1><h3 id="4-1-Spring-JDBC"><a href="#4-1-Spring-JDBC" class="headerlink" title="4.1 Spring   JDBC"></a>4.1 Spring   JDBC</h3><p><strong>4.1.1 Spring JdbcTemplate类</strong></p><ul><li><strong>类关系图</strong></li></ul><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650114296959.png" alt="1650114296959"></p><ul><li><p><strong>公共属性</strong></p><ul><li><p><strong>DataSource：</strong>其主要功能是<strong>获取数据库连接</strong>，具体实现时还可以引入对数据库连接的缓冲池和分布式事务的支持，它可以<strong>作为访问数据库资源的标准接口</strong>。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650116660459.png" alt="1650116660459"></p></li><li><p><strong>SQLExceptionTranslator：</strong>负责对SQLException进行转译工作。</p></li><li><p><strong>JdbcOperations：</strong>定义了在JdbcTemplate类中可以使用的操作集合，包括添加、修改、查询和删除等操作。</p></li></ul></li><li><p><strong>配置</strong></p><ul><li><p>Spring JDBC模块主要由4个包组成，分别是core（核心包）、dataSource（数据源包）、object（对象包）和support（支持包）。</p></li><li><p><strong>模块介绍：</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650114899488.png" alt="1650114899488"></p></li><li><p><strong>导入坐标</strong></p></li><li><p>&#96;&#96;&#96;xml</p><dependency>    <groupId>mysql</groupId>    <artifactId>mysql-connector-java</artifactId>    <version>8.0.16</version></dependency><dependency>    <groupId>org.springframework</groupId>    <artifactId>spring-jdbc</artifactId>    <version>5.3.18</version></dependency><dependency>    <groupId>org.springframework</groupId>    <artifactId>spring-tx</artifactId>    <version>5.3.18</version></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- spring配置</span><br><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">              &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">              &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/dbl2?serverTimezone=GMT%2B8&amp;amp;useSSL=false&amp;amp;useServerPrepStmts=true&quot;/&gt;</span><br><span class="line">              &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">              &lt;property name=&quot;password&quot; value=&quot;0614&quot;/&gt;</span><br><span class="line">          &lt;/bean&gt;</span><br><span class="line">  &lt;!--    配置JDBCTemplate模板--&gt;</span><br><span class="line">          &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">  &lt;!--            默认使用数据源--&gt;</span><br><span class="line">              &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">          &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="5-Spring的事务管理"><a href="#5-Spring的事务管理" class="headerlink" title="5.Spring的事务管理"></a>5.Spring的事务管理</h1><p>学习目标</p><p>● 熟悉Spring事务管理的3个核心接口</p><p>● 了解Spring事务管理的两种方式</p><p>● 掌握基于XML和Annotation的声明式事务的使用</p><h2 id="5-1事务管理概述"><a href="#5-1事务管理概述" class="headerlink" title="5.1事务管理概述"></a>5.1事务管理概述</h2><ul><li><p><strong>spring-tx-4.3.6.RELEASE</strong>的JAR包：该包就是Spring提供的用于事务管理的依赖包。</p></li><li><p><strong>org.springframework.transaction包：</strong>我们可以找到3个接口文件<strong>PlatformTransactionManager</strong>、<strong>TransactionDefinition</strong>和<strong>TransactionStatus</strong></p><ul><li><p><strong>PlatformTransactionManager接口</strong>：用于管理事务，其下有3个方法</p><ul><li><p><strong>TransactionStatus getTransaction（TransactionDefinition definition）</strong>：用于获取事务状态信息。</p></li><li><p><strong>void commit（TransactionStatus status）</strong>：用于提交事务。</p></li><li><p><strong>void rollback（TransactionStatus status）</strong>：用于回滚事务。</p><ul><li><strong>PlatformTransactionManager接口</strong>有许多不同的实现类，常见的几个实现类如下。</li></ul></li><li><p><strong>· org.springframework.jdbc.datasource.DataSourceTransactionManager：</strong>用于<strong>配置JDBC数据源</strong>的事务管理器。</p></li><li><p><strong>· org.springframework.orm.hibernate4.HibernateTransactionManager：</strong>用于<strong>配置Hibernate的事务管理器。</strong></p></li><li><p><strong>· org.springframework.transaction.jta.JtaTransactionManager：</strong>用于配置<strong>全局事务管理器。</strong></p></li><li><p>当底层采用不同的持久层技术时，系统只需使用不同的<strong>PlatformTransactionManager</strong>实现类即可。</p></li></ul></li><li><p><strong>TransactionDefinition</strong>：事务定义（描述）的对象，该对象中定义了事务规则，并提供了获取事务相关信息的方法，具体如下。</p><ul><li><strong>String getName()：</strong>获取事务对象名称。</li><li><strong>int getIsolationLevel()：</strong>获取事务的隔离级别。</li><li><strong>int getPropagationBehavior()：</strong>获取事务的传播行为。<ul><li>事务的<strong>传播行为</strong>是指在同一个方法中，不同操作前后所使用的事务，下图为事务传播行为的种类。</li><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650175561851.png" alt="1650175561851"></li></ul></li><li><strong>int getTimeout()：</strong>获取事务的超时时间。</li><li><strong>boolean isReadOnly()：</strong>获取事务是否只读。</li></ul></li><li><p><strong>TransactionStatus</strong>：事务的状态，有以下几个方法。</p><ul><li><strong>· void flush()：</strong>刷新事务。</li><li><strong>· boolean hasSavepoint()：</strong>获取是否存在保存点。</li><li><strong>· boolean isCompleted()：</strong>获取事务是否完成。</li><li><strong>· boolean isNewTransaction()：</strong>获取是否是新事务。</li><li><strong>· boolean isRollbackOnly()：</strong>获取是否回滚。</li><li><strong>· void setRollbackOnly()：</strong>设置事务回滚。</li></ul></li></ul></li></ul><h2 id="5-2-事务的管理方式"><a href="#5-2-事务的管理方式" class="headerlink" title="5.2 事务的管理方式"></a>5.2 事务的管理方式</h2><p>Spring中的事务管理分为两种方式：一种是传统的<strong>编程式事务管理</strong>，另一种是<strong>声明式事务管理</strong>。</p><ul><li><strong>编程式事务管理</strong>：是通过编写代码实现的事务管理，包括定义事务的开始、正常执行后的事务提交和异常时的事务回滚。</li><li><strong>声明式事务管理</strong>：是通过<strong>AOP技术</strong>实现的事务管理，其主要思想是将<strong>事务管理</strong>作为一个<strong>“切面”</strong>代码<strong>单独</strong>编写，然后通过<strong>AOP技术</strong>将事务管理的<strong>“切面”代码</strong>织入到<strong>业务目标类</strong>中。</li></ul><h2 id="5-3-声明式事务管理"><a href="#5-3-声明式事务管理" class="headerlink" title="5.3 声明式事务管理"></a>5.3 声明式事务管理</h2><p>Spring的声明式事务管理可以通过两种方式来实现，一种是<strong>基于XML的方式</strong>，另一种是<strong>基于Annotation的方式</strong>。</p><ul><li><p><strong>基于XML方式的声明式事务</strong></p><ul><li><p><tx-advice>介绍</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650194659312.png" alt="1650194659312"></p></li><li></li></ul></li><li><p><strong>基于Annotation方式的声明式事务</strong></p></li><li><p><strong>@Transactional</strong></p></li></ul><h1 id="6-初始Mybatis"><a href="#6-初始Mybatis" class="headerlink" title="6.初始Mybatis"></a>6.初始Mybatis</h1><p><strong>学习目标</strong></p><p>● 了解MyBatis的基础知识</p><p>● 熟悉MyBatis的工作原理</p><p>● 掌握MyBatis入门程序的编写</p><h2 id="6-1-MyBatis的基础知识"><a href="#6-1-MyBatis的基础知识" class="headerlink" title="6.1 MyBatis的基础知识"></a>6.1 MyBatis的基础知识</h2><ul><li><p><strong>MyBatis（前身是iBatis）:<strong>使用简单的</strong>XML</strong>或<strong>注解</strong>进行<strong>配置</strong>和<strong>原始映射</strong>，用以将<strong>接口</strong>和<strong>Java的POJO</strong>（PlainOld Java Object，普通Java对象）<strong>映射成数据库</strong>中的<strong>记录</strong>，使得Java开发人员可以使用面向对象的编程思想来操作数据库。</p></li><li><p><strong>人话：将pojo映射到数据库中的记录</strong></p></li><li><p><strong>MyBatis框架也被称之为ORM：</strong>ORM就是一种为了解决<strong>面向对象</strong>与<strong>关系型数据库</strong>中<strong>数据类型不匹配</strong>的技术，它通过描述<strong>Java对象</strong>与<strong>数据库表</strong>之间的映射关系，<strong>自动</strong>将Java应用程序中的<strong>对象</strong>持久化到<strong>关系型数据库的表</strong>中。</p><ul><li><p><strong>ORM框架的工作原理</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650199642148.png" alt="1650199642148"></p></li><li><p>用<strong>ORM</strong>框架后，应用程序不再直接访问<strong>底层数据库</strong>，而是以<strong>面向对象</strong>的方式来<strong>操作持久化对象</strong>（Persisent Object, PO），而<strong>ORM框架</strong>则会<strong>通过映射关系</strong>将这些<strong>面向对象的操作</strong>转换成<strong>底层的SQL操作</strong>。</p></li></ul></li><li><p><strong>常见的两种ORM框架</strong></p><ul><li><strong>Hibernate：</strong>是一个<strong>全表映射的框架</strong>。通常开发者只需定义好持久化对象到数据库表的映射关系，就可以通过Hibernate提供的方法完成持久层操作。开发者并<strong>不需要熟练地掌握SQL语句</strong>的编写，Hibernate会根据制定的存储逻辑，<strong>自动的生成对应的SQL，并调用JDBC接口来执行，所以其开发效率会高于MyBatis</strong>。<strong>然而</strong>Hibernate自身也存在着一些<strong>缺点</strong>，例如<strong>它在多表关联时，对SQL查询的支持较差</strong>；<strong>更新数据时，需要发送所有字段</strong>；<strong>不支持存储过程</strong>；<strong>不能通过优化SQL来优化性能等</strong>。这些问题导致其只适合在场景<strong>不太复杂</strong>且对<strong>性能要求不高</strong>的项目中使用。</li><li><strong>MyBatis：</strong>是一个<strong>半自动映射的框架</strong>。这里所谓的“半自动”是相对于Hibernate全表映射而言的，<strong>MyBatis</strong>需要<strong>手动匹配提供POJO、SQL和映射关系</strong>，而<strong>Hibernate只需提供POJO和映射关系即可</strong>。与Hibernate相比，虽然使用MyBatis手动编写SQL要比使用Hibernate的工作量大，但<strong>MyBatis可以配置动态SQL并优化SQL</strong>，可以<strong>通过配置决定SQL的映射规则，它还支持存储过程等</strong>。对于<strong>一些复杂的和需要优化性能</strong>的项目来说，显然使用MyBatis更加合适。</li></ul></li></ul><h2 id="6-2-MyBatis的工作原理"><a href="#6-2-MyBatis的工作原理" class="headerlink" title="6.2 MyBatis的工作原理"></a>6.2 MyBatis的工作原理</h2><ul><li><strong>MyBatis框架执行流程</strong><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650200462005.png" alt="1650200462005"></li><li>（1）<strong>读取MyBatis配置文件mybatis-config.xml。</strong> <strong>mybatis-config.xml</strong>作为<strong>MyBatis</strong>的全局配置文件，配置了MyBatis的运行环境等信息，其中<strong>主要内容是获取数据库连接</strong>。</li><li>（2）<strong>加载映射文件Mapper.xml。</strong>Mapper.xml文件即<strong>SQL映射文件</strong>，该文件中配置了<strong>操作数据库的SQL语句</strong>，需要在<strong>mybatis-config.xml</strong>中加载才能执行。mybatis-config.xml可以加载多个配置文件，每个配置文件对应数据库中的一张表。</li><li>（3）<strong>构建会话工厂。</strong>通过MyBatis的环境等配置信息<strong>构建会话工厂SqlSessionFactory</strong>。</li><li>（4）<strong>创建SqlSession对象。</strong>由会话工厂创建SqlSession对象，该对象中<strong>包含了执行SQL的所有方法</strong>。</li><li>（5）<strong>MyBatis底层定义了一个Executor接口来操作数据库，它会根据SqlSession传递的参数动态地生成需要执行的SQL语句，同时负责查询缓存的维护。</strong></li><li>（6）在<strong>Executor接口</strong>的执行方法中，包含一个<strong>MappedStatement类型的参数</strong>，该参数是对映射信息的<strong>封装</strong>，用于<strong>存储要映射的SQL语句的id、参数等</strong>。<strong>Mapper.xml</strong>文件中一个<strong>SQL</strong>对应一个<strong>MappedStatement</strong>对象，<strong>SQL的id即是MappedStatement的id。</strong></li><li>（7）<strong>输入参数映射。</strong>在执行方法时，<strong>MappedStatement</strong>对象会对<strong>用户执行SQL语句</strong>的<strong>输入参数</strong>进行定义<strong>（可以定义为Map、List类型、基本类型和POJO类型）</strong>,Executor执行器会通过MappedStatement对象在执行SQL前，将<strong>输入的Java对象映射到SQL语句</strong>中。这里对<strong>输入参数的映射过程</strong>就类似于<strong>JDBC编程中对preparedStatement对象设置参数</strong>的过程。</li><li>（8）<strong>输出结果映射。</strong>在数据库中<strong>执行完SQL语句</strong>后，<strong>MappedStatement</strong>对象会对SQL执行输出的结果进行定义（可以定义为Map和List类型、基本类型、POJO类型）, Executor执行器会通过MappedStatement对象在执行SQL语句后，将<strong>输出结果映射至Java对象</strong>中。这种将<strong>输出结果映射到Java对象的过程</strong>就类似于<strong>JDBC编程中对结果的解析处理</strong>过程。</li></ul></li></ul><h2 id="6-3-第一个MyBatis程序"><a href="#6-3-第一个MyBatis程序" class="headerlink" title="6.3 第一个MyBatis程序"></a>6.3 第一个MyBatis程序</h2><ul><li><p><strong>1.导入坐标</strong></p><ul><li>&#96;&#96;&#96;xml<!--        mysql连接包--><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;8.0.16&lt;/version&gt;    &lt;/dependency&gt;</code></pre><!--        mybatis框架--><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.5&lt;/version&gt;    &lt;/dependency&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **2.配置log4j日志信息**</span><br><span class="line"></span><br><span class="line">  - ```properties</span><br><span class="line">    log4j.rootLogger=ERROR,stdout</span><br><span class="line">    log4j.logger.com.itzjc=DEBUG</span><br><span class="line">    log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">    log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>3.创造核心配置文件</strong></p><ul><li>&#96;&#96;&#96;xml<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"><configuration>    <!-- 起别名 -->    <typeAliases>        <package name="com.itzjc.pojo"/>    </typeAliases>    <!-- environments:配置数据库的连接环境信息，可复制多个environments，通过default切换不同环境-->    <environments default="mysql">        <environment id="mysql">            <transactionManager type="JDBC"/>            <!--            dataSource type：数据库连接池-->            <dataSource type="POOLED">                <!--数据库连接信息-->                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>                <property name="url" value="jdbc:mysql://127.0.0.1:3306/dbl2?serverTimezone=GMT%2B8"/>                <property name="username" value="root"/>                <property name="password" value="0614"/>            </dataSource>        </environment>    </environments>    <mappers>        <!--加载sql映射文件-->        <!--        <mapper resource="com/itzjc/mapper/UserMapper.xml"/>-->        <!--包扫描-->        <package name="com.itzjc.mapper"/>    </mappers></configuration><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **4.定义pojo类映射数据库相应的表**</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public class Brand &#123;</span><br><span class="line">        private int id;</span><br><span class="line">        private String brandName;</span><br><span class="line">        private String companyName;</span><br><span class="line">        private int ordered;</span><br><span class="line">        private String description;</span><br><span class="line">        private byte status;</span><br><span class="line">    </span><br><span class="line">        public int getId() &#123;</span><br><span class="line">            return id;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setId(int id) &#123;</span><br><span class="line">            this.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public String getBrandName() &#123;</span><br><span class="line">            return brandName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setBrandName(String brandName) &#123;</span><br><span class="line">            this.brandName = brandName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public String getCompanyName() &#123;</span><br><span class="line">            return companyName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setCompanyName(String companyName) &#123;</span><br><span class="line">            this.companyName = companyName;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public int getOrdered() &#123;</span><br><span class="line">            return ordered;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setOrdered(int ordered) &#123;</span><br><span class="line">            this.ordered = ordered;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public String getDescription() &#123;</span><br><span class="line">            return description;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setDescription(String description) &#123;</span><br><span class="line">            this.description = description;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public byte getStatus() &#123;</span><br><span class="line">            return status;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        public void setStatus(byte status) &#123;</span><br><span class="line">            this.status = status;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;Brand&#123;&quot; +</span><br><span class="line">                    &quot;id=&quot; + id +</span><br><span class="line">                    &quot;, brandName=&#x27;&quot; + brandName + &#x27;\&#x27;&#x27; +</span><br><span class="line">                    &quot;, companyName=&#x27;&quot; + companyName + &#x27;\&#x27;&#x27; +</span><br><span class="line">                    &quot;, ordered=&quot; + ordered +</span><br><span class="line">                    &quot;, description=&#x27;&quot; + description + &#x27;\&#x27;&#x27; +</span><br><span class="line">                    &quot;, status=&quot; + status +</span><br><span class="line">                    &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>5.创建sql映射文件</strong></p><ul><li>&#96;&#96;&#96;xml<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><!--namespace表示命名空间，“包名+SQL映射文件名”--><mapper namespace="com.itzjc.mapper.BrandMapper"><!-- mapper子元素<select>中的信息是用于执行查询操作的配置-->    <!-- parameterType属性用于指定传入参数的类型-->    <!-- resultType属性用于指定返回结果的类型-->    <select id="selectById" resultType="com.itzjc.pojo.Brand" parameterType="integer">            select * from tb_brand where id = #{id};    </select></mapper><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **6.创建sql映射文件接口**</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public interface BrandMapper &#123;</span><br><span class="line">        Brand selectById(int id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>7.测试</strong></p><ul><li>&#96;&#96;&#96;java<br>public class BrandTest {<br>@Test<br>public void FindTest() throws IOException {<br>&#x2F;&#x2F;        1.读取配置信息<br>    InputStream resource &#x3D; Resources.getResourceAsStream(“mybatis_config.xml”);<br>&#x2F;&#x2F;        2.构造SqlSessionFactory对象<br>    SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(resource);<br>&#x2F;&#x2F;        3.创建sqlSession对象<br>    SqlSession sqlSession &#x3D; factory.openSession();<br>&#x2F;&#x2F;        4.从sqlSession获得映射对象，并执行映射对象映射的sql，并返回映射结果<br>    BrandMapper mapper &#x3D; sqlSession.getMapper(BrandMapper.class);<br>    Brand brand &#x3D; mapper.selectById(1);<br>&#x2F;&#x2F;        5.打印<br>    System.out.println(brand);<br>&#x2F;&#x2F;        6.关闭sqlSession，释放资源<br>    sqlSession.close();<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 7.MyBatis核心配置文件</span><br><span class="line"></span><br><span class="line">**学习目标**</span><br><span class="line"></span><br><span class="line">● 了解MyBatis核心对象的作用</span><br><span class="line"></span><br><span class="line">● 熟悉MyBatis配置文件中各个元素的作用</span><br><span class="line"></span><br><span class="line">● 掌握MyBatis映射文件中常用元素的使用</span><br><span class="line"></span><br><span class="line">## 7.1 MyBatis核心对象</span><br><span class="line"></span><br><span class="line">两个**核心对象**：**SqlSessionFactory**和**SqlSession**</span><br><span class="line"></span><br><span class="line">**持久层：**可以理解成**数据**保存在**数据库**或者**硬盘**一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把**数据**存在**持久化设备**上，**mybatis**就是持久层。</span><br><span class="line"></span><br><span class="line">- **SqlSessionFactory：**单个数据库映射关系经过编译后的**内存镜像**，是SqlSession对象工厂，可由**SqlSessionFactoryBuilder**对象创建。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    //        1.读取配置信息</span><br><span class="line">            InputStream resource = Resources.getResourceAsStream(&quot;mybatis_config.xml&quot;);</span><br><span class="line">    //        2.构造SqlSessionFactory对象</span><br><span class="line">            SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(resource);</span><br></pre></td></tr></table></figure><strong>SqlSessionFactory对象</strong>是线程安全的，它一旦被创建，在<strong>整个应用执行期间</strong>都会存在。如果我们<strong>多次</strong>地创建同一个<strong>数据库</strong>的<strong>SqlSessionFactory</strong>，那么此<strong>数据库的资源</strong>将很容易被<strong>耗尽</strong>。为了解决此问题，通常<strong>每一个数据库</strong>都会只对应一个<strong>SqlSessionFactory</strong>，所以在构建<strong>SqlSessionFactory</strong>实例时，建议使用<strong>单列模式。</strong></li></ul></li><li><p><strong>SqlSession</strong>：主要作用是执行<strong>持久化操作</strong>，线程不安全，<strong>SqlSession</strong>对象包含了数据库中所有执行SQL操作的方法，由于其底层封装了JDBC连接，所以可以直接使用其实例来执行已映射的SQL语句。</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650209558822.png" alt="1650209558822"></li><li>Sqlsession有很多sql方法，和事务方法，<T> T getMapper(Class<T> type)；可以获得关联sqlsession的Mapper接口代理对象，Connection getConnection()；获得jdbc数据库连接0</li><li>工具类获得sqlsession</li><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650210275690.png" alt="1650210275690"></li></ul></li></ul><h2 id="7-2-配置文件的元素"><a href="#7-2-配置文件的元素" class="headerlink" title="7.2 配置文件的元素"></a>7.2 配置文件的元素</h2><ul><li><p>主要元素图表</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650210428139.png" alt="1650210428139"></li><li><strong>注意</strong>：配置的时候必须按图中从上向下配置</li></ul></li><li><p><strong><properties>元素：</strong>是一个配置属性的元素，<strong>用于连接外部属性表</strong>。</p></li><li><p><strong><settings>元素：</strong>主要用于改变MyBatis运行时的行为，例如开启二级缓存、开启延迟加载等。</p><ul><li>常见配置</li><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650210873024.png" alt="1650210873024"></li></ul></li><li><p><strong><typeAliases>元素：</strong>设置别名。</p><ul><li><p><strong>单个类别名设置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;brand&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itzjc.pojo.Brand&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表示可以用brand来表示com.itzjc.pojo.Brand这个类，如果alias没写，则默认为brand。</p></li><li><p><strong>单个类注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多个类别名设置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itzjc.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首字母小写的非限定类名来作为它的别名，例如，brand。</p><p><strong>注意：</strong>上述方式的别名只适用于没有使用注解的情况，如果在程序中使用了注解，则别名为其注解的值。</p></li><li><p><strong>默认别名</strong></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650211795207.png" alt="1650211795207"></p></li></ul></li><li><p><strong><typeHandler>元素：</strong>将预处理语句中传入的参数从<strong>javaType（Java类型）</strong>转换为<strong>jdbcType（JDBC类型）</strong>，或者从数据库取出结果时将<strong>jdbcType</strong>转换为<strong>javaType</strong>。</p><ul><li><p>默认类型处理器</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650212147905.png" alt="1650212147905"></p></li><li><p>自定义类型处理器</p><ul><li><p>单个类的类型处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.itzjc.pojo.Brand&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>整个包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itzjc.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong><objectFactory>元素</strong>：<strong>实例化目标类</strong>，它既可以通过默认构造方法实例化，也可以在参数映射存在的时候通过参数构造方法来实例化。</p><ul><li><p>覆盖默认行为</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650265886766.png" alt="1650265886766"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650265919856.png" alt="1650265919856"></p></li></ul></li><li><p><strong><plugins>元素：</strong>配置用户所开发的插件。</p></li><li><p><strong><environments>元素：</strong>通过<environments>元素配置<strong>多种数据源</strong>，即配置<strong>多种数据库</strong>。</p><ul><li>&#96;&#96;&#96;xml<!-- environments:配置数据库的连接环境信息，可复制多个environments，通过default切换不同环境--><environments default="mysql">    <environment id="mysql">        <transactionManager type="JDBC"/>        <!--            dataSource type：数据库连接池-->        <dataSource type="POOLED">            <!--数据库连接信息-->            <property name="driver" value="com.mysql.cj.jdbc.Driver"/>            <property name="url" value="jdbc:mysql://127.0.0.1:3306/dbl2?serverTimezone=GMT%2B8"/>            <property name="username" value="root"/>            <property name="password" value="0614"/>        </dataSource>    </environment></environments><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - default：根据切换environment的id值，从而切换数据库</span><br><span class="line"></span><br><span class="line">  - transactionManager：事务管理</span><br><span class="line"></span><br><span class="line">    - MyBatis两种事务管理器：**JDBC**和**MANAGED**</span><br><span class="line">    - **JDBC：**此配置直接使用了JDBC的**提交**和**回滚**设置，它依赖于从**数据源**得到的**连接**来**管理事务**的作用域。</span><br><span class="line">    - **MANAGED：**此配置从来**不提交或回滚一个连接**，而是让**容器来管理事务**的整个生命周期。在默认情况下，它会**关闭连接**，但一些容器并不希望这样，为此可以将**closeConnection属性设置为false**来阻止它默认的关闭行为。</span><br><span class="line">    - **注意：**如果项目中使用的是**Spring+ MyBatis**，则没有必要在MyBatis中配置事务管理器，因为实际开发中，会使用**Spring自带的管理器**来实现**事务管理**。</span><br><span class="line"></span><br><span class="line">  - dataSource：用于配置数据源</span><br><span class="line"></span><br><span class="line">    - **MyBatis框架提供了UNPOOLED、POOLED和JNDI三种数据源类型**</span><br><span class="line">    - **UNPOOLED：**配置此数据源类型后，在每次被请求时会打开和关闭连接。它对没有性能要求的简单应用程序是一个很好的选择。</span><br><span class="line">      - 配置属性</span><br><span class="line">      - ![1650266919471](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650266919471.png)</span><br><span class="line">    - **POOLED：**这种方式使得并发Web应用可以快速地响应请求，是当前流行的处理方式。</span><br><span class="line">      - 额外可配置属性</span><br><span class="line">      - ![1650267041817](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650267041817.png)</span><br><span class="line">    - **JNDI：**此数据源可以在EJB或应用服务器等容器中使用。容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用。</span><br><span class="line">      - 需要配置属性</span><br><span class="line">      - ![1650267136273](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650267136273.png)</span><br><span class="line"></span><br><span class="line">- **&lt;mappers&gt;元素：**用于指定MyBatis映射文件的位置</span><br><span class="line"></span><br><span class="line">  - **四种配置方式**</span><br><span class="line"></span><br><span class="line">    - 类路径</span><br><span class="line"></span><br><span class="line">      ```xml</span><br><span class="line">      &lt;mapper resource=&quot;com/itzjc/mapper/UserMapper.xml&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li><p>本地文件路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;本地文件路径&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>本地接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itzjc.mapper.BrandMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>包名引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itzjc.mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="7-3-映射文件中常用的元素"><a href="#7-3-映射文件中常用的元素" class="headerlink" title="7.3 映射文件中常用的元素"></a>7.3 映射文件中常用的元素</h2><p>映射文件是MyBatis框架中十分重要的文件，可以说，MyBatis框架的强大之处就体现在映射文件的编写上。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650267626150.png" alt="1650267626150"></p><ul><li><p>**<mapper>**：是映射文件的根元素</p><ul><li>namespace属性：映射文件的文件地址</li></ul></li><li><p><strong><select>：</strong>映射查询语句。</p><ul><li><pre><code class="xml">&lt;select id=&quot;selectById&quot; resultType=&quot;com.itzjc.pojo.Brand&quot; parameterType=&quot;integer&quot;&gt;        select * from tb_brand where id = #&#123;id&#125;;&lt;/select&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **常用属性**</span><br><span class="line"></span><br><span class="line">    - ![1650267989625](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650267989625.png)</span><br><span class="line"></span><br><span class="line">- **&lt;insert&gt;：**用于映射插入语句</span><br><span class="line"></span><br><span class="line">  - 属性与select大部分相同，还含有3个特有属性</span><br><span class="line">    - ![1650268174291](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650268174291.png)</span><br><span class="line"></span><br><span class="line">- **&lt;update&gt;元素和&lt;delete&gt;元素**</span><br><span class="line"></span><br><span class="line">- **&lt;sql&gt;元素：**定义可重用的SQL代码片段</span><br><span class="line"></span><br><span class="line">  - 例如查找的对象为可重复sql</span><br><span class="line"></span><br><span class="line">    ```xml</span><br><span class="line">    &lt;sql id=&quot;brandColumns&quot;&gt;id,brand_name,ordered&lt;/sql&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;selectById&quot; resultType=&quot;com.itzjc.pojo.Brand&quot; parameterType=&quot;integer&quot;&gt;</span><br><span class="line">            select &lt;include refid=&quot;brandColumns&quot;/&gt; from tb_brand where id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可选sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    定义表的前缀名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        $&#123;prefix&#125;brand</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    定义要查询的表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;someInclude&quot;</span>&gt;</span></span><br><span class="line">        from <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;$&#123;include_target&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    定义查询列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brandColumns&quot;</span>&gt;</span></span><br><span class="line">        id,brand_name,ordered</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itzjc.pojo.Brand&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">            select</span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;brandColumns&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;someInclude&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tb_&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;include_target&quot;</span> <span class="attr">value</span>=<span class="string">&quot;brand&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码中，定义了3个代码片段，分别为表的前缀名、要查询的表和需要查询的列。前两个代码片段中，分别获取了<include>子元素<property>中的值，其中第1个代码片段中的“${prefix}”会获取name为prefix的值“t_”，获取后所组成的表名为“t_customer”；而第2个代码片段的“${include_target}”会获取name为include_target的值“tablename”，由于tablename为第1个SQL片段的id值，所以最后要查询的表为“t_customer”。所有的SQL片段在程序运行时，都会由MyBatis组合成SQL语句来执行需要的操作。</p></li></ul></li><li><p><resultMap>：定义映射规则、级联的更新以及定义类型转化器等。</p><ul><li><p><strong>结构</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>       <span class="comment">&lt;!--type属性表示需要映射的POJO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span>               <span class="comment">&lt;!--类在实例化时，用来注入结果的构造方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span>/&gt;</span>                <span class="comment">&lt;!--id参数；标记结果作为id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span>/&gt;</span>                  <span class="comment">&lt;!--注入到构造方法的一个普通结果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span>                       <span class="comment">&lt;!--用于表示哪个列是主键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>/&gt;</span>                   <span class="comment">&lt;!--注入到字段或Javabean属性的普通结果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>/&gt;</span>  <span class="comment">&lt;!--一对一关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>/&gt;</span>   <span class="comment">&lt;!--一对多关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="comment">&lt;!--使用结果值来决定哪个结果的映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span>        <span class="comment">&lt;!--基于某些值的结果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当数据库表数据列明与pojo对象名不一致时，可修改映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itzjc.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="8-动态sql"><a href="#8-动态sql" class="headerlink" title="8.动态sql"></a>8.动态sql</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650278202256.png" alt="1650278202256"></p><ul><li><if> <ul><li><p>多项条件选择查询，因为给的where 1&#x3D;1，所有默认为查询所有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">       select * from tb_brand where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand.id != null&quot;</span>&gt;</span></span><br><span class="line">            and id = #&#123;brand.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and brand_name like concat(&#x27;%&#x27;,#&#123;brand.brandName&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and company_name like concat(&#x27;%&#x27;,#&#123;brand.companyName&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><choose>、<when>、<otherwise> 类似switch…case…default</p><ul><li><p>单项条件查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and brand_name like concat(&#x27;%&#x27;,#&#123;brand.brandName&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and company_name like concat(&#x27;%&#x27;,#&#123;brand.companyName&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and brand is not null;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当满足第一个when时不会执行下面的when。</p></li></ul></li><li><p><where>、<trim></p><ul><li><p><where>可以使sql不加1 &#x3D; 1实现where and 的连接，即检测到where and连在一起时自动删除and。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and brand_name like concat(&#x27;%&#x27;,#&#123;brand.brandName&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and company_name like concat(&#x27;%&#x27;,#&#123;brand.companyName&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and brand is not null;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><trim>可以去除一些特殊字符</p><ul><li>&#96;&#96;&#96;xml<select id="select" resultMap="resultMap" parameterType="brand">    select * from tb_brand    <trim prefix="where" prefixOverrides="and">        <choose>            <when test="brand.brandName != null and brand.brandName != ''">                and brand_name like concat('%',#{brand.brandName},'%')            </when>            <when test="brand.companyName != null and brand.companyName != ''">                and company_name like concat('%',#{brand.companyName},'%')            </when>            <otherwise>                and brand is not null;            </otherwise>        </choose>    </trim></select><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;set&gt;在动态包含的SQL语句前输出一个SET关键字，并将SQL语句中**最后一个多余的逗号**去除。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;update id=&quot;setBrand&quot; parameterType=&quot;brand&quot;&gt;</span><br><span class="line">        update tb_brand</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test=&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;&gt;</span><br><span class="line">                brand_name = #&#123;brand.brandName&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;&gt;</span><br><span class="line">                company_name = #&#123;brand.companyName&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">            where id = #&#123;brand.id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><foreach><ul><li><p>查找id在in（0,1,2,3）内的brand</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByIds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int[]&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>collection传参</p><p>（1）如果传入的是<strong>单参数</strong>且参数类型是一个数组或者List的时候，collection属性值分别为<strong>array和list</strong>（或collection）。</p><p>（2）如果传入的参数是多个的时候，就需要把它们<strong>封装成一个Map</strong>了，当然单参数也可以封装成Map集合，这时候collection属性值就为<strong>Map的键</strong>。</p><p>（3）如果传入的参数是<strong>POJO包装类</strong>的时候，collection属性值就为该包装类中需要进行遍历的<strong>数组或集合</strong>的属性名。</p></li></ul></li><li><p><bind>模糊查询编写</p><ul><li>&#96;&#96;&#96;xml<select id="selectByBrandName" resultMap="resultMap" parameterType="string">    <bind name="brandName" value="'%' + brandName + '%'"/>    select * from tb_brand where brand_name like #{brandName}</select><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">      name:定义变量        value：该变量的值</span><br><span class="line"></span><br><span class="line"># 9.MyBatis的关联映射</span><br><span class="line"></span><br><span class="line">学习目标</span><br><span class="line"></span><br><span class="line">● 了解数据表之间以及对象之间的三种关联关系</span><br><span class="line"></span><br><span class="line">● 熟悉关联关系中的嵌套查询和嵌套结果</span><br><span class="line"></span><br><span class="line">● 掌握一对一、一对多和多对多关联映射的使用</span><br><span class="line"></span><br><span class="line">## 9.1 关联关系</span><br><span class="line"></span><br><span class="line">- **多表之间的关联：**在关系型数据库中，多表之间存在着三种关联关系，分别为**一对一**、**一对多**和**多对多**。</span><br><span class="line">  - ![1650368502260](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650368502260.png)</span><br><span class="line">  - **· 一对一：**在任意一方引入对方主键作为外键。</span><br><span class="line">  - **· 一对多：**在“多”的一方，添加“一”的一方的主键作为外键。</span><br><span class="line">  - **· 多对多：**产生中间关系表，引入两张表的主键作为外键，两个主键成为联合主键或使用新的字段作为主键。</span><br><span class="line">- **java中的关系描述**</span><br><span class="line">  - ![1650368644241](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650368644241.png)</span><br><span class="line">  - **· 一对一的关系：**就是在本类中定义对方类型的对象，如A类中定义B类类型的属性b, B类中定义A类类型的属性a。</span><br><span class="line">  - **· 一对多的关系：**就是一个A类类型对应多个B类类型的情况，需要在A类中以集合的方式引入B类类型的对象，在B类中定义A类类型的属性a。</span><br><span class="line">  - **· 多对多的关系：**在A类中定义B类类型的集合，在B类中定义A类类型的集合。</span><br><span class="line"></span><br><span class="line">## 9.2嵌套查询和嵌套结果</span><br><span class="line"></span><br><span class="line">MyBatis在映射文件中加载关联关系对象主要通过两种方式：嵌套查询和嵌套结果。</span><br><span class="line"></span><br><span class="line">- **嵌套查询**是指通过执行另外一条SQL映射语句来返回预期的复杂类型；</span><br><span class="line">- **嵌套结果**是使用嵌套结果映射来处理重复的联合结果的子集。</span><br><span class="line">- 开发人员可以使用上述任意一种方式实现对关联关系的加载。</span><br><span class="line"></span><br><span class="line">## 9.3 一对一</span><br><span class="line"></span><br><span class="line">- &lt;association&gt;可处理一对一的关系</span><br><span class="line"></span><br><span class="line">  - 可以配置属性</span><br><span class="line"></span><br><span class="line">    - **· property：**指定映射到的实体类对象属性，与表字段一一对应。</span><br><span class="line">    - **· column：**指定表中对应的字段。</span><br><span class="line">    - **· javaType：**指定映射到实体对象属性的类型。</span><br><span class="line">    - **· select：**指定引入嵌套查询的子SQL语句，该属性用于关联映射中的嵌套查询。</span><br><span class="line">    - **· fetchType：**指定在关联查询时是否启用延迟加载。fetchType属性有lazy和eager两个属性值，默认值为lazy（即默认关联映射延迟加载）。</span><br><span class="line"></span><br><span class="line">  - **需求：**查询个人及其关联的身份证信息是先通过查询个人表中的主键来获个人信息，然后通过表中的外键，来获取证件表中的身份证号信息。</span><br><span class="line"></span><br><span class="line">  - **1.创建数据表**</span><br><span class="line"></span><br><span class="line">    - ```sql</span><br><span class="line">      #创建一个身份证卡表</span><br><span class="line">      CREATE TABLE tb_idcard(</span><br><span class="line">      id Int PRIMARY KEY auto_increment,</span><br><span class="line">      code VARCHAR(18)</span><br><span class="line">      );</span><br><span class="line">      #创建个人表</span><br><span class="line">      CREATE TABLE tb_person(</span><br><span class="line">      id int PRIMARY KEY auto_increment,</span><br><span class="line">      NAME VARCHAR(32),</span><br><span class="line">      age INT,</span><br><span class="line">      sex VARCHAR(2),</span><br><span class="line">      card_id INT UNIQUE,</span><br><span class="line">      #设计外键</span><br><span class="line">      FOREIGN KEY(card_id) REFERENCES tb_idcard(id)</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      #插入身份证数据</span><br><span class="line">      INSERT INTO tb_idcard(code) VALUES(&#x27;123456789&#x27;);</span><br><span class="line">      INSERT INTO tb_idcard(code) VALUES(&#x27;987654321&#x27;);</span><br><span class="line">      #插入个人信息</span><br><span class="line">      INSERT INTO tb_person(NAME,age,sex,card_id) VALUES(&#x27;Rose&#x27;,29,&#x27;女&#x27;,1);</span><br><span class="line">      INSERT INTO tb_person(NAME,age,sex,card_id) VALUES(&#x27;Tom&#x27;,28,&#x27;男&#x27;,2);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.创建pojo类</p><ul><li><p>IdCard类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;IdCard&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>person类，注意：card_id只是个连接idcard的外键，可将外键属性直接关联证据类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Character sex;</span><br><span class="line">    <span class="keyword">private</span> IdCard idCard;<span class="comment">//个人关联的证件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IdCard <span class="title function_">getIdCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdCard</span><span class="params">(IdCard idCard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.idCard = idCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Character <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(Character sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, idCard=&quot;</span> + idCard +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.创建接口及映射文件</p><ul><li><p>idcardMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IdCardMapper</span> &#123;</span><br><span class="line">    IdCard <span class="title function_">findCodeById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>personMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> &#123;</span><br><span class="line">    Person <span class="title function_">findPersonById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写下查找idcard的sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.IdCardMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findCodeById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;IdCard&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_idcard where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>嵌套查询</strong>，嵌入IdCard sql返回值为property&#x3D;”idCard”，查找的id为column&#x3D;”card_id”，返回类为javaType&#x3D;”IdCard”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.PersonMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--嵌套查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;IdCardWithPerson&quot;</span> <span class="attr">type</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置表的一对一关系，select属性引入另外一条sql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;idCard&quot;</span> <span class="attr">column</span>=<span class="string">&quot;card_id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;IdCard&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itzjc.mapper.IdCardMapper.findCodeById&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPersonById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;IdCardWithPerson&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_person where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>调试</strong></p><ul><li>&#96;&#96;&#96;java<br>public class IdWithPersonTest {<br>@Test<br>public void findPersonByIdTest() throws Exception {<br>    &#x2F;&#x2F;1.读取文件<br>    InputStream inputStream &#x3D; Resources.getResourceAsStream(“mybatis_config.xml”);<br>    &#x2F;&#x2F;2.获得sqlSessionFactory工厂对象<br>    SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);<br>    &#x2F;&#x2F;3.获得sqlSession对象<br>    SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();<br>    &#x2F;&#x2F;4.获得mapper接口<br>    PersonMapper personMapper &#x3D; sqlSession.getMapper(PersonMapper.class);<br>    &#x2F;&#x2F;5.调用方法<br>    Person personById &#x3D; personMapper.findPersonById(1);<br>    System.out.println(personById);<br>    &#x2F;&#x2F;6.关闭sqlSession对象<br>    sqlSession.close();<br><br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 结果</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    Person&#123;id=1, name=&#x27;Rose&#x27;, age=29, sex=女, idCard=IdCard&#123;id=1, code=123456789&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>嵌套结果：</strong>不用另外写sql，直接一条sql查询</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.itzjc.mapper.PersonMapper&quot;&gt;    &lt;!--嵌套结果--&gt;    &lt;resultMap id=&quot;IdCardWithPerson&quot; type=&quot;person&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;        &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;        &lt;result property=&quot;sex&quot; column=&quot;sex&quot;/&gt;        &lt;association property=&quot;idCard&quot; javaType=&quot;IdCard&quot;&gt;            &lt;id property=&quot;id&quot; column=&quot;card_id&quot;/&gt;            &lt;result property=&quot;code&quot; column=&quot;code&quot;/&gt;        &lt;/association&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;findPersonById&quot; resultMap=&quot;IdCardWithPerson&quot; parameterType=&quot;integer&quot;&gt;                select p.*,idcard.code from tb_person p,tb_idcard idcard where p.card_id = idcard.id and p.id = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **MyBatis延迟加载的配置**</span><br><span class="line"></span><br><span class="line">  - mybatis_config.xml</span><br><span class="line"></span><br><span class="line">    ```xml</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--打开延迟加载的开关--&gt;</span><br><span class="line">        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;!--将积极加载改为消息加载，即按需加载--&gt;</span><br><span class="line">        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><association>元素默认属性fetchType&#x3D;”lazy”（属性fetchType&#x3D;”eager”表示立即加载）。</p></li></ul></li></ul></li></ul><h2 id="9-4一对多"><a href="#9-4一对多" class="headerlink" title="9.4一对多"></a>9.4一对多</h2><p>一个人对应多个订单</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650377820575.png" alt="1650377820575"></p><ul><li><collection>- ![1650377944432](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650377944432.png)<ul><li><p>ofType对应<association>的javaType</p></li><li><p>法一：嵌入查询</p><ul><li><p>定义user</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Orders&gt; orders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Orders&gt; <span class="title function_">getOrders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrders</span><span class="params">(List&lt;Orders&gt; orders)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orders = orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orders=&quot;</span> + orders +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义orders查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrdersMapper</span> &#123;</span><br><span class="line">    List&lt;Orders&gt; <span class="title function_">findOrdersByUserId</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOrdersByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Orders&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">            select * from tb_orders where user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将order查询结果嵌入user查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">findUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itzjc.mapper.OrdersMapper.findOrdersByUserId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            select *</span><br><span class="line">            from tb_user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>法二：嵌套结果</p><ul><li><p>定义user类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Orders&gt; orders;<span class="comment">//一对多</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Orders&gt; <span class="title function_">getOrders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrders</span><span class="params">(List&lt;Orders&gt; orders)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orders = orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orders=&quot;</span> + orders +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌入结果sql</p><ul><li>&#96;&#96;&#96;xml<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.itzjc.mapper.UserMapper"><pre><code>&lt;resultMap id=&quot;userMap&quot; type=&quot;user&quot;&gt;    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;    &lt;result property=&quot;userName&quot; column=&quot;username&quot;/&gt;    &lt;result property=&quot;address&quot; column=&quot;address&quot;/&gt;    &lt;!--嵌入结果 property对应User属性，ofType对应属性的类型--&gt;    &lt;collection property=&quot;orders&quot; ofType=&quot;orders&quot;&gt;        &lt;!--嵌入结果的主键--&gt;        &lt;id property=&quot;id&quot; column=&quot;order_id&quot;/&gt;        &lt;!--嵌入结果的number属性--&gt;        &lt;result property=&quot;number&quot; column=&quot;number&quot;/&gt;    &lt;/collection&gt;    &lt;/resultMap&gt;&lt;!--多表查询的sql--&gt;&lt;select id=&quot;findUserById&quot; resultMap=&quot;userMap&quot;&gt;    select u.*,orders.id as order_id,orders.number from tb_user u ,tb_orders orders where u.id = orders.user_id and u.id=#&#123;id&#125;&lt;/select&gt;</code></pre></mapper><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 9.5 多对多</span><br><span class="line"></span><br><span class="line">![1650451860836](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650451860836.png)</span><br><span class="line"></span><br><span class="line">- 1.创建数据库表的多对多关系</span><br><span class="line"></span><br><span class="line">  - 一个商品对应有多个订单，一个订单对应有多个商品</span><br><span class="line"></span><br><span class="line">    ```sql</span><br><span class="line">    #创建product表</span><br><span class="line">    CREATE TABLE tb_product(</span><br><span class="line">    id Int PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(32),</span><br><span class="line">    price DOUBLE</span><br><span class="line">    );</span><br><span class="line">    INSERT INTO tb_product VALUES(&#x27;1&#x27;,&#x27;java基础入门&#x27;,&#x27;44.5&#x27;);</span><br><span class="line">    INSERT INTO tb_product VALUES(&#x27;2&#x27;,&#x27;java web程序开发入门&#x27;,&#x27;38.5&#x27;);</span><br><span class="line">    INSERT INTO tb_product VALUES(&#x27;3&#x27;,&#x27;ssm框架整合实战&#x27;,&#x27;50&#x27;);</span><br><span class="line">    #创建中间表</span><br><span class="line">    CREATE TABLE tb_ordersitem(</span><br><span class="line">    id Int PRIMARY KEY auto_increment,</span><br><span class="line">    orders_id INT,</span><br><span class="line">    product_id INT,</span><br><span class="line">    FOREIGN KEY (orders_id) REFERENCES tb_orders(id),</span><br><span class="line">    FOREIGN KEY (product_id) REFERENCES tb_product(id)</span><br><span class="line">    );</span><br><span class="line">    INSERT INTO tb_ordersitem VALUES (&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;);</span><br><span class="line">    INSERT INTO tb_ordersitem VALUES (&#x27;2&#x27;,&#x27;1&#x27;,&#x27;3&#x27;);</span><br><span class="line">    INSERT INTO tb_ordersitem VALUES (&#x27;3&#x27;,&#x27;3&#x27;,&#x27;3&#x27;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>数据表关系</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650457418085.png" alt="1650457418085"></p></li></ul></li><li><p>2.需求：查找id为3的产品及其对应的订单</p><ul><li><p>嵌入查询</p><ul><li><p>1.编写嵌入的订单集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrdersMapper</span> &#123;</span><br><span class="line">    List&lt;Orders&gt; <span class="title function_">findOrdersByUserId</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOrdersByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Orders&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">            select * from tb_orders where id in</span><br><span class="line">        <span class="comment">&lt;!--查找商品id=？对应的订单orders_id--&gt;</span></span><br><span class="line">        (select orders_id from tb_ordersitem where product_id = #&#123;id&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2.嵌入到商品查询中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findProductById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itzjc.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ProductMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--嵌入findOrdersByUserId查询的结果到ordersList集合属性中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;ordersList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itzjc.mapper.OrdersMapper.findOrdersByUserId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ProductMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_product where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>嵌入结果</p><ul><li>&#96;&#96;&#96;java<br>public interface ProductMapper {<br>List<Product> findProductById(int id);<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.itzjc.mapper.ProductMapper&quot;&gt;</span><br><span class="line">    &lt;resultMap id=&quot;ProductMap&quot; type=&quot;product&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;price&quot; column=&quot;price&quot;/&gt;</span><br><span class="line">        &lt;!--嵌入结果的数据--&gt;</span><br><span class="line">        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot;&gt;</span><br><span class="line">            &lt;id property=&quot;id&quot; column=&quot;oid&quot;/&gt;</span><br><span class="line">            &lt;result property=&quot;number&quot; column=&quot;number&quot;/&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;findProductById&quot; resultMap=&quot;ProductMap&quot; parameterType=&quot;integer&quot;&gt;</span><br><span class="line">        &lt;!--多表查询sql--&gt;</span><br><span class="line">        select p.*,o.id as oid ,o.number from tb_product p,tb_ordersitem oi,tb_orders o</span><br><span class="line">        where p.id = oi.product_id and o.id = oi.orders_id and p.id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="10-MyBatis与Spring整合"><a href="#10-MyBatis与Spring整合" class="headerlink" title="10.MyBatis与Spring整合"></a>10.MyBatis与Spring整合</h1><p>学习目标</p><p>● 掌握传统DAO方式的开发整合</p><p>● 掌握Mapper接口方式的开发整合</p><h2 id="10-1整合配置"><a href="#10-1整合配置" class="headerlink" title="10.1整合配置"></a>10.1整合配置</h2><ul><li><p>导入坐标</p><ul><li>&#96;&#96;&#96;xml<dependencies>    <!--Spring Ioc-->    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-context</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <!--Spring AOP-->    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-aop</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <dependency>        <groupId>aopalliance</groupId>        <artifactId>aopalliance</artifactId>        <version>1.0</version>    </dependency>    <dependency>        <groupId>org.aspectj</groupId>        <artifactId>aspectjweaver</artifactId>        <version>1.8.10</version>    </dependency>    <!--JDBC 与 tx 与 mysql-->    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-jdbc</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-tx</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <dependency>        <groupId>mysql</groupId>        <artifactId>mysql-connector-java</artifactId>        <version>8.0.16</version>    </dependency>    <!--mybatis-->    <dependency>        <groupId>org.mybatis</groupId>        <artifactId>mybatis</artifactId>        <version>3.5.5</version>    </dependency>    <!--mybatis与Spring的中间jar-->    <dependency>        <groupId>org.mybatis</groupId>        <artifactId>mybatis-spring</artifactId>        <version>1.3.1</version>    </dependency>    <!--连接池-->    <dependency>        <groupId>com.alibaba</groupId>        <artifactId>druid</artifactId>        <version>1.1.12</version>    </dependency></dependencies><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- application.xml   Spring配置</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">           xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">           xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">           xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">           xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">           xsi:schemaLocation=&quot;</span><br><span class="line">           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span><br><span class="line">    &quot;&gt;</span><br><span class="line">        &lt;!--读取属性文件--&gt;</span><br><span class="line">        &lt;context:property-placeholder location=&quot;jdbc.properties&quot;/&gt;</span><br><span class="line">        &lt;!--配置数据源--&gt;</span><br><span class="line">        &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.user&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;initialSize&quot; value=&quot;$&#123;jdbc.initialSize&#125;&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">        &lt;!--事务管理器，依赖于数据源--&gt;</span><br><span class="line">        &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">        &lt;!--开始事务注解--&gt;</span><br><span class="line">        &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class="line">        &lt;!--配置MyBatis工厂--&gt;</span><br><span class="line">        &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">            &lt;!--注入数据源--&gt;</span><br><span class="line">            &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">            &lt;!--指定核心配置文件位置--&gt;</span><br><span class="line">            &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis_config.xml&quot;/&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JDBC属性文件</p><ul><li>&#96;&#96;&#96;properties<br>jdbc.driver &#x3D; com.mysql.cj.jdbc.Driver<br>jdbc.url &#x3D; jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;dbl2?serverTimezone&#x3D;GMT%2B8&amp;useSSL&#x3D;false&amp;useServerPrepStmts&#x3D;true<br>jdbc.user &#x3D; root<br>jdbc.password &#x3D; 0614<br>#数据库连接池的最大连接数（maxTotal）<br>jdbc.maxTotal &#x3D; 30<br>#最大空闲连接数（maxIdle）<br>jdbc.maxIdle &#x3D; 10<br>#初始化连接数（initialSize）<br>jdbc.initialSize &#x3D; 5<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- mybatis_config</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">    &lt;!DOCTYPE configuration</span><br><span class="line">            PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">            &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;settings&gt;</span><br><span class="line">            &lt;!--打开延迟加载的开关--&gt;</span><br><span class="line">            &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!--将积极加载改为消息加载，即按需加载--&gt;</span><br><span class="line">            &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/settings&gt;</span><br><span class="line">        &lt;!-- 起别名 --&gt;</span><br><span class="line">        &lt;typeAliases&gt;</span><br><span class="line">            &lt;package name=&quot;com.itzjc.pojo&quot;/&gt;</span><br><span class="line">        &lt;/typeAliases&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;mappers&gt;</span><br><span class="line">            &lt;package name=&quot;com.itzjc.mapper&quot;/&gt;</span><br><span class="line">        &lt;/mappers&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="10-2-传统DAO方式整合"><a href="#10-2-传统DAO方式整合" class="headerlink" title="10.2 传统DAO方式整合"></a>10.2 传统DAO方式整合</h2><h2 id="10-3-基于MapperFactoryBean的整合"><a href="#10-3-基于MapperFactoryBean的整合" class="headerlink" title="10.3 基于MapperFactoryBean的整合"></a>10.3 基于MapperFactoryBean的整合</h2><p><strong>MapperFactoryBean</strong>是MyBatis-Spring团队提供的一个用于根据<strong>Mapper</strong>接口生成<strong>Mapper对象</strong>的类，该类在Spring配置文件中使用时可以配置以下参数。</p><ul><li><p><strong>· mapperInterface：</strong>用于指定接口。</p></li><li><p><strong>· SqlSessionFactory：</strong>用于指定SqlSessionFactory。</p></li><li><p><strong>· SqlSessionTemplate：</strong>用于指定SqlSessionTemplate。如果与SqlSessionFactory同时设定，则只会启用SqlSessionTemplate。</p></li><li><p>整合步骤</p><ul><li><p>创建Mapper接口</p><ul><li>&#96;&#96;&#96;java<br>public interface PersonMapper {<br>&#x2F;&#x2F;通过用户id查找客户<br>Person findPersonById(Integer id);<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 设置Mapper接口的配置文件</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;mapper namespace=&quot;com.itzjc.mapper.PersonMapper&quot;&gt;</span><br><span class="line">        &lt;!--根据id查找客户--&gt;</span><br><span class="line">        &lt;select id=&quot;findPersonById&quot; resultType=&quot;Person&quot; parameterType=&quot;integer&quot;&gt;</span><br><span class="line">            select *</span><br><span class="line">            from tb_person</span><br><span class="line">            where id = #&#123;id&#125;;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置Spring整合Mapper</p><ul><li>&#96;&#96;&#96;xml<!--配置Mapper代理开发(基于MapperFactoryBean)--><bean id="personMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">    <property name="mapperInterface" value="com.itzjc.mapper.PersonMapper"/>    <property name="sqlSessionFactory" ref="sqlSessionFactory"/></bean><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 测试</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public class DaoTest &#123;</span><br><span class="line">        @Test</span><br><span class="line">        public void MapperTest()&#123;</span><br><span class="line">            ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span><br><span class="line">            PersonMapper personMapper = (PersonMapper) context.getBean(&quot;personMapper&quot;);</span><br><span class="line">            Person personById = personMapper.findPersonById(1);</span><br><span class="line">            System.out.println(personById);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>脚下留心：</p><ul><li>Mapper接口编程方式只需要程序员编写Mapper接口（相当于DAO接口），然后由MyBatis框架根据接口的定义创建接口的动态代理对象，这个代理对象的方法体等同于10.2小节中DAO接口的实现类方法。虽然使用Mapper接口编程的方式很简单，但是在具体使用时还是需要遵循以下规范。<ul><li>（1）Mapper接口的名称和对应的Mapper.xml映射文件的名称必须一致。</li><li>（2）Mapper.xml文件中的namespace与Mapper接口的类路径相同（即接口文件和映射文件需要放在同一个包中）。</li><li>（3）Mapper接口中的方法名和Mapper.xml中定义的每个执行语句的id相同。</li><li>（4）Mapper接口中方法的输入参数类型要和Mapper.xml中定义的每个sql的parameterType的类型相同。</li><li>（5）Mapper接口方法的输出参数类型要和Mapper.xml中定义的每个sql的resultType的类型相同。</li></ul></li><li>只要遵循了这些开发规范，MyBatis就可以自动生成Mapper接口实现类的代理对象，从而简化我们的开发。</li></ul></li></ul><h1 id="10-SpringMVC入门"><a href="#10-SpringMVC入门" class="headerlink" title="10.SpringMVC入门"></a>10.SpringMVC入门</h1><p>学习目标</p><p>● 了解Spring MVC的特点</p><p>● 掌握Spring MVC入门程序的编写</p><p>● 熟悉Spring MVC的工作流程</p><h2 id="10-1-SpringMVC的特点"><a href="#10-1-SpringMVC的特点" class="headerlink" title="10.1 SpringMVC的特点"></a>10.1 SpringMVC的特点</h2><ul><li>是Spring框架的一部分，可以方便地利用Spring所提供的其他功能。</li><li>· 灵活性强，<strong>易于与其他框架集成</strong>。</li><li>· 提供了一个<strong>前端控制器DispatcherServlet</strong>，使开发人员无须额外开发控制器对象。</li><li>· <strong>可自动绑定用户输入</strong>，并能<strong>正确的转换数据类型</strong>。</li><li>· 内置了常见的校验器，可以<strong>校验用户输入</strong>。如果校验不能通过，那么就会重定向到输入表单。</li><li>· <strong>支持国际化。</strong>可以根据用户区域显示多国语言。</li><li>· <strong>支持多种视图技术</strong>。它支持JSP、Velocity和FreeMarker等视图技术。</li><li>· <strong>使用基于XML的配置文件</strong>，在编辑后，不需要重新编译应用程序。</li></ul><h2 id="10-2-入门程序编写"><a href="#10-2-入门程序编写" class="headerlink" title="10.2 入门程序编写"></a>10.2 入门程序编写</h2><ul><li><p>导入相关坐标</p><ul><li>&#96;&#96;&#96;xml<build>    <plugins>        <plugin>            <groupId>org.apache.tomcat.maven</groupId>            <artifactId>tomcat7-maven-plugin</artifactId>            <version>2.2</version>        </plugin>    </plugins></build><dependencies>    <dependency>        <groupId>javax.servlet</groupId>        <artifactId>javax.servlet-api</artifactId>        <version>3.1.0</version>        <scope>provided</scope>    </dependency>    <dependency>        <groupId>javax.servlet.jsp</groupId>        <artifactId>javax.servlet.jsp-api</artifactId>        <version>2.2.1</version>        <scope>provided</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-web</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-context</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-webmvc</artifactId>        <version>5.0.5.RELEASE</version>    </dependency></dependencies><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- web配置</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">             xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">             version=&quot;4.0&quot;&gt;</span><br><span class="line">        &lt;servlet&gt;</span><br><span class="line">    &lt;!--        配置前端过滤器--&gt;</span><br><span class="line">            &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;!--        初始化加载配置文件--&gt;</span><br><span class="line">            &lt;init-param&gt;</span><br><span class="line">                &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">                &lt;param-value&gt;classpath:springmvc_config.xml&lt;/param-value&gt;</span><br><span class="line">            &lt;/init-param&gt;</span><br><span class="line">    &lt;!--        表示容器在启动时立即加载的Servlet--&gt;</span><br><span class="line">            &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">        &lt;/servlet&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>springmvc_config.xml配置</p><ul><li>&#96;&#96;&#96;xml<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><!--    配置处理器Handle，映射“firstController”--><pre><code>&lt;bean name=&quot;/firstController&quot; class=&quot;com.itzjc.controller.FirstController&quot;/&gt;</code></pre><!--    处理器映射器，将处理器Handle的name作为url进行查找--><pre><code>&lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;</code></pre><!--    处理器适配器，配置对处理器中handleRequest()方法的调用--><pre><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</code></pre><!--    视图解析器--><pre><code>&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;/&gt;</code></pre></beans><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 编写web容器类</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public class FirstController implements Controller &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">            //创建modeAndView</span><br><span class="line">            ModelAndView modelAndView = new ModelAndView();</span><br><span class="line">            //像模型对象增加数据</span><br><span class="line">            modelAndView.addObject(&quot;msg&quot;,&quot;我的第一个SpringMVC程序&quot;);</span><br><span class="line">            //设计逻辑试图</span><br><span class="line">            modelAndView.setViewName(&quot;/first.jsp&quot;);</span><br><span class="line">            //返回</span><br><span class="line">            return modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写jsp</p><ul><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;    &lt;title&gt;入门程序&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello $&#123;msg&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10.3 springmvc工作流程</span><br><span class="line"></span><br><span class="line">![1650725442722](C:\Users\Administrator\Desktop\1650725442722.png)</span><br><span class="line"></span><br><span class="line">（1）用户通过浏览器向服务器发送请求，请求会被Spring MVC的前端控制器DispatcherServlet所拦截。</span><br><span class="line"></span><br><span class="line">（2）DispatcherServlet拦截到请求后，会调用HandlerMapping处理器映射器。</span><br><span class="line"></span><br><span class="line">（3）处理器映射器根据请求URL找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给DispatcherServlet。</span><br><span class="line"></span><br><span class="line">（4）DispatcherServlet会通过返回信息选择合适的HandlerAdapter（处理器适配器）。</span><br><span class="line"></span><br><span class="line">（5）HandlerAdapter会调用并执行Handler（处理器），这里的处理器指的就是程序中编写的Controller类，也被称之为后端控制器。</span><br><span class="line"></span><br><span class="line">（6）Controller执行完成后，会返回一个ModelAndView对象，该对象中会包含视图名或包含模型和视图名。</span><br><span class="line"></span><br><span class="line">（7）HandlerAdapter将ModelAndView对象返回给DispatcherServlet。</span><br><span class="line"></span><br><span class="line">（8）DispatcherServlet会根据ModelAndView对象选择一个合适的ViewReslover（视图解析器）。</span><br><span class="line"></span><br><span class="line">（9）ViewReslover解析后，会向DispatcherServlet中返回具体的View（视图）。</span><br><span class="line"></span><br><span class="line">（10）DispatcherServlet对View进行渲染（即将模型数据填充至视图中）。</span><br><span class="line"></span><br><span class="line">（11）视图渲染结果会返回给客户端浏览器显示。</span><br><span class="line"></span><br><span class="line"># 12.SpringMVC的核心类和注解</span><br><span class="line"></span><br><span class="line">学习目标</span><br><span class="line"></span><br><span class="line">● 了解Spring MVC核心类的作用</span><br><span class="line"></span><br><span class="line">● 掌握Spring MVC常用注解的使用</span><br><span class="line"></span><br><span class="line">## 12.1SpringMVC核心类和作用</span><br><span class="line"></span><br><span class="line">- DispatcherServlet</span><br><span class="line"></span><br><span class="line">## 12.2 常用注解</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Controller</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="xml">&lt;context:component-scan base-package=&quot;com.itzjc.controller&quot;/&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- @RequestMapping</span><br><span class="line"></span><br><span class="line">  - Spring通过@Controller注解找到相应的控制器类后，还需要知道控制器内部对每一个请求是如何处理的，这就需要使用org.springframework.web.bind.annotation.RequestMapping注解类型。RequestMapping注解类型用于映射一个请求或一个方法,可以使用该注解标注在一个方法或一个类上。</span><br><span class="line"></span><br><span class="line">  - **1.标注在方法上**</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      @Controller</span><br><span class="line">      public class FirstController &#123;</span><br><span class="line">          @RequestMapping(value = &quot;/firstController&quot;)</span><br><span class="line">          public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">              //创建modeAndView</span><br><span class="line">              ModelAndView modelAndView = new ModelAndView();</span><br><span class="line">              //像模型对象增加数据</span><br><span class="line">              modelAndView.addObject(&quot;msg&quot;,&quot;我的第一个SpringMVC程序&quot;);</span><br><span class="line">              //设计逻辑试图</span><br><span class="line">              modelAndView.setViewName(&quot;/first.jsp&quot;);</span><br><span class="line">              //返回</span><br><span class="line">              return modelAndView;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>- 通localhost:8080/Spring07_MVC01**/firstController链接访问**</code></pre></li><li><p><strong>2.标在类上</strong></p><ul><li><pre><code class="java">@Controller@RequestMapping(&quot;/hello&quot;)public class FirstController &#123;    @RequestMapping(value = &quot;/firstController&quot;)    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;        //创建modeAndView        ModelAndView modelAndView = new ModelAndView();        //像模型对象增加数据        modelAndView.addObject(&quot;msg&quot;,&quot;我的第一个SpringMVC程序&quot;);        //设计逻辑试图        modelAndView.setViewName(&quot;/first.jsp&quot;);        //返回        return modelAndView;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 访问路径**/hello/firstController**</span><br><span class="line"></span><br><span class="line">- **注解属性**</span><br><span class="line"></span><br><span class="line">  - ![1650812129267](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650812129267.png)</span><br><span class="line"></span><br><span class="line">- **组合注解**</span><br><span class="line"></span><br><span class="line">  - 需求：为了简化HTTP方法的映射</span><br><span class="line"></span><br><span class="line">  - **· @GetMapping：匹配GET方式的请求。**</span><br><span class="line"></span><br><span class="line">    - 等于</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      @RequestMapping(value = &quot;/firstController&quot;,method = RequestMethod.GET)</span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong>· @PostMapping：匹配POST方式的请求。</strong></p></li><li><p><strong>· @PutMapping：匹配PUT方式的请求。</strong></p></li><li><p><strong>· @DeleteMapping：匹配DELETE方式的请求。</strong></p></li><li><p><strong>· @PatchMapping：匹配PATCH方式的请求。</strong></p></li></ul></li><li><p><strong>请求处理方法的参数类型和返回类型</strong></p><ul><li><p>如：HttpSession类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;firstController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">session01</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    ..</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以出现类型</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>WebRequest或NativeWebRequest</li><li>java.util.Locale</li><li>java.util.TimeZone (Java 6+) &#x2F; java.time.ZoneId (onJava 8)</li><li>java.io.InputStream &#x2F; java.io.Reader</li><li>java.io.OutputStream &#x2F; java.io.Writer</li><li>org.springframework.http.HttpMethod</li><li>java.security.Principal</li><li>@PathVariable、@MatrixVariable、@RequestParam、@RequestHeader、@RequestBody、@RequestPart、@SessionAttribute、@RequestAttribute注解</li><li>HttpEntity&lt;? &gt;· java.util.Map &#x2F; org.springframework.ui.Model&#x2F;org.springframework.ui.ModelMap</li><li>org.springframework.web.servlet.mvc.support.RedirectAttributes</li><li>org.springframework.validation.Errors&#x2F;org.springframework.validation.BindingResult</li></ul></li><li><p>返回类型</p><ul><li>· ModelAndView· Model</li><li>· Map</li><li>· View</li><li>· String</li><li>· void</li><li>· HttpEntity&lt;? &gt;或ResponseEntity&lt;? &gt;</li><li>· Callable&lt;? &gt;</li><li>· DeferredResult&lt;? &gt;</li><li>其中ModelAndView类型中可以添加Model数据，并指定视图；</li><li>String类型的返回值可以跳转视图，但不能携带数据；</li><li>而void类型主要在异步请求时使用，它只返回数据，而不会跳转视图。</li></ul></li><li><p>重定向</p><ul><li><img src="C:\Users\Administrator\Desktop\1650813508076.png" alt="1650813508076"></li></ul></li><li><p>forward请求转发</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650813548038.png" alt="1650813548038"></li></ul></li></ul></li></ul></li></ul><h2 id="12-3-视图解析器"><a href="#12-3-视图解析器" class="headerlink" title="12.3 视图解析器"></a>12.3 视图解析器</h2><ul><li><p>Spring MVC中的视图解析器负责解析视图，可以通过在配置文件中定义一个ViewResolver来配置视图解析器</p><ul><li>&#96;&#96;&#96;xml<!--    定义视图解析器--><pre><code>&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</code></pre><!--        设置前缀--><pre><code>    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;</code></pre><!--        设置后缀--><pre><code>    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt;</code></pre></beans><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这样设置后，方法中所定义的view路径将可以简化。例如，入门案例中的逻辑视图名只需设置为**“first”**，而不再需要设置为**“/WEB-INF/jsp/first.jsp”**</span><br><span class="line"></span><br><span class="line">## 12.4 基于注解的Spring MVC应用</span><br><span class="line"></span><br><span class="line">- 配置web.xml</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">             xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">             version=&quot;4.0&quot;&gt;</span><br><span class="line">        &lt;servlet&gt;</span><br><span class="line">            &lt;!--        配置前端过滤器--&gt;</span><br><span class="line">            &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">            &lt;!--        初始化加载配置文件--&gt;</span><br><span class="line">            &lt;init-param&gt;</span><br><span class="line">                &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">                &lt;param-value&gt;classpath:springmvc_config.xml&lt;/param-value&gt;</span><br><span class="line">            &lt;/init-param&gt;</span><br><span class="line">            &lt;!--        表示容器在启动时立即加载的Servlet--&gt;</span><br><span class="line">            &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">        &lt;/servlet&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置springmvc_config.xml</p><ul><li>&#96;&#96;&#96;xml<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xmlns:context="http://www.springframework.org/schema/context"   xsi:schemaLocation="   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"><br><!--扫包--><br>&lt;context:component-scan base-package&#x3D;”controller”&#x2F;&gt;<br><!--定义视图--><br><bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"><br>    <property name="prefix" value="/WEB-INF/jsp/"/><br>    <property name="suffix" value=".jsp"/><br></bean></beans><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 注解使用</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @Controller</span><br><span class="line">    public class AController &#123;</span><br><span class="line">        @RequestMapping(&quot;/firstController&quot;)</span><br><span class="line">        public String handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse response, Model model)&#123;</span><br><span class="line">            //向模型注入数据</span><br><span class="line">            model.addAttribute(&quot;msg&quot;,&quot;HE&quot;);</span><br><span class="line">            //返回页面</span><br><span class="line">            return &quot;first&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>jsp地址</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650816641747.png" alt="1650816641747"></li></ul></li></ul><h1 id="13-数据绑定"><a href="#13-数据绑定" class="headerlink" title="13.数据绑定"></a>13.数据绑定</h1><p>学习目标</p><p>● 了解Spring MVC中的数据绑定的概念</p><p>● 熟悉Spring MVC中的几种数据绑定类型</p><p>● 掌握Spring MVC数据绑定的使用</p><p>在实际的项目开发中，多数情况下客户端会传递带有不同参数的请求，那么后台是如何绑定并获取这些请求参数的呢</p><h2 id="13-1-概念"><a href="#13-1-概念" class="headerlink" title="13.1 概念"></a>13.1 概念</h2><ul><li><strong>概念：</strong>在执行程序时，Spring MVC会根据<strong>客户端</strong>请求参数的不同，将请求消息中的信息以一定的<strong>方式转换</strong>并绑定到<strong>控制器类</strong>的方法参数中。这种将<strong>请求消息数据</strong>与<strong>后台方法参数</strong>建立连接的过程就是Spring MVC中的数据绑定。</li><li><strong>DataBinder</strong><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650897309775.png" alt="1650897309775"></li></ul></li><li><strong>信息处理步骤</strong><ul><li>（1）Spring MVC将ServletRequest对象传递给DataBinder。</li><li>（2）将处理方法的入参对象传递给DataBinder。</li><li>（3）DataBinder调用ConversionService组件进行数据类型转换、数据格式化等工作，并将ServletRequest对象中的消息填充到参数对象中。</li><li>（4）调用Validator组件对已经绑定了请求消息数据的参数对象进行数据合法性校验。</li><li>（5）校验完成后会生成数据绑定结果BindingResult对象，Spring MVC会将BindingResult对象中的内容赋给处理方法的相应参数。</li></ul></li><li>根据客户端请求参数类型和个数的不同，我们将Spring MVC中的数据绑定主要分为<strong>简单数据绑定</strong>和<strong>复杂数据绑定</strong></li></ul><h2 id="13-2-简单数据绑定"><a href="#13-2-简单数据绑定" class="headerlink" title="13.2 简单数据绑定"></a>13.2 简单数据绑定</h2><ul><li><p>绑定默认数据类型</p><ul><li><p>当前端请求的<strong>参数比较简单</strong>时，可以在后台方法的形参中直接使用Spring MVC提供的默认参数类型进行数据绑定。</p></li><li><p>常用的默认参数类型</p><ul><li>· HttpServletRequest：通过request对象获取请求信息。</li><li>· HttpServletResponse：通过response处理响应信息。</li><li>· HttpSession：通过session对象得到session中存储的对象。</li><li>· Model&#x2F;ModelMap:Model是一个接口，ModelMap是一个接口实现，作用是将model数据填充到request域。</li></ul></li><li><p><strong>例子</strong></p><ul><li><p>导坐标，配置web.xml，定义页面</p></li><li><p>创建用户操作控制器</p><ul><li>&#96;&#96;&#96;java<br>@Controller<br>public class AController {<br>@RequestMapping(“&#x2F;selectUser”)<br>public String selectUser(HttpServletRequest request){<br>    String id &#x3D; request.getParameter(“id”);<br>    System.out.println(“id&#x3D;” + id);<br>    return “success”;<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- jsp页面</span><br><span class="line"></span><br><span class="line">  - ```jsp</span><br><span class="line">    &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;页面结果&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    9 ok</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>请求url<a href="http://localhost:8080/spring08_demo/selectUser?id=1">http://localhost:8080/spring08_demo/selectUser?id=1</a></p></li><li><p>输出结果</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650899367259.png" alt="1650899367259"></li><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650899383818.png" alt="1650899383818"></li></ul></li></ul></li></ul></li><li><p>绑定简单数据类型</p><ul><li><p><strong>简单数据类型：</strong>int、String、Double等类型。</p></li><li><p>例子：</p><ul><li><p>修改控制器</p><ul><li>&#96;&#96;&#96;java<br>@RequestMapping(“&#x2F;selectUser”)<br>public String selectUser(Integer id){<br>System.out.println(“id&#x3D;” + id);<br>return “success”;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 输出结果与上例一样</span><br><span class="line"></span><br><span class="line">- **@RequestParam**：当前端请求中**参数名**和**后台控制器类方法**中的**形参名**不一样</span><br><span class="line"></span><br><span class="line">  - ![1650899802981](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650899802981.png)</span><br><span class="line"></span><br><span class="line">  - 将前端输入User_id映射到id</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    @RequestMapping(&quot;/selectUser&quot;)</span><br><span class="line">    public String selectUser(@RequestParam(value = &quot;user_id&quot;) Integer id)&#123;</span><br><span class="line">        System.out.println(&quot;id=&quot; + id);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>绑定pojo类型</p><ul><li><p>当传的参数过多时，用pojo</p></li><li><p>例子</p><ul><li><p>1.定义pojo类</p><ul><li>&#96;&#96;&#96;java<br>public class User {<br>private Integer id;<br>private String username;<br>private Integer password;<br><br>public Integer getId() {<br>    return id;<br>}<br><br>public void setId(Integer id) {<br>    this.id &#x3D; id;<br>}<br><br>public String getUsername() {<br>    return username;<br>}<br><br>public void setUsername(String username) {<br>    this.username &#x3D; username;<br>}<br><br>public Integer getPassword() {<br>    return password;<br>}<br><br>public void setPassword(Integer password) {<br>    this.password &#x3D; password;<br>}<br><br>@Override<br>public String toString() {<br>    return “User{“ +<br>            “id&#x3D;” + id +<br>            “, username&#x3D;’” + username + ‘&#39;‘ +<br>            “, password&#x3D;” + password +<br>            ‘}’;<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2.写Controller</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @RequestMapping(&quot;/registerUser&quot;)</span><br><span class="line">    public String registerUser(User user)&#123;</span><br><span class="line">        String username = user.getUsername();</span><br><span class="line">        Integer password = user.getPassword();</span><br><span class="line">        System.out.println(&quot;username=&quot; + username);</span><br><span class="line">        System.out.println(&quot;password=&quot; + password);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.jsp</p></li><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;注册&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;$&#123;pageContext.request.contextPath&#125;/registerUser&quot; method=&quot;post&quot;&gt;用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;br/&gt;&lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **注意：**在使用POJO类型数据绑定时，前端请求的参数名（本例中指form表单内各元素的name属性值）必须与要绑定的POJO类中的属性名一样，这样才会自动将请求数据绑定到POJO对象中，否则后台接收的参数值为null。</span><br><span class="line"></span><br><span class="line">- 请求乱码处理</span><br><span class="line"></span><br><span class="line">  - 编码过滤器来统一编码</span><br><span class="line"></span><br><span class="line">  - web.xml</span><br><span class="line"></span><br><span class="line">    ```xml</span><br><span class="line">    &lt;!--    编码过滤器--&gt;</span><br><span class="line">        &lt;filter&gt;</span><br><span class="line">            &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">            &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">            &lt;init-param&gt;</span><br><span class="line">                &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">                &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">            &lt;/init-param&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">        &lt;filter-mapping&gt;</span><br><span class="line">            &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>BUG</p></li><li><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650975003812.png" alt="1650975003812"></p></li><li><p>加上</p></li><li><pre><code class="jsp">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 绑定包装pojo</span><br><span class="line"></span><br><span class="line">  - 例子</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      public class Orders &#123;</span><br><span class="line">          private Integer ordersId;</span><br><span class="line">          private User user;</span><br><span class="line">      </span><br><span class="line">          public Integer getOrdersId() &#123;</span><br><span class="line">              return ordersId;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          public void setOrdersId(Integer ordersId) &#123;</span><br><span class="line">              this.ordersId = ordersId;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          public User getUser() &#123;</span><br><span class="line">              return user;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          public void setUser(User user) &#123;</span><br><span class="line">              this.user = user;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>注入[类变量名.变量]方法给user对象赋值</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span></span><br><span class="line"><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/findOrdersWithUser&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    ordersId     &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;ordersId&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    user.id&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    user.username&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    user.password&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;user.password&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>**注意:**在使用包装POJO类型数据绑定时，前端请求的参数名编写必须符合以下两种情况。</p></li><li><p>① 如果查询条件参数是包装类的直接<strong>基本属性</strong>，则参数名<strong>直接用对应的属性名</strong>，如上面代码中的<strong>ordersId</strong>。</p></li><li><p>② 如果查询条件参数是包装类中<strong>POJO的子属性</strong>，则参数名必须为<strong>【对象．属性】</strong>，其中【对象】要和包装POJO中的<strong>对象属性名称一致</strong>，【属性】要和包装POJO中的对象子属性一致，如上述代码中的<strong>user.username</strong>。</p></li></ul></li></ul></li><li><p><strong>自定义属性绑定</strong></p><ul><li><p><strong>需求：</strong>有些<strong>特殊类型的参数</strong>是无法在后台进行直接转换的，例如<strong>日期数据</strong>就需要开发者自定义转换器（<strong>Converter</strong>）或格式化（<strong>Formatter</strong>）来进行数据绑定。</p></li><li><p><strong>Converter</strong>:如将日期形式的字符串转化为日期类型</p><ul><li><p>1.转化类</p><ul><li><p>&#96;&#96;&#96;java<br>package com.itzjc.convert;</p><p>import org.springframework.core.convert.converter.Converter;</p><p>import java.text.ParseException;<br>import java.text.SimpleDateFormat;<br>import java.util.Date;</p><p>&#x2F;**</p><ul><li><p>自定义日期转换器<br> *&#x2F;<br>public class DateConverter implements Converter&lt;String,Date&gt; {<br> &#x2F;&#x2F;定义日期格式<br> private String dataPatten &#x3D; “yyyy-MM-dd HH:mm:ss”;</p><p> @Override<br> public Date convert(String source) {<br> &#x2F;&#x2F;格式化日期<br> SimpleDateFormat sdf &#x3D; new SimpleDateFormat(dataPatten);<br> try {<br>     return sdf.parse(source);<br> } catch (ParseException e) {<br>     throw new IllegalArgumentException(“无效的日期格式，请使用这种格式:”+dataPatten);<br> }<br> }</p></li></ul><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 配置id为conversionService的bean</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;!--显示装配自定义转换器--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</span><br><span class="line">    &lt;!--自定义类型转换器配置--&gt;</span><br><span class="line">    &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;bean class=&quot;com.itzjc.convert.DateConverter&quot;/&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>容器使用</p><ul><li>&#96;&#96;&#96;java<br>@RequestMapping(“&#x2F;customDate”)<br>public String CustomDate(Date date){<br>System.out.println(“data&#x3D;” + date);<br>return “success”;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 结果：</span><br><span class="line"></span><br><span class="line">    - 输入：http://localhost:8080/spring08_demo/customDate?date= 2017-04-12 15:55:55</span><br><span class="line"></span><br><span class="line">    - 输出：</span><br><span class="line"></span><br><span class="line">      ![1650979531192](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650979531192.png)</span><br><span class="line"></span><br><span class="line">- **Formatter**：和Converter一样，只是**Formatter**的源类型**必须**是一个**String类型**，而**Converter**可以是**任意类型**。</span><br><span class="line"></span><br><span class="line">  - 转换器类</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    package com.itzjc.convert;</span><br><span class="line">    </span><br><span class="line">    import org.springframework.core.convert.converter.Converter;</span><br><span class="line">    import org.springframework.format.Formatter;</span><br><span class="line">    </span><br><span class="line">    import java.text.ParseException;</span><br><span class="line">    import java.text.SimpleDateFormat;</span><br><span class="line">    import java.util.Date;</span><br><span class="line">    import java.util.Locale;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 自定义日期转换器</span><br><span class="line">     */</span><br><span class="line">    public class DateFormatter implements Formatter&lt;Date&gt; &#123;</span><br><span class="line">        //定义日期格式</span><br><span class="line">        private String dataPatten = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">        //声明SimpleDateFormat</span><br><span class="line">        private SimpleDateFormat simpleDateFormat;</span><br><span class="line">        //转化类型</span><br><span class="line">        @Override</span><br><span class="line">        public Date parse(String source, Locale locale) throws ParseException &#123;</span><br><span class="line">            simpleDateFormat = new SimpleDateFormat(dataPatten);</span><br><span class="line">            return simpleDateFormat.parse(source);</span><br><span class="line">        &#125;</span><br><span class="line">        //返回目标对象的字符串</span><br><span class="line">        @Override</span><br><span class="line">        public String print(Date date, Locale locale) &#123;</span><br><span class="line">            return new SimpleDateFormat().format(date);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示装配自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义类型转换器配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;formatters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itzjc.convert.DateFormatter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现效果与Converter一致</p></li></ul></li></ul></li></ul><h2 id="13-3-复杂数据绑定"><a href="#13-3-复杂数据绑定" class="headerlink" title="13.3 复杂数据绑定"></a>13.3 复杂数据绑定</h2><p><strong>复杂数据绑定：</strong>数组绑定和集合绑定的使用。</p><ul><li><p><strong>数组</strong></p><ul><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/deleteUsers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteUsers</span><span class="params">(Integer[] ids)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ids != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">            <span class="comment">//使用输出语句模拟已删除用户</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除了id为&quot;</span> + id + <span class="string">&quot;的用户！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ids=null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/deleteUsers&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;20%&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;选择&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;1&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;tom&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;2&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;jack&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;ids&quot;</span> value=<span class="string">&quot;3&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;lucy&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650985358257.png" alt="1650985358257"></p></li></ul></li><li><p><strong>集合</strong></p><ul><li><p>定义包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itzjc.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itzjc.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsers</span><span class="params">(List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUserEdit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUserEdit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_edit&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/editUsers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">editUsers</span><span class="params">(UserVo userList)</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userList.getUsers();</span><br><span class="line">    <span class="comment">//遍历集合</span></span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        <span class="comment">//如果接收id不为空，则接收</span></span><br><span class="line">        <span class="keyword">if</span> (user.getId() != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改id为&quot;</span> + user.getId() + <span class="string">&quot;的用户名为：&quot;</span> + user.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意:**在使用集合数据绑定时，后台方法中不支持直接使用集合形参进行数据绑定，所以需要使用包装POJO作为形参，然后在包装POJO中包装一个集合属性。</p></li><li><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/deleteUsers&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;20%&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;选择&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[0].id&quot;</span> value=<span class="string">&quot;1&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[0].username&quot;</span> value=<span class="string">&quot;tom&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[1].id&quot;</span> value=<span class="string">&quot;2&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[1].username&quot;</span> value=<span class="string">&quot;jack&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[2].id&quot;</span> value=<span class="string">&quot;3&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input name=<span class="string">&quot;users[2].username&quot;</span> value=<span class="string">&quot;lucy&quot;</span> type=<span class="string">&quot;text&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1650986449900.png" alt="1650986449900"></p></li></ul></li></ul><h1 id="14-JSON数据交互和RESTful支持"><a href="#14-JSON数据交互和RESTful支持" class="headerlink" title="14.JSON数据交互和RESTful支持"></a>14.JSON数据交互和RESTful支持</h1><p>学习目标</p><p>● 了解JSON的数据结构</p><p>● 掌握Spring MVC中JSON数据交互的使用</p><p>● 熟悉RESTful风格的请求样式</p><p>● 掌握Spring MVC中RESTful风格请求的使用</p><h2 id="14-1-JSON数据结构"><a href="#14-1-JSON数据结构" class="headerlink" title="14.1 JSON数据结构"></a>14.1 JSON数据结构</h2><ul><li><p>与XML一样，JSON也是基于纯文本的数据格式。</p></li><li><p>JSON数据的两种数据结构</p><ul><li><p>对象结构</p><ul><li><p>对象结构以“{”开始，以“}”结束。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">key1<span class="punctuation">:</span>value1<span class="punctuation">,</span></span><br><span class="line">key2<span class="punctuation">:</span>value2<span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>其中key必须为String类型</p></li><li><p>其中value可以为String、Number、Object、Array等数据类型。</p></li></ul></li><li><p>数组结构</p><ul><li><p>数组结构以“[”开始，以“]”结束。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">value1<span class="punctuation">,</span></span><br><span class="line">value2<span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>其中value1与value2可以为不同类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;abc&quot;</span><span class="punctuation">,</span><span class="number">123</span><span class="punctuation">,</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>对象结构可嵌入数组结构,也可嵌入对象结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">&quot;hobby&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;篮球&quot;</span><span class="punctuation">,</span><span class="string">&quot;羽毛球&quot;</span><span class="punctuation">,</span><span class="string">&quot;游泳&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;Beijing&quot;</span></span><br><span class="line"><span class="attr">&quot;street&quot;</span><span class="punctuation">:</span><span class="string">&quot;Xisanqi&quot;</span></span><br><span class="line"><span class="attr">&quot;postcode&quot;</span><span class="punctuation">:</span><span class="number">100096</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="14-2-SpringMVC中JSON数据使用"><a href="#14-2-SpringMVC中JSON数据使用" class="headerlink" title="14.2 SpringMVC中JSON数据使用"></a>14.2 SpringMVC中JSON数据使用</h2><ul><li><p>HttpMessageConverter<T>:将请求数据转化为T类；</p></li><li><p>JSON开源包</p><ul><li>**· jackson-annoations-2.8.8.jar:**JSON转换注解包。</li><li>**· jackson-core-2.8.8.jar:**JSON转换核心包。</li><li>**· jackson-databind-2.8.8.jar:**JSON转换的数据绑定包。</li></ul></li><li><p>两个重要注解</p><ul><li>@RequestBody:将请求体数据绑定到方法形参中；</li><li>@ResponseBody：直接返回return对象</li></ul></li><li><p>实现步骤：</p><ul><li>&#96;&#96;&#96;java<br>@RequestMapping(“&#x2F;test1”)<br>@ResponseBody<br>public String test1(@RequestBody User user){<br>&#x2F;&#x2F;打印JSON数据<br>System.out.println(user);<br>&#x2F;&#x2F;返回JSON格式响应<br>String userString &#x3D; JSON.toJSONString(user);<br>return userString;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- **静态资源访问**:</span><br><span class="line"></span><br><span class="line">  - **&lt;mvc:resources… /&gt;**</span><br><span class="line"></span><br><span class="line">    ![1651136330092](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651136330092.png)</span><br><span class="line"></span><br><span class="line">  - **&lt;mvc:default-servlet-handler /&gt;**</span><br><span class="line"></span><br><span class="line">    - 它会像一个检查员，对进入DispatcherServlet的URL进行筛查。如果发现是静态资源的请求，就将该请求转由Web服务器默认的Servlet处理，默认的Servlet就会对这些静态资源放行；如果不是静态资源的请求，才由DispatcherServlet继续处理。</span><br><span class="line"></span><br><span class="line">    - **注意：**</span><br><span class="line"></span><br><span class="line">      一般Web服务器默认的Servlet名称是&quot;default&quot;，因此DefaultServletHttpRequestHandler可以找到它。如果使用的Web应用服务器默认的Servlet名称不是&quot;default&quot;。</span><br><span class="line"></span><br><span class="line">      ![1651137477225](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651137477225.png)</span><br><span class="line"></span><br><span class="line">      - 而Web服务器的Servlet名称是由使用的服务器确定的，常用服务器及其Servlet名称如下。</span><br><span class="line">      - · Tomcat、Jetty、JBoss和and GlassFish默认Servlet的名称——&quot;default&quot;。</span><br><span class="line">      - · Google App Engine默认Servlet的名称——&quot;_ah_default&quot;。</span><br><span class="line">      - · Resin默认Servlet的名称——&quot;resin-file&quot;。</span><br><span class="line">      - · WebLogic默认Servlet的名称——&quot;FileServlet&quot;。</span><br><span class="line">      - · WebSphere默认Servlet的名称——&quot;SimpleFileServlet&quot;。</span><br><span class="line"></span><br><span class="line">    - **激活Tomcat默认的Servlet来处理静态文件访问。**</span><br><span class="line"></span><br><span class="line">      - ```xml</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><ul><li><p>以上3种静态资源访问的配置方式不同，并且各有优缺点，具体如下。</p><ul><li>· 第一和第三种配置方式可以选择性的释放静态资源。</li><li>· 第二种配置方式配置相对简单，只需要一行代码，就可以释放所有静态资源。</li><li>· 第二和第三种配置方式会导致项目移植性较差，需要根据具体的Web服务器来更改Servlet名称。</li><li>· 第三种配置方式运行效率更高，因为服务器启动时已经加载了web.xml中的静态资源。</li><li>在实际开发中，更为常用的配置还是第一种（即案例中的）配置方式，这样就不需要考虑Web服务器的问题了。</li></ul></li></ul></li></ul></li></ul><h2 id="14-3-RESTful支持"><a href="#14-3-RESTful支持" class="headerlink" title="14.3 RESTful支持"></a>14.3 RESTful支持</h2><p>RESTful风格就是把请求参数变成请求路径的一种风格。</p><ul><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651157944711.png" alt="1651157944711"></li><li>UserController</li><li><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651158033955.png" alt="1651158033955"></li><li>在上述代码中，@RequestMapping(value&#x3D;”&#x2F;user&#x2F;{id}”,method&#x3D;RequestMethod.GET)注解用于匹配请求路径（包括参数）和方式。其中value&#x3D;”&#x2F;user&#x2F;{id}”表示可以匹配以“&#x2F;user&#x2F;{id}”结尾的请求，id为请求中的动态参数；method&#x3D;RequestMethod.GET表示只接收GET方式的请求。方法中的@PathVariable(“id”)注解则用于接收并绑定请求参数，它可以将请求URL中的变量映射到方法的形参上，如果请求路径为“&#x2F;user&#x2F;{id}”，即请求参数中的id和方法形参名称id一样，则@PathVariable后面的“(“id”)”可以省略。</li></ul><h1 id="15-拦截器"><a href="#15-拦截器" class="headerlink" title="15.拦截器"></a>15.拦截器</h1><p>学习目标</p><p>● 了解拦截器定义和配置方式</p><p>● 熟悉拦截器的执行流程</p><p>● 掌握拦截器的使用</p><h2 id="15-1-拦截器的定义和配置方式"><a href="#15-1-拦截器的定义和配置方式" class="headerlink" title="15.1 拦截器的定义和配置方式"></a>15.1 拦截器的定义和配置方式</h2><p><strong>概念：</strong>Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并做相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。</p><ul><li><p>拦截器使用</p><ul><li><p>1.定义拦截器</p><ul><li><p>一种是通过实现<strong>HandlerInterceptor接口</strong>，或继承<strong>HandlerInterceptor接口的实现类</strong>（如HandlerInterceptorAdapter）来定义；</p></li><li><p>另一种是通过实现<strong>WebRequestInterceptor接口</strong>，或继承<strong>WebRequestInterceptor接口的实现类</strong>来定义。</p></li><li><p>例子：使用HandlerInterceptor接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itzjc.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//执行时机：在控制器方法前执行</span></span><br><span class="line">    <span class="comment">//返回值：false:会中断后续的所有操作</span></span><br><span class="line">    <span class="comment">//       true:表示继续向下执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//执行时机：控制器方法调用之后，且解析视图之前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//执行时机：整个请求完成，即视图渲染结束之后执行。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.拦截器配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用bean直接定义在&lt;mvc:interceptors&gt;下面的Interceptor将拦截所有的请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itzjc.interceptor.CustomInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截器1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器作用的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置不需要拦截器作用的路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义在&lt;mvc:interceptor&gt;下面的，表示对匹配路径的请求才进行拦截--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itzjc.interceptor.Interceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截器2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itzjc.interceptor.Interceptor2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>&lt;mvc:interceptor &gt;之上</strong>的bean为<strong>全局拦截器</strong></li><li><strong>&lt;mvc:interceptor &gt;：</strong>定义指定的拦截器<ul><li>子元素**<a href="mvc:mapping**">mvc:mapping**</a>path属性：配置拦截器作用的路径<ul><li>&#x2F;**：表示拦截所有路径</li><li>&#x2F;hello：拦截以hello结尾的路径</li></ul></li><li>子元素**&lt;mvc:exclude-mapping &gt;**path属性：配置不需要拦截的路径</li></ul></li><li>书写顺序：&lt;mvc:mapping …&#x2F;&gt;→&lt;mvc:exclude-mapping … &#x2F;&gt;→&lt;bean … &#x2F;&gt;</li></ul></li></ul></li></ul><h2 id="15-2-执行流程"><a href="#15-2-执行流程" class="headerlink" title="15.2 执行流程"></a>15.2 执行流程</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651325994145.png" alt="1651325994145"></p><ul><li><p>1.书写拦截器</p><ul><li><p>&#96;&#96;&#96;java<br>package com.itzjc.interceptor;</p><p>import org.springframework.web.servlet.HandlerInterceptor;<br>import org.springframework.web.servlet.ModelAndView;</p><p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p><p>public class CustomInterceptor implements HandlerInterceptor {<br>@Override<br>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<br>    System.out.println(“CustomInterceptor…preHandle”);<br>    return true;<br>}<br><br>@Override<br>public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {<br>    System.out.println(“CustomInterceptor…postHandle”);<br>}<br><br>@Override<br>public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {<br>    System.out.println(“CustomInterceptor…afterCompletion”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2.配置拦截器</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;mvc:interceptors&gt;</span><br><span class="line">        &lt;!--定义全局拦截器--&gt;</span><br><span class="line">        &lt;bean class=&quot;com.itzjc.interceptor.CustomInterceptor&quot;/&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>3.定义容器</p><ul><li><pre><code class="java">package com.itzjc.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HelloController &#123;    /**     * 页面跳转     */    @RequestMapping(&quot;/hello&quot;)    public String hello()&#123;        System.out.println(&quot;Hello!&quot;);        return &quot;user&quot;;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 4.输出结果</span><br><span class="line"></span><br><span class="line">  - ![1651329757954](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651329757954.png)</span><br><span class="line"></span><br><span class="line">## 15.3 多个拦截器执行流程</span><br><span class="line"></span><br><span class="line">![1651331007829](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651331007829.png)</span><br><span class="line"></span><br><span class="line">- 1.定义拦截器</span><br><span class="line"></span><br><span class="line">  - 拦截器1</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      package com.itzjc.interceptor;</span><br><span class="line">      </span><br><span class="line">      import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">      import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">      </span><br><span class="line">      import javax.servlet.http.HttpServletRequest;</span><br><span class="line">      import javax.servlet.http.HttpServletResponse;</span><br><span class="line">      </span><br><span class="line">      public class Interceptor1 implements HandlerInterceptor &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">              System.out.println(&quot;Interceptor1...preHandle&quot;);</span><br><span class="line">              return true;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          @Override</span><br><span class="line">          public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">              System.out.println(&quot;Interceptor1...postHandle&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          @Override</span><br><span class="line">          public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">              System.out.println(&quot;Interceptor1...afterCompletion&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>拦截器2</p><ul><li><p>&#96;&#96;&#96;java<br>package com.itzjc.interceptor;</p><p>import org.springframework.web.servlet.HandlerInterceptor;<br>import org.springframework.web.servlet.ModelAndView;</p><p>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;</p><p>public class Interceptor2 implements HandlerInterceptor {<br>@Override<br>public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<br>    System.out.println(“Interceptor2…preHandle”);<br>    return true;<br>}<br><br>@Override<br>public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {<br>    System.out.println(“Interceptor2…postHandle”);<br>}<br><br>@Override<br>public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {<br>    System.out.println(“Interceptor2…afterCompletion”);<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 2.配置拦截器</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;mvc:interceptors&gt;</span><br><span class="line">        &lt;!--拦截器1--&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=&quot;/**&quot;/&gt;</span><br><span class="line">            &lt;bean class=&quot;com.itzjc.interceptor.Interceptor1&quot;/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">        &lt;!--拦截器2--&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">            &lt;mvc:mapping path=&quot;/hello&quot;/&gt;</span><br><span class="line">            &lt;bean class=&quot;com.itzjc.interceptor.Interceptor2&quot;/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>3.定义容器</p><ul><li><p>&#96;&#96;&#96;java<br>package com.itzjc.controller;</p><p>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.RequestMapping;</p><p>@Controller<br>public class HelloController {<br>&#x2F;**<br> * 页面跳转<br> *&#x2F;<br>@RequestMapping(“&#x2F;hello”)<br>public String hello(){<br>    System.out.println(“Hello!”);<br>    return “user”;<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 4.测试</span><br><span class="line"></span><br><span class="line">  - ![1651332125229](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651332125229.png)</span><br><span class="line"></span><br><span class="line"># 16.文件上传和下载</span><br><span class="line"></span><br><span class="line">学习目标</span><br><span class="line"></span><br><span class="line">● 熟悉Spring MVC中文件上传的实现步骤</span><br><span class="line"></span><br><span class="line">● 掌握文件上传案例的编写</span><br><span class="line"></span><br><span class="line">● 掌握中英文名称文件下载程序的编写</span><br><span class="line"></span><br><span class="line">## 16.1 文件上传</span><br><span class="line"></span><br><span class="line">- 文件上传表单必须要满足条件</span><br><span class="line"></span><br><span class="line">  - · form表单的method属性设置为**post**。</span><br><span class="line">  - · form表单的**enctype**属性设置为**multipart/form-data**。</span><br><span class="line">    - 当客户端form表单的enctype属性为multipart/form-data时，浏览器就会采用二进制流的方式来处理表单数据，服务器端就会对文件上传的请求进行解析处理。</span><br><span class="line">  - · 提供&lt;input type=&quot;file&quot; name=&quot;filename&quot; /&gt;的文件上传输入框。</span><br><span class="line"></span><br><span class="line">  ```xml</span><br><span class="line">  &lt;form action=&quot;uploadUrl&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;file&quot; name=&quot;filename&quot; multiple=&quot;multiple&quot;/&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; value=&quot;文件上传&quot;/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>MultipartResolver：SpringMVC提供的一种文件解析器</p><ul><li>&#96;&#96;&#96;xml<!--MultipartResolver接口的Bean定义--><bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    <!--设置编码格式，默认为ISO-8859-1-->    <property name="defaultEncoding" value="UTF-8"/>    <!--设置允许上传最大值(2MB),单位为字节-->    <property name="maxUploadSize" value="2097152"/>    ...</bean><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - CommonsMultipartResolverde的属性：</span><br><span class="line"></span><br><span class="line">    - **· maxUploadSize：**上传文件最大长度（以字节为单位）。</span><br><span class="line">    - **· maxInMemorySize：**缓存中的最大尺寸。</span><br><span class="line">    - **· defaultEncoding：**默认编码格式。</span><br><span class="line">    - **· resolveLazily：**推迟文件解析，以便在Controller中捕获文件大小异常。</span><br><span class="line"></span><br><span class="line">  - **注意：**因为MultipartResolver接口的实现类CommonsMultipartResolver内部是引用multipartResolver字符串获取该实现类对象并完成文件解析的，所以在配置CommonsMultipartResolver时必须指定该Bean的id为multipartResolver。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">​       由于CommonsMultipartResolver是Spring MVC内部通过Apache Commons FileUpload技术实现的，所以Spring MVC的文件上传还需要依赖Apache Commons FileUpload的组件</span><br><span class="line"></span><br><span class="line">- 需要导入坐标</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;!--文件上传--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>控制器书写</p><ul><li><p>&#96;&#96;&#96;java<br>package com.itzjc.controller;</p><p>import org.springframework.web.bind.annotation.RequestParam;<br>import org.springframework.web.multipart.MultipartFile;</p><p>public class FIleController {<br>public String handleFileUpload(@RequestParam(“name”) String name, @RequestParam(“filename”) MultipartFile file,…){<br>    if(!file.isEmpty()){<br>        &#x2F;&#x2F;具体方法<br>        return “uploadSuccess”;<br>        …<br>    }<br>    return “uploadFailure”;<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - file的方法</span><br><span class="line"></span><br><span class="line">    - ![1651418237254](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651418237254.png)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">- 实例演示</span><br><span class="line"></span><br><span class="line">- 1.编写配置文件</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;!--配置文件上传解析器--&gt;</span><br><span class="line">    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;!--设置编码格式，默认为ISO-8859-1--&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">        &lt;!--设置允许上传最大值(2MB),单位为字节--&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;2097152&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2.编写前端代码</p><ul><li>&#96;&#96;&#96;jsp<br>&lt;%@ page contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8” language&#x3D;”java” %&gt;<html><head>    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">    <title>文件上传</title>    <script>        //判断是否填写上传人并已经选择上传文件        function check(){            var name = document.getElementById("name").value;            var file = document.getElementById("file").value;            if(name == ""){                alert("填写上传人");                return false;            }            if (file.length==0||file==""){                alert("请选择上传文件")                return false;            }            return true;        }    </script></head><body><form action="${pageContext.request.contextPath}/fileUpload" method="post" enctype="multipart/form-data" onsubmit="return check()">    上传人:<input type="text" id="name" name="name"><br>    请选择文件：<input id="file" type="file" name="uploadfile" multiple="multiple"><br>    <input type="submit" value="上传"></form></body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 3.、编写文件上传控制器</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    package com.itzjc.controller;</span><br><span class="line">    </span><br><span class="line">    import org.springframework.stereotype.Controller;</span><br><span class="line">    import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">    import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">    import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">    </span><br><span class="line">    import javax.servlet.http.HttpServletRequest;</span><br><span class="line">    import java.io.File;</span><br><span class="line">    import java.io.IOException;</span><br><span class="line">    import java.util.List;</span><br><span class="line">    import java.util.UUID;</span><br><span class="line">    @Controller</span><br><span class="line">    public class FIleController &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 上传文件方法</span><br><span class="line">         * @param name 上传人</span><br><span class="line">         * @param uploadfile 文件</span><br><span class="line">         * @return 返回页面</span><br><span class="line">         */</span><br><span class="line">        @RequestMapping(&quot;/fileUpload&quot;)</span><br><span class="line">        public String handleFileUpload(@RequestParam(&quot;name&quot;) String name, @RequestParam(&quot;uploadfile&quot;) List&lt;MultipartFile&gt; uploadfile, HttpServletRequest request)&#123;</span><br><span class="line">            if(!uploadfile.isEmpty() &amp;&amp; uploadfile.size() &gt; 0)&#123;</span><br><span class="line">                //循环输出上传文件</span><br><span class="line">                for (MultipartFile file : uploadfile) &#123;</span><br><span class="line">                    //获取上传文件的原始名称</span><br><span class="line">                    String originalFilename = file.getOriginalFilename();</span><br><span class="line">                    //设置上传文件的保存地址目录</span><br><span class="line">                    String realPath = request.getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">                    File filePath = new File(realPath);</span><br><span class="line">                    //如果保存文件的地址不存在，就先创建</span><br><span class="line">                    if (!filePath.exists())&#123;</span><br><span class="line">                        filePath.mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line">                    //使用UUID重新命名上传的文件名称(上传人_uuid_原始文件名称)</span><br><span class="line">                    String newFilename = name + &quot;_&quot; + UUID.randomUUID() + &quot;_&quot; + originalFilename;</span><br><span class="line">                    //使用MultipartFile接口的方法完成文件上传到指定的位置</span><br><span class="line">                    try &#123;</span><br><span class="line">                        file.transferTo(new File(realPath + newFilename));</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return &quot;success&quot;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return &quot;error&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="17-Spring整合"><a href="#17-Spring整合" class="headerlink" title="17.Spring整合"></a>17.Spring整合</h1><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1651763055035.png" alt="1651763055035"></p><ul><li>​        在实际开发时，为了避免Spring配置文件中的信息过于臃肿，通常会将Spring配置文件中的信息按照不同的功能分散在多个配置文件中。例如可以将事务配置放置在名称为applicationContext-transaction.xml的文件中，将数据源等信息放置在名称为applicationContext-db.xml的文件中等。这样，在web.xml中配置加载Spring文件信息时，只需通过applicationContext-*.xml的方式即可自动加载全部配置文件。<ul><li>​     在前面小节整合环境搭建时，已经在配置文件applicationContext.xml中使用包扫描的形式加入了扫描包com.itheima.dao下的所有接口及映射文件，所以在这里完成DAO层接口及映射文件开发后，就不必再进行映射文件的扫描配置了。</li><li>​        @Transactional注解主要是针对数据的增加、修改、删除进行事务管理，上示例中的查询方法并不需要使用该注解，此处的作用就是告知读者该注解在实际开发中应该如何使用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/post/7678a22a.html"/>
      <url>/post/7678a22a.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h1><ul><li><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><div class="note blue flat"><p>假定我们有这样一个需求：写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，该如何实现？</p><p>答案是可以使用 <strong>Java 泛型</strong>。</p><p>使用 Java 泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。</p></div></li></ul><h1 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h1><ul><li><p>泛型方法，该方法在调用时可以接收不同类型的参数。</p></li><li><p>定义规则</p><div class="note green flat"><ul><li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前。</li><li>泛型修饰定义在返回类型之前。</li><li>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li><li>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。</li><li>泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像 <strong>int、double、char</strong> 等）。</li></ul></div></li><li><p>泛型标记符</p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></li><li><p>示例</p><div class="note red flat"><p>定义一个可以打印不同类型数组的方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;);</span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">Double</span>[]&#123;<span class="number">1.21</span>,<span class="number">2.12</span>,<span class="number">3.14</span>,<span class="number">5.0</span>&#125;);</span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">Character</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(E[] es)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (E e:es)&#123;</span><br><span class="line">            System.out.print(e + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出数组：</span><br><span class="line"><span class="number">1</span><span class="number">2</span><span class="number">3</span><span class="number">5</span></span><br><span class="line">输出数组：</span><br><span class="line"><span class="number">1.21</span><span class="number">2.12</span><span class="number">3.14</span><span class="number">5.0</span></span><br><span class="line">输出数组：</span><br><span class="line">abcd</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>extends使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 比较三个值并返回最大值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; T <span class="title function_">maximum</span><span class="params">(T x, T y, T z)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">max</span> <span class="operator">=</span> x; <span class="comment">// 假设x是初始最大值</span></span><br><span class="line">        <span class="keyword">if</span> ( y.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            max = y; <span class="comment">//y 更大</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( z.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            max = z; <span class="comment">// 现在 z 更大</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max; <span class="comment">// 返回最大对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String args[] )</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span> + maximum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span> + maximum(<span class="number">1.1</span>,<span class="number">2.1</span>,<span class="number">3.3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span> + maximum(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><ul><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>&lt;T&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p>设置一个类，其setter和getter方法可以返回想要的类型属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Value&lt;String&gt; stringValue = <span class="keyword">new</span> <span class="title class_">Value</span>&lt;&gt;();</span><br><span class="line">        stringValue.setT(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(stringValue.getT());</span><br><span class="line">        Value&lt;Integer&gt; integerValue = <span class="keyword">new</span> <span class="title class_">Value</span>&lt;&gt;();</span><br><span class="line">        integerValue.setT(<span class="number">125</span>);</span><br><span class="line">        System.out.println(integerValue.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h1><ul><li><p>类型通配符一般是使用 <strong>?</strong> 代替具体的类型参数。Value&lt;?&gt; —&gt;？允许所以的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Value&lt;String&gt; stringValue = <span class="keyword">new</span> <span class="title class_">Value</span>&lt;&gt;();</span><br><span class="line">        stringValue.setT(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        printValue(stringValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">(Value&lt;?&gt; value)</span>&#123;</span><br><span class="line">        System.out.println(value.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>? extends Number</strong>接受数字类型及其下层子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//===========错误示范======================</span></span><br><span class="line">        Value&lt;String&gt; stringValue = <span class="keyword">new</span> <span class="title class_">Value</span>&lt;&gt;();</span><br><span class="line">        stringValue.setT(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        printValue(stringValue);<span class="comment">//报错，不能用Value&lt;String&gt;类型导进去</span></span><br><span class="line">        <span class="comment">//=======================================</span></span><br><span class="line">        Value&lt;Integer&gt; integerValue = <span class="keyword">new</span> <span class="title class_">Value</span>&lt;&gt;();</span><br><span class="line">        integerValue.setT(<span class="number">125</span>);</span><br><span class="line">        printValue(integerValue);<span class="comment">//125</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printValue</span><span class="params">(Value&lt;? extends Number&gt; value)</span>&#123;</span><br><span class="line">        System.out.println(value.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>? super Number</strong>接受数字类型及其以上类型</p></li></ul><h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><ul><li><p>(T[]) new Object[size];方式创建（该方式创建的数组只能在类内部使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestG</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        A&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">A</span>&lt;&gt;();</span><br><span class="line">        a.createArray(<span class="number">3</span>);</span><br><span class="line">        a.setTArray(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        a.setTArray(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        a.setTArray(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        a.getList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] t;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maxT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createArray</span><span class="params">(Integer size)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.t =  (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTArray</span><span class="params">(T value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxT == t.length)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组已满&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            t[maxT] = value;</span><br><span class="line">            maxT++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">            System.out.println(t[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>由于泛型的擦除，不能将Object[]数组转型为具体类型的数组。</p></li><li><p>(T[]) Array.newInstance(tClass,size);反射创建，可以在类外部使用，但是不能在内部使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestG</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        A&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">A</span>&lt;&gt;();</span><br><span class="line">        String[] array = a.createArray(String.class, <span class="number">2</span>);</span><br><span class="line">        array[<span class="number">0</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        array[<span class="number">1</span>] = <span class="string">&quot;world!&quot;</span>;</span><br><span class="line">        System.out.println(array[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + array[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] t;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maxT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] createArray(Class&lt;T&gt; tClass,Integer size)&#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) Array.newInstance(tClass,size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/2f57a694.html"/>
      <url>/post/2f57a694.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>正则表达式定义了字符串的模式。</p></li><li><p>正则表达式可以用来搜索、编辑或处理文本。</p></li><li><p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p></li></ul><h1 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h1><table><thead><tr><th align="left">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\n</strong> 匹配换行符。序列 \\匹配 \ ，( 匹配 (。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr><tr><td align="left">*</td><td align="left">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td></tr><tr><td align="left">+</td><td align="left">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td></tr><tr><td align="left">{<em>n</em>}</td><td align="left"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td></tr><tr><td align="left">{<em>n</em>,}</td><td align="left"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td></tr><tr><td align="left">{<em>n</em>,<em>m</em>}</td><td align="left"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;&#x3D; <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td align="left">?</td><td align="left">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td></tr><tr><td align="left">.</td><td align="left">匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td></tr><tr><td align="left">(<em>pattern</em>)</td><td align="left">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td></tr><tr><td align="left">(?:<em>pattern</em>)</td><td align="left">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td></tr><tr><td align="left">(?&#x3D;<em>pattern</em>)</td><td align="left">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?&#x3D;95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td align="left">(?!<em>pattern</em>)</td><td align="left">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td align="left"><em>x</em>|<em>y</em></td><td align="left">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td></tr><tr><td align="left">[<em>xyz</em>]</td><td align="left">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td align="left">[^<em>xyz</em>]</td><td align="left">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td align="left">[<em>a-z</em>]</td><td align="left">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td></tr><tr><td align="left">[^<em>a-z</em>]</td><td align="left">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td></tr><tr><td align="left">\B</td><td align="left">非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td></tr><tr><td align="left">\c<em>x</em></td><td align="left">匹配 <em>x</em> 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td></tr><tr><td align="left">\d</td><td align="left">数字字符匹配。等效于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">非数字字符匹配。等效于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">换页符匹配。等效于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">换行符匹配。等效于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等效于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td></tr><tr><td align="left">\t</td><td align="left">制表符匹配。与 \x09 和 \cI 等效。</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符匹配。与 \x0b 和 \cK 等效。</td></tr><tr><td align="left">\w</td><td align="left">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td></tr><tr><td align="left">\W</td><td align="left">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td></tr><tr><td align="left">\x<em>n</em></td><td align="left">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41”匹配”A”。”\x041”与”\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td></tr><tr><td align="left">*num*</td><td align="left">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1”匹配两个连续的相同字符。</td></tr><tr><td align="left">*n*</td><td align="left">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td></tr><tr><td align="left">*nm*</td><td align="left">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td></tr><tr><td align="left">\nml</td><td align="left">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td></tr><tr><td align="left">\u<em>n</em></td><td align="left">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。</td></tr></tbody></table><h1 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h1><h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><ul><li><p>Pattern是一个正则表达式经编译后的表现模式。</p></li><li><p>必须首先将正则表达式（指定为字符串）编译为此类的实例。 然后将所得的图案可以被用来创建一个<a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/regex/Matcher.html"><code>Matcher</code></a>对象可以匹配任意<a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/lang/CharSequence.html">character sequences</a>针对正则表达式。 执行匹配的所有状态都驻留在匹配器中，所以许多匹配者可以共享相同的模式。</p></li><li><p>典型调用顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//Pattern.compile(&quot;a*b&quot;);---输入定义好的正则表达式</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;a*b&quot;</span>);</span><br><span class="line">    <span class="comment">//pattern.matcher(&quot;aaab&quot;);---要匹配的字符串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;aaab&quot;</span>);</span><br><span class="line">    <span class="comment">//matcher.matches()---匹配的结果</span></span><br><span class="line">        System.out.println(matcher.matches());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="left">返回类型</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left"><code>Predicate&lt;String&gt;</code></td><td align="left"><code>asPredicate()</code>创建可用于匹配字符串的谓词。</td></tr><tr><td align="left"><code>static Pattern</code></td><td align="left"><code>compile(String regex)</code>将给定的正则表达式编译为模式。</td></tr><tr><td align="left"><code>static Pattern</code></td><td align="left"><code>compile(String regex, int flags)</code>将给定的正则表达式编译为带有给定标志的模式。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>flags()</code>返回此模式的匹配标志。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>matcher(CharSequence input)</code>创建一个匹配器，匹配给定的输入与此模式。</td></tr><tr><td align="left"><code>static boolean</code></td><td align="left"><code>matches(String regex, CharSequence input)</code>编译给定的正则表达式，并尝试匹配给定的输入。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>pattern()</code>返回编译此模式的正则表达式。</td></tr><tr><td align="left"><code>static String</code></td><td align="left"><code>quote(String s)</code>返回指定的 <code>String</code>的文字模式 <code>String</code> 。</td></tr><tr><td align="left"><code>String[]</code></td><td align="left"><code>split(CharSequence input)</code>将给定的输入序列分成这个模式的匹配。</td></tr><tr><td align="left"><code>String[]</code></td><td align="left"><code>split(CharSequence input, int limit)</code>将给定的输入序列分成这个模式的匹配。</td></tr><tr><td align="left"><code>Stream&lt;String&gt;</code></td><td align="left"><code>splitAsStream(CharSequence input)</code>根据给定的输入序列创建一个流，该流与该模式匹配。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>toString()</code>返回此模式的字符串表示形式。</td></tr></tbody></table></li></ul><h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><ul><li><p>Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。</p></li><li><p>与Pattern 类一样，Matcher 也没有公共构造方法，你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p>方法</p><table><thead><tr><th align="left">返回类型</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left"><code>Matcher</code></td><td align="left"><code>appendReplacement(StringBuffer sb, String replacement)</code>实施非终端附加和替换步骤。</td></tr><tr><td align="left"><code>StringBuffer</code></td><td align="left"><code>appendTail(StringBuffer sb)</code>实施终端附加和替换步骤。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>end()</code>返回最后一个字符匹配后的偏移量。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>end(int group)</code>返回在上次匹配操作期间由给定组捕获的子序列的最后一个字符之后的偏移量。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>end(String name)</code>返回给定捕获子序列的最后一个字符之后的偏移量 <a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/regex/Pattern.html#groupname">named-capturing group</a>以前的匹配操作期间。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>find()</code>尝试找到匹配模式的输入序列的下一个子序列。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>find(int start)</code>重新设置该匹配器，然后尝试从指定的索引开始找到匹配模式的输入序列的下一个子序列。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>group()</code>返回与上一个匹配匹配的输入子序列。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>group(int group)</code>返回在上一次匹配操作期间由给定组捕获的输入子序列。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>group(String name)</code>返回给定捕获的输入子序列 <a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/regex/Pattern.html#groupname">named-capturing group</a>以前的匹配操作期间。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>groupCount()</code>返回此匹配器模式中捕获组的数量。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>hasAnchoringBounds()</code>查询该匹配器的区域边界的锚定。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>hasTransparentBounds()</code>查询此匹配器的区域边界的透明度。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>hitEnd()</code>如果在匹配器执行的最后一次匹配操作中输入的结尾被搜索引擎命中，则返回true。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>lookingAt()</code>尝试将输入序列从区域开头开始与模式相匹配。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>matches()</code>尝试将整个区域与模式进行匹配。</td></tr><tr><td align="left"><code>Pattern</code></td><td align="left"><code>pattern()</code>返回该匹配器解释的模式。</td></tr><tr><td align="left"><code>static String</code></td><td align="left"><code>quoteReplacement(String s)</code>返回一个文字替换 <code>String</code>为指定的 <code>String</code> 。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>region(int start, int end)</code>设置该匹配器区域的限制。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>regionEnd()</code>报告该匹配器区域的最终索引（排他）。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>regionStart()</code>报告该匹配器区域的开始索引。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>replaceAll(String replacement)</code>将与模式匹配的输入序列的每个子序列替换为给定的替换字符串。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>replaceFirst(String replacement)</code>将与模式匹配的输入序列的第一个子序列替换为给定的替换字符串。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>requireEnd()</code>如果更多输入可以将正匹配更改为否定，则返回true。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>reset()</code>重设此匹配器。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>reset(CharSequence input)</code>使用新的输入序列重置此匹配器。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>start()</code>返回上一个匹配的起始索引。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>start(int group)</code>返回给定组在上一个匹配操作期间捕获的子序列的开始索引。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>start(String name)</code>返回给定捕获的子序列的初始索引 <a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/regex/Pattern.html#groupname">named-capturing group</a>以前的匹配操作期间。</td></tr><tr><td align="left"><code>MatchResult</code></td><td align="left"><code>toMatchResult()</code>返回此匹配器的匹配状态为<a href="https://www.matools.com/file/manual/jdk_api_1.8_google/java/util/regex/MatchResult.html"><code>MatchResult</code></a> 。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>toString()</code>返回此匹配器的字符串表示形式。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>useAnchoringBounds(boolean b)</code>设置该匹配器的区域边界的锚定。</td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>usePattern(Pattern newPattern)</code>更改，这 <code>Matcher</code>用于查找与匹配的 <code>Pattern。</code></td></tr><tr><td align="left"><code>Matcher</code></td><td align="left"><code>useTransparentBounds(boolean b)</code>设置此匹配器的区域边界的透明度。</td></tr></tbody></table></li></ul><h2 id="PatternSyntaxExcption"><a href="#PatternSyntaxExcption" class="headerlink" title="PatternSyntaxExcption"></a>PatternSyntaxExcption</h2><ul><li><p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getDescription()</strong> 获取错误的描述。</td></tr><tr><td align="left">2</td><td align="left"><strong>public int getIndex()</strong>  获取错误的索引。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String getPattern()</strong> 获取错误的正则表达式模式。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getMessage()</strong> 返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。</td></tr></tbody></table></li></ul><h1 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h1><h2 id="匹配字符串是否符合正则表达式"><a href="#匹配字符串是否符合正则表达式" class="headerlink" title="匹配字符串是否符合正则表达式"></a>匹配字符串是否符合正则表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//Pattern.compile(&quot;a*b&quot;);---输入定义好的正则表达式</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;a*b&quot;</span>);</span><br><span class="line">    <span class="comment">//pattern.matcher(&quot;aaab&quot;);---要匹配的字符串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;aaab&quot;</span>);</span><br><span class="line">    <span class="comment">//matcher.matches()---匹配的结果</span></span><br><span class="line">        System.out.println(matcher.matches());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="对单词出现次数的计数，并找到起始和末尾位置"><a href="#对单词出现次数的计数，并找到起始和末尾位置" class="headerlink" title="对单词出现次数的计数，并找到起始和末尾位置"></a>对单词出现次数的计数，并找到起始和末尾位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//&quot;/b&quot;匹配边界</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;\\bhello\\b&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;hello hell0 hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span>&#123;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);<span class="comment">//匹配设置模式</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(INPUT); <span class="comment">// 获取 matcher 对象</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//尝试找到匹配模式的输入序列的下一个子序列</span></span><br><span class="line">        <span class="comment">//即有多少个满足/bhello/b，返回true多少次</span></span><br><span class="line">        <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;单词hello出现的次数: &quot;</span>+count);</span><br><span class="line">            <span class="comment">//start()返回匹配的起始索引</span></span><br><span class="line">            System.out.println(<span class="string">&quot;起始索引: &quot;</span>+m.start());</span><br><span class="line">            <span class="comment">//end()返回匹配的末尾索引</span></span><br><span class="line">            System.out.println(<span class="string">&quot;末尾索引: &quot;</span>+m.end());</span><br><span class="line">            <span class="comment">//分割</span></span><br><span class="line">            System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">单词hello出现的次数: <span class="number">1</span></span><br><span class="line">起始索引: <span class="number">0</span></span><br><span class="line">末尾索引: <span class="number">5</span></span><br><span class="line">===============</span><br><span class="line">单词hello出现的次数: <span class="number">2</span></span><br><span class="line">起始索引: <span class="number">12</span></span><br><span class="line">末尾索引: <span class="number">17</span></span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对hel进行全句匹配和从第一个字符开始匹配"><a href="#对hel进行全句匹配和从第一个字符开始匹配" class="headerlink" title="对hel进行全句匹配和从第一个字符开始匹配"></a>对hel进行全句匹配和从第一个字符开始匹配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;hel&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span>&#123;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m1</span> <span class="operator">=</span> p.matcher(INPUT);</span><br><span class="line">        <span class="comment">//lookingAt():从第一个字符开始匹配</span></span><br><span class="line">        <span class="comment">//matches():全句匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;全句匹配：&quot;</span> + m1.matches());</span><br><span class="line">        System.out.println(<span class="string">&quot;从第一个字符开始匹配：&quot;</span> + m1.lookingAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对一个把Hello-Hello-World！把一个或两个hello改成Hi"><a href="#对一个把Hello-Hello-World！把一个或两个hello改成Hi" class="headerlink" title="对一个把Hello Hello World！把一个或两个hello改成Hi"></a>对一个把Hello Hello World！把一个或两个hello改成Hi</h2><ul><li>对于String操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;Hello Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REPLACE</span> <span class="operator">=</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置正则表达式</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);</span><br><span class="line">        <span class="comment">//得到匹配对象</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(INPUT);</span><br><span class="line">        <span class="comment">//替换全部</span></span><br><span class="line">        INPUT = m.replaceAll(REPLACE);</span><br><span class="line">        System.out.println(INPUT);</span><br><span class="line">        <span class="comment">//替换第一个</span></span><br><span class="line">        INPUT = m.replaceFirst(REPLACE);</span><br><span class="line">        System.out.println(INPUT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hi Hi World!</span><br><span class="line">Hi Hello World!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类</title>
      <link href="/post/2af9b407.html"/>
      <url>/post/2af9b407.html</url>
      
        <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Object是所有类的超类。</p><h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><ul><li><p>Object类中的equals方法用于检测一个对象是否等于另外一个对象。</p></li><li><p>如果两个对象具有相同的引用，它们一定是相等的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    <span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    System.out.println(b1.equals(b1));<span class="comment">//true</span></span><br><span class="line">    System.out.println(b1.equals(b2));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写equals方法</p><ul><li><p>按实际来说，关键的字段相等，两个对象就相等了，例如：小明的身份证号是小明的，这个人就是小明了。</p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">//如果本对象等于输入对象，判断引用是否相等，则返回true，就是输入自己</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果输入对象为空，或类型不一样返回false，例如人和动物比较</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//强转</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="comment">//看看省份证是否相同</span></span><br><span class="line">        <span class="keyword">return</span> id == person.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义小明</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        person1.setId(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        <span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=&#x27;null&#x27;, id=123456&#125;</span></span><br><span class="line">        <span class="comment">//定义小红</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        person2.setId(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">        <span class="comment">//Person&#123;name=&#x27;小红&#x27;, age=&#x27;null&#x27;, id=123456&#125;</span></span><br><span class="line"><span class="comment">//看看小明和小红是不是一个人</span></span><br><span class="line">        System.out.println(person1.equals(person2));</span><br><span class="line">        <span class="comment">//true，因为身份证相同所以是一个人。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想子类也参与判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//!(o instanceof Person)判断如果不是Person子类返回false</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || !(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> id == person.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义小明</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        person1.setId(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        <span class="comment">//Person&#123;name=&#x27;小明&#x27;, age=&#x27;null&#x27;, id=123456&#125;</span></span><br><span class="line">        <span class="comment">//用子类Person2定义小红</span></span><br><span class="line">        <span class="type">Person2</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>();</span><br><span class="line">        person2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        person2.setId(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(person2);</span><br><span class="line">        <span class="comment">//Person&#123;name=&#x27;小红&#x27;, age=&#x27;null&#x27;, id=123456&#125;</span></span><br><span class="line"><span class="comment">//看看小明和小红是不是一个人</span></span><br><span class="line">        System.out.println(person1.equals(person2));</span><br><span class="line">        <span class="comment">//true，因为身份证相同所以是一个人。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Java语言规范要求equals方法具有下面的特性：</p><ol><li><p>自反性：对于任何非空引用x, x.equals(x)应该返回true。</p></li><li><p>对称性：对于任何引用x和y，当且仅当y.equals(x)返回true,x.equals(y)也应该返回true。</p></li><li><p>传递性：对于任何引用x、y和z，如果x.equals(y)返回true,y.equals(z)返回true, x.equals(z)也应该返回true。</p></li><li><p>一致性：如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。</p></li><li><p>对于任意非空引用x, x.equals(null)应该返回false。</p></li></ol></li><li><p>Arrays与Objects的equals方法</p><ul><li>Arrays</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Boolean <span class="title function_">equals</span><span class="params">(type[ ] a, type[ ] b)</span> </span><br></pre></td></tr></table></figure><p>如果两个数组长度相同，并且在对应的位置上数据元素也均相同，将返回true。数组的元素类型可以是Object、int、long、short、char、byte、boolean、float或double。</p><ul><li>Objects</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object a, Object b)</span></span><br></pre></td></tr></table></figure><p>如果a和b都为null，返回true；如果只有其中之一为null，则返回false；否则返回a.equals(b)。</p></li></ul><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><ul><li><p>散列码（hash code）是由对象导出的一个整型值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>().hashCode());<span class="comment">//356573597</span></span><br></pre></td></tr></table></figure></li><li><p>散列码是没有规律的。如果x和y是两个不同的对象，x.hashCode( )与y.hashCode( )基本上不会相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">System.out.println(per1.hashCode());<span class="comment">//356573597</span></span><br><span class="line">System.out.println(per2.hashCode());<span class="comment">//1735600054</span></span><br></pre></td></tr></table></figure></li><li><p>一般来说，如果重新定义equals方法，就必须重新定义hashCode方法，以便用户可以将对象插入到散列表中。</p></li><li><p>每个对象都有一个默认的散列码，其值为对象的存储地址。</p></li><li><p>字符串的散列码是由其内容导出的，所以可能存在相同的散列码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类中hashCode()方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> val[] = value;</span><br><span class="line"><span class="comment">//散列码计算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>hashCode()方法的重写</p><p>在实际应用中，我们希望，不同的hash值由对象的相关属性生成，而不是单靠内存存储位置，即：具有相同属性的对象，有相同的hash值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//由name, age, id产生不同的hash值</span></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age, id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Objects.hash</span></span><br><span class="line"><span class="comment">//Object... values——可变形参,即传入的形参数量可以变化，传入后为一个Object类型数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object... values)</span> &#123;</span><br><span class="line">    <span class="comment">//Objects.hash实际是利用Arrays的hashCode方法</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode(values);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arrays.hashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(Object a[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object element : a)</span><br><span class="line">        <span class="comment">//hash值计算,可以看到hash值由输入的形参对象决定。</span></span><br><span class="line">        result = <span class="number">31</span> * result + (element == <span class="literal">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;12&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;12&quot;</span>,<span class="number">123</span>);</span><br><span class="line">    System.out.println(per1.hashCode());<span class="comment">//727270136</span></span><br><span class="line">    System.out.println(per2.hashCode());<span class="comment">//727270136</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，重写后，虽然是两个对象，但是属性相同，所以拥有相同的hash值。</p></li><li><p>相关API</p><details blue><summary> hashCode </summary>              <div class='content'>              <p>java.util.Object 1.0</p><ul><li><p>int hashCode()</p><p>返回对象的散列码。散列码可以是任意的整数，包括正数或负数。两个相等的对象要求返回相等的散列码。</p></li></ul><p>java.util.Objects 7</p><ul><li><p>static int hash(Object… objects)</p><p>返回一个散列码，由提供的所有对象的散列码组合而得到。</p></li><li><p>static int hashCode(Object a)</p><p>如果a为null返回0，否则返回a.hashCode()。</p></li></ul><p>java.lang.(Integer|Long|Short|Byte|Double|Float|Character|Boolean) 1.0</p><ul><li>static int hashCode((int|long|short|byte|double|float|char|boolean) value)</li></ul><p>  返回给定值的散列码。</p><ul><li>static int hashCode(type[ ] a)</li></ul><p>  计算数组a的散列码。组成这个数组的元素类型可以是object, int, long, short, char, byte, boolean, float或double。</p>              </div>            </details></li></ul><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><ul><li><p>toString方法，用于返回表示对象值的字符串。</p><p>先删掉Person类中重写的toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>().toString());<span class="comment">//per.Person@745f</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>());<span class="comment">//per.Person@745f，默认调用</span></span><br></pre></td></tr></table></figure></li><li><p>重写，改变输出格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Person</span>());</span><br><span class="line">    <span class="comment">//Person&#123;name=&#x27;null&#x27;, age=&#x27;null&#x27;, id=0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li><p>Class&lt;?&gt; getClass( )</p><p>返回包含对象信息的类对象。稍后会看到Java提供了类运行时的描述，它的内容被封装在Class类中，返回的是运行类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="comment">//Person2()为</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person2</span>();</span><br><span class="line">    System.out.println(p1.getClass());<span class="comment">//class per.Person</span></span><br><span class="line">    System.out.println(p2.getClass());<span class="comment">//class per.Person2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>String getName()</p><p>返回这个类的名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Person2.class.getName());<span class="comment">//per.Person2</span></span><br></pre></td></tr></table></figure></li><li><p>Class getSuperclass()</p><p>以Class对象的形式返回这个类的超类信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Person2.class.getSuperclass());<span class="comment">//class per.Person</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="String，StringBuilder，StringBuffer"><a href="#String，StringBuilder，StringBuffer" class="headerlink" title="String，StringBuilder，StringBuffer"></a>String，StringBuilder，StringBuffer</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>该对象是不可更改</li></ul><table><thead><tr><th align="left">SN(序号)</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/java/java-string-charat.html">char charAt(int index)</a> 返回指定索引处的 char 值。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(Object o)</a> 把这个字符串和另一个对象比较。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(String anotherString)</a> 按字典顺序比较两个字符串。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/java/java-string-comparetoignorecase.html">int compareToIgnoreCase(String str)</a> 按字典顺序比较两个字符串，不考虑大小写。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/java/java-string-concat.html">String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/java/java-string-contentequals.html">boolean contentEquals(StringBuffer sb)</a> 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td></tr><tr><td align="left">7</td><td align="left">[static String copyValueOf(char<a href="https://www.runoob.com/java/java-string-copyvalueof.html">] data)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="left">8</td><td align="left">[static String copyValueOf(char<a href="https://www.runoob.com/java/java-string-copyvalueof.html">] data, int offset, int count)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/java/java-string-endswith.html">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/java/java-string-equals.html">boolean equals(Object anObject)</a> 将此字符串与指定的对象比较。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/java/java-string-equalsignorecase.html">boolean equalsIgnoreCase(String anotherString)</a> 将此 String 与另一个 String 比较，不考虑大小写。</td></tr><tr><td align="left">12</td><td align="left">[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes()</a>  使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="left">13</td><td align="left">[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes(String charsetName)</a> 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="left">14</td><td align="left">[void getChars(int srcBegin, int srcEnd, char<a href="https://www.runoob.com/java/java-string-getchars.html">] dst, int dstBegin)</a> 将字符从此字符串复制到目标字符数组。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/java/java-string-hashcode.html">int hashCode()</a> 返回此字符串的哈希码。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch)</a> 返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch, int fromIndex)</a> 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str)</a>  返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str, int fromIndex)</a> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/java/java-string-intern.html">String intern()</a>  返回字符串对象的规范化表示形式。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch)</a>  返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch, int fromIndex)</a> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str)</a> 返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str, int fromIndex)</a>  返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/java/java-string-length.html">int length()</a> 返回此字符串的长度。</td></tr><tr><td align="left">26</td><td align="left"><a href="https://www.runoob.com/java/java-string-matches.html">boolean matches(String regex)</a> 告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td align="left">29</td><td align="left"><a href="https://www.runoob.com/java/java-string-replace.html">String replace(char oldChar, char newChar)</a> 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/java/java-string-replaceall.html">String replaceAll(String regex, String replacement)</a> 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/java/java-string-replacefirst.html">String replaceFirst(String regex, String replacement)</a>  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td align="left">32</td><td align="left">[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex)</a> 根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td align="left">33</td><td align="left">[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex, int limit)</a> 根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td align="left">34</td><td align="left"><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix)</a> 测试此字符串是否以指定的前缀开始。</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix, int toffset)</a> 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/java/java-string-subsequence.html">CharSequence subSequence(int beginIndex, int endIndex)</a>  返回一个新的字符序列，它是此序列的一个子序列。</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex)</a> 返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex, int endIndex)</a> 返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="left">39</td><td align="left">[char<a href="https://www.runoob.com/java/java-string-tochararray.html">] toCharArray()</a> 将此字符串转换为一个新的字符数组。</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="left">41</td><td align="left"><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase(Locale locale)</a>  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="left">42</td><td align="left"><a href="https://www.runoob.com/java/java-string-tostring.html">String toString()</a>  返回此对象本身（它已经是一个字符串！）。</td></tr><tr><td align="left">43</td><td align="left"><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="left">44</td><td align="left"><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase(Locale locale)</a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="left">45</td><td align="left"><a href="https://www.runoob.com/java/java-string-trim.html">String trim()</a> 返回字符串的副本，忽略前导空白和尾部空白。</td></tr><tr><td align="left">46</td><td align="left"><a href="https://www.runoob.com/java/java-string-valueof.html">static String valueOf(primitive data type x)</a> 返回给定data type类型x参数的字符串表示形式。</td></tr><tr><td align="left">47</td><td align="left"><a href="https://www.runoob.com/java/java-string-contains.html">contains(CharSequence chars)</a> 判断是否包含指定的字符系列。</td></tr><tr><td align="left">48</td><td align="left"><a href="https://www.runoob.com/java/java-string-isempty.html">isEmpty()</a> 判断字符串是否为空。</td></tr></tbody></table><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ul><li><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p></li><li><p>StringBuilder 的方法不是线程安全的（不能同步访问）。</p></li><li><p>StringBuilder 速度比 StringBuffer快</p></li><li><p>构造方法</p><table><thead><tr><th align="left">构造器</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>StringBuilder()</code></td><td align="left">构造一个字符串构建器，其中不包含任何字符，初始容量为16个字符。</td></tr><tr><td align="left"><code>StringBuilder(int capacity)</code></td><td align="left">构造一个字符串构建器，其中没有字符，并且具有 <code>capacity</code>参数指定的初始容量。</td></tr><tr><td align="left"><code>StringBuilder(CharSequence seq)</code></td><td align="left">构造一个字符串构建器，其中包含与指定的 <code>CharSequence</code>相同的字符。</td></tr><tr><td align="left"><code>StringBuilder(String str)</code></td><td align="left">构造一个初始化为指定字符串内容的字符串构建器。</td></tr></tbody></table></li><li><p>append()方法——增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    str.append(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">    str.append(<span class="string">&quot;str!&quot;</span>);</span><br><span class="line">    System.out.println(str);<span class="comment">//我是str!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>insert()方法——插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        str.append(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">        str.append(<span class="string">&quot;str!&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//我是str!</span></span><br><span class="line">    <span class="comment">//2,插入码点</span></span><br><span class="line">        str.insert(<span class="number">2</span>,<span class="string">&quot;第一&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//我是第一str!</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>delete()方法——删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        str.append(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">        str.append(<span class="string">&quot;str!&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//我是str!</span></span><br><span class="line">        str.insert(<span class="number">2</span>,<span class="string">&quot;第一&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//我是第一str!</span></span><br><span class="line">    <span class="comment">//2为起始点,4为结束点</span></span><br><span class="line">        str.delete(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//我是str!</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>capacity()——返回当前容量值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    str.append(<span class="string">&quot;我是&quot;</span>);</span><br><span class="line">    str.append(<span class="string">&quot;str!&quot;</span>);</span><br><span class="line">    System.out.println(str.capacity());<span class="comment">//16,初始容量为16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多API</p><div class="tag link"><a class="link-card" title="StringBuilder" href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuilder.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">StringBuilder</p><p class="url">https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuilder.html</p></div></a></div></li></ul><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><ul><li><p>StringBuffer是线程安全的</p></li><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        str.append(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//hello!</span></span><br><span class="line">        str.insert(<span class="number">6</span>,<span class="string">&quot; world!&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//hello! world!</span></span><br><span class="line">        str.delete(<span class="number">6</span>,<span class="number">13</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//hello!</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>更多API</p><div class="tag link"><a class="link-card" title="StringBuffer" href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuffer.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">StringBuffer</p><p class="url">https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuffer.html</p></div></a></div></li></ul><h2 id="String，StringBuilder，StringBuffer三者区别"><a href="#String，StringBuilder，StringBuffer三者区别" class="headerlink" title="String，StringBuilder，StringBuffer三者区别"></a>String，StringBuilder，StringBuffer三者区别</h2><ol><li>运行速度</li></ol><p>StringBuilder &gt; StringBuffer &gt; String</p><ol start="2"><li>线程安全</li></ol><p>StringBuilder 是线程不安全的，StringBuffer 是线程安全的。</p><ol start="3"><li>继承关系</li></ol><img src="/post/2af9b407/P1.png" class=""><ol start="4"><li>总结</li></ol><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><ul><li>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</li><li>在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</li><li>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。</li></ul><table><thead><tr><th align="left">包装类</th><th align="left">基本数据类型</th></tr></thead><tbody><tr><td align="left">Boolean</td><td align="left">boolean</td></tr><tr><td align="left">Byte</td><td align="left">byte</td></tr><tr><td align="left">Short</td><td align="left">short</td></tr><tr><td align="left">Integer</td><td align="left">int</td></tr><tr><td align="left">Long</td><td align="left">long</td></tr><tr><td align="left">Character</td><td align="left">char</td></tr><tr><td align="left">Float</td><td align="left">float</td></tr><tr><td align="left">Double</td><td align="left">double</td></tr></tbody></table><img src="/post/2af9b407/p2.png" class=""><ul><li><p>相关API</p><div class="tag link"><a class="link-card" title="StringBuffer" href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Number.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">StringBuffer</p><p class="url">https://www.runoob.com/manual/jdk11api/java.base/java/lang/Number.html</p></div></a></div></li></ul><h1 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h1><ul><li>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</li><li>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String []args)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class="number">0</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class="number">3</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;1的反正切值： &quot;</span> + Math.atan(<span class="number">1</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(Math.PI);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>相关API</p><div class="tag link"><a class="link-card" title="Math" href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Math.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">Math</p><p class="url">https://www.runoob.com/manual/jdk11api/java.base/java/lang/Math.html</p></div></a></div></li></ul><h1 id="日期和时间类"><a href="#日期和时间类" class="headerlink" title="日期和时间类"></a>日期和时间类</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li><p>构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date()<span class="comment">//初始化当前日期</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(<span class="type">long</span> millisec)<span class="comment">//初始化从1970年到现在的秒数</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><table><thead><tr><th align="left">序号</th><th align="left">方法和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>boolean after(Date date)</strong> 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td></tr><tr><td align="left">2</td><td align="left"><strong>boolean before(Date date)</strong> 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td></tr><tr><td align="left">3</td><td align="left"><strong>Object clone( )</strong> 返回此对象的副本。</td></tr><tr><td align="left">4</td><td align="left"><strong>int compareTo(Date date)</strong> 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td></tr><tr><td align="left">5</td><td align="left"><strong>int compareTo(Object obj)</strong> 若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td></tr><tr><td align="left">6</td><td align="left"><strong>boolean equals(Object date)</strong> 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td></tr><tr><td align="left">7</td><td align="left"><strong>long getTime( )</strong> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td></tr><tr><td align="left">8</td><td align="left"><strong>int hashCode( )</strong>  返回此对象的哈希码值。</td></tr><tr><td align="left">9</td><td align="left"><strong>void setTime(long time)</strong>   用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</td></tr><tr><td align="left">10</td><td align="left"><strong>String toString( )</strong> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</td></tr></tbody></table></li><li><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前日期</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">nowTime</span> <span class="operator">=</span> date.toString();</span><br><span class="line">        System.out.println(nowTime);<span class="comment">//Mon Oct 24 18:41:15 CST 2022</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><ul><li><p>SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">dNow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>( );</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class="line">    <span class="comment">//当前时间为: 2022-10-25 11-04-45</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日期和时间格式化编码</p><table><thead><tr><th align="left"><strong>字母</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">G</td><td align="left">纪元标记</td><td align="left">AD</td></tr><tr><td align="left">y</td><td align="left">四位年份</td><td align="left">2001</td></tr><tr><td align="left">M</td><td align="left">月份</td><td align="left">July or 07</td></tr><tr><td align="left">d</td><td align="left">一个月的日期</td><td align="left">10</td></tr><tr><td align="left">h</td><td align="left">A.M.&#x2F;P.M. (1~12)格式小时</td><td align="left">12</td></tr><tr><td align="left">H</td><td align="left">一天中的小时 (0~23)</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">分钟数</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">秒数</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒数</td><td align="left">234</td></tr><tr><td align="left">E</td><td align="left">星期几</td><td align="left">Tuesday</td></tr><tr><td align="left">D</td><td align="left">一年中的日子</td><td align="left">360</td></tr><tr><td align="left">F</td><td align="left">一个月中第几周的周几</td><td align="left">2 (second Wed. in July)</td></tr><tr><td align="left">w</td><td align="left">一年中第几周</td><td align="left">40</td></tr><tr><td align="left">W</td><td align="left">一个月中第几周</td><td align="left">1</td></tr><tr><td align="left">a</td><td align="left">A.M.&#x2F;P.M. 标记</td><td align="left">PM</td></tr><tr><td align="left">k</td><td align="left">一天中的小时(1~24)</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">A.M.&#x2F;P.M. (0~11)格式小时</td><td align="left">10</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">Eastern Standard Time</td></tr><tr><td align="left">‘</td><td align="left">文字定界符</td><td align="left">Delimiter</td></tr><tr><td align="left">“</td><td align="left">单引号</td><td align="left">&#96;</td></tr></tbody></table></li><li><p>解析字符串转化为时间(parse()方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-10-25&quot;</span>;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span> (<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">parseTime</span> <span class="operator">=</span> ft.parse(str);</span><br><span class="line">        System.out.println(ft.format(parseTime));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的输入格式有误,请按格式:&quot;</span> + ft.toPattern());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测量时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//设置时间格式</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;hh-mm-ss&quot;</span>);</span><br><span class="line">    <span class="comment">//输出当前时间</span></span><br><span class="line">    System.out.println(form.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    <span class="comment">//提取当前时间毫秒数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//=====================================</span></span><br><span class="line">    <span class="comment">//时间测量部分</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//=====================================</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(form.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    <span class="comment">//计算运行时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">dValue</span> <span class="operator">=</span> (endTime - startTime) / <span class="number">1000</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;时间差:&quot;</span> + dValue + <span class="string">&quot;s&quot;</span>);<span class="comment">//3s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h2><ul><li><p>LocalDate有很多比Date优秀的时间处理方法</p></li><li><p>但是LocalDate用于处理日历，不能处理日以下的时间</p></li><li><p>LocalDate对象创建用静态工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">1999</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        System.out.println(now);<span class="comment">//当前时间</span></span><br><span class="line">        System.out.println(date);<span class="comment">//设置的时间</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>获取年月日周几</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">1999</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        System.out.println(date.getYear());<span class="comment">//1999</span></span><br><span class="line">        System.out.println(date.getMonthValue());<span class="comment">//12</span></span><br><span class="line">        System.out.println(date.getDayOfMonth());<span class="comment">//31</span></span><br><span class="line">        System.out.println(date.getDayOfWeek());<span class="comment">//星期三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获得当前对象多长时间后的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">1999</span>, <span class="number">12</span>, <span class="number">31</span>);</span><br><span class="line">        System.out.println(date);<span class="comment">//1999-12-31</span></span><br><span class="line">        <span class="comment">//20年后</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">twoYearsLater</span> <span class="operator">=</span> date.plusYears(<span class="number">20</span>);</span><br><span class="line">        System.out.println(twoYearsLater);<span class="comment">//2019-12-31</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><p>打印一个日历表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//当前日期对象</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="comment">//获得当月第一天的LocalDate对象</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">firstDay</span> <span class="operator">=</span> date.plusDays(-date.getDayOfMonth() + <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Mon\t&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Tue\t&quot;</span> + <span class="string">&quot;Wed\t&quot;</span> + <span class="string">&quot;Thu\t&quot;</span></span><br><span class="line">                +  <span class="string">&quot;Fri\t&quot;</span> + <span class="string">&quot;Sat\t&quot;</span> + <span class="string">&quot;Sun&quot;</span>);</span><br><span class="line">        <span class="comment">//把第一天的位置调好</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; firstDay.getDayOfWeek().getValue() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;   \t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//如果firstDay对象没有进入下一个月，则继续打印日期</span></span><br><span class="line">        <span class="keyword">while</span> (date.getMonthValue() == firstDay.getMonthValue())&#123;</span><br><span class="line">            <span class="comment">//打印日期</span></span><br><span class="line">            System.out.print(firstDay.getDayOfMonth());</span><br><span class="line">            <span class="comment">//如果打印到当天日期时标记*号</span></span><br><span class="line">            <span class="keyword">if</span> (date.getDayOfMonth() == firstDay.getDayOfMonth())&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对位</span></span><br><span class="line">            System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">//如果打印到的日期是周日时，换一行</span></span><br><span class="line">            <span class="keyword">if</span> (firstDay.getDayOfWeek().getValue() == <span class="number">7</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//日数加一天，直至加到下一个月</span></span><br><span class="line">            firstDay = firstDay.plusDays(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MonTueWedThuFriSatSun</span><br><span class="line">               <span class="number">1</span><span class="number">2</span></span><br><span class="line"><span class="number">3</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"><span class="number">10</span><span class="number">11</span><span class="number">12</span><span class="number">13</span><span class="number">14</span><span class="number">15</span><span class="number">16</span></span><br><span class="line"><span class="number">17</span><span class="number">18</span><span class="number">19</span><span class="number">20</span><span class="number">21</span><span class="number">22</span><span class="number">23</span></span><br><span class="line"><span class="number">24</span><span class="number">25</span><span class="number">26</span>*<span class="number">27</span><span class="number">28</span><span class="number">29</span><span class="number">30</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><ul><li><p>设置或操作日期的特定部分，如分钟，秒，日等。</p></li><li><p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，使用getInstance方法可创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//默认是当前日期</span></span><br></pre></td></tr></table></figure></li><li><p>提取</p><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Calendar.YEAR</td><td align="left">年份</td></tr><tr><td align="left">Calendar.MONTH</td><td align="left">月份</td></tr><tr><td align="left">Calendar.DATE</td><td align="left">日期</td></tr><tr><td align="left">Calendar.DAY_OF_MONTH</td><td align="left">日期，和上面的字段意义完全相同</td></tr><tr><td align="left">Calendar.HOUR</td><td align="left">12小时制的小时</td></tr><tr><td align="left">Calendar.HOUR_OF_DAY</td><td align="left">24小时制的小时</td></tr><tr><td align="left">Calendar.MINUTE</td><td align="left">分钟</td></tr><tr><td align="left">Calendar.SECOND</td><td align="left">秒</td></tr><tr><td align="left">Calendar.DAY_OF_WEEK</td><td align="left">星期几</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//默认是当前日期</span></span><br><span class="line">    System.out.println(c.get(Calendar.YEAR));<span class="comment">//2022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>set设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//默认是当前日期</span></span><br><span class="line">        c.set(<span class="number">2000</span>,<span class="number">7</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR));<span class="comment">//2000</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>add设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//默认是当前日期</span></span><br><span class="line">    c.set(<span class="number">2000</span>,<span class="number">7</span>,<span class="number">12</span>);</span><br><span class="line">    c.add(Calendar.YEAR,<span class="number">20</span>);</span><br><span class="line">    System.out.println(c.get(Calendar.YEAR));<span class="comment">//2000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="GregorianCalendar"><a href="#GregorianCalendar" class="headerlink" title="GregorianCalendar"></a>GregorianCalendar</h2><ul><li><p>GregorianCalendar是Calendar类的一个具体实现。</p></li><li><p>GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p></li><li><p>构造方法</p><table><thead><tr><th><strong>序号</strong></th><th><strong>构造函数和说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>GregorianCalendar()</strong> 在具有默认语言环境的默认时区内使用当前时间构造一个默认的 GregorianCalendar。</td></tr><tr><td>2</td><td><strong>GregorianCalendar(int year, int month, int date)</strong> 在具有默认语言环境的默认时区内构造一个带有给定日期设置的 GregorianCalendar</td></tr><tr><td>3</td><td><strong>GregorianCalendar(int year, int month, int date, int hour, int minute)</strong> 为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</td></tr><tr><td>4</td><td><strong>GregorianCalendar(int year, int month, int date, int hour, int minute, int second)</strong>   为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</td></tr><tr><td>5</td><td><strong>GregorianCalendar(Locale aLocale)</strong> 在具有给定语言环境的默认时区内构造一个基于当前时间的 GregorianCalendar。</td></tr><tr><td>6</td><td><strong>GregorianCalendar(TimeZone zone)</strong> 在具有默认语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</td></tr><tr><td>7</td><td><strong>GregorianCalendar(TimeZone zone, Locale aLocale)</strong>  在具有给定语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</td></tr></tbody></table></li><li><p>方法</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法和说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>void add(int field, int amount)</strong> 根据日历规则，将指定的（有符号的）时间量添加到给定的日历字段中。</td></tr><tr><td>2</td><td><strong>protected void computeFields()</strong> 转换UTC毫秒值为时间域值</td></tr><tr><td>3</td><td><strong>protected void computeTime()</strong> 覆盖Calendar ，转换时间域值为UTC毫秒值</td></tr><tr><td>4</td><td><strong>boolean equals(Object obj)</strong> 比较此 GregorianCalendar 与指定的 Object。</td></tr><tr><td>5</td><td><strong>int get(int field)</strong> 获取指定字段的时间值</td></tr><tr><td>6</td><td><strong>int getActualMaximum(int field)</strong> 返回当前日期，给定字段的最大值</td></tr><tr><td>7</td><td><strong>int getActualMinimum(int field)</strong> 返回当前日期，给定字段的最小值</td></tr><tr><td>8</td><td><strong>int getGreatestMinimum(int field)</strong>  返回此 GregorianCalendar 实例给定日历字段的最高的最小值。</td></tr><tr><td>9</td><td><strong>Date getGregorianChange()</strong> 获得格里高利历的更改日期。</td></tr><tr><td>10</td><td><strong>int getLeastMaximum(int field)</strong> 返回此 GregorianCalendar 实例给定日历字段的最低的最大值</td></tr><tr><td>11</td><td><strong>int getMaximum(int field)</strong> 返回此 GregorianCalendar 实例的给定日历字段的最大值。</td></tr><tr><td>12</td><td><strong>Date getTime()</strong> 获取日历当前时间。</td></tr><tr><td>13</td><td><strong>long getTimeInMillis()</strong> 获取用长整型表示的日历的当前时间</td></tr><tr><td>14</td><td><strong>TimeZone getTimeZone()</strong> 获取时区。</td></tr><tr><td>15</td><td><strong>int getMinimum(int field)</strong> 返回给定字段的最小值。</td></tr><tr><td>16</td><td><strong>int hashCode()</strong> 重写hashCode.</td></tr><tr><td>17</td><td><strong>boolean isLeapYear(int year)</strong> 确定给定的年份是否为闰年。</td></tr><tr><td>18</td><td><strong>void roll(int field, boolean up)</strong> 在给定的时间字段上添加或减去（上&#x2F;下）单个时间单元，不更改更大的字段。</td></tr><tr><td>19</td><td><strong>void set(int field, int value)</strong> 用给定的值设置时间字段。</td></tr><tr><td>20</td><td><strong>void set(int year, int month, int date)</strong> 设置年、月、日的值。</td></tr><tr><td>21</td><td><strong>void set(int year, int month, int date, int hour, int minute)</strong> 设置年、月、日、小时、分钟的值。</td></tr><tr><td>22</td><td><strong>void set(int year, int month, int date, int hour, int minute, int second)</strong> 设置年、月、日、小时、分钟、秒的值。</td></tr><tr><td>23</td><td><strong>void setGregorianChange(Date date)</strong> 设置 GregorianCalendar 的更改日期。</td></tr><tr><td>24</td><td><strong>void setTime(Date date)</strong> 用给定的日期设置Calendar的当前时间。</td></tr><tr><td>25</td><td><strong>void setTimeInMillis(long millis)</strong> 用给定的long型毫秒数设置Calendar的当前时间。</td></tr><tr><td>26</td><td><strong>void setTimeZone(TimeZone value)</strong> 用给定时区值设置当前时区。</td></tr><tr><td>27</td><td><strong>String toString()</strong> 返回代表日历的字符串。</td></tr></tbody></table></li></ul><p>​<div class="tag link"><a class="link-card" title="Calendar" href="https://www.runoob.com/manual/jdk11api/java.base/java/util/Calendar.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">Calendar</p><p class="url">https://www.runoob.com/manual/jdk11api/java.base/java/util/Calendar.html</p></div></a></div> </p><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><ul><li><p>Random类是有规则的随机，在进行随机时，随机算法的起源数字称为种子数(seed)，在种子数的基础上进行一定的变换，从而产生需要的随机数字。</p></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Random</span><span class="params">()</span><span class="comment">//利用当前系统时间生成随机种子</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Random</span><span class="params">(<span class="type">long</span> seed)</span><span class="comment">//通过制定一个种子数进行创建</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的boolean值。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">nextBoolean</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//生成随机字节并将其置于用户提供的 byte 数组中。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">nextBytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line"><span class="comment">//返回下一个伪随机数，它是取自此随机数生成器序列的、在0.0和1.0之间均匀分布的 double值。</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回下一个伪随机数，它是取自此随机数生成器序列的、在0.0和1.0之间均匀分布float值。</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">nextFloat</span><span class="params">()</span></span><br><span class="line"><span class="comment">//返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的double值，其平均值是0.0标准差是1.0。</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">nextGaussian</span><span class="params">()</span>   </span><br><span class="line"><span class="comment">//随机返回一个整数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span>  </span><br><span class="line"><span class="comment">//返回一个[0,n)的随机数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> n)</span> </span><br><span class="line"><span class="comment">//返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span></span><br><span class="line"><span class="comment">//使用单个 long 种子设置此随机数生成器的种子。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setSeed</span><span class="params">(<span class="type">long</span> seed)</span> </span><br></pre></td></tr></table></figure></li><li><p>随机数示例</p><p>使用Random类，一般是生成指定区间的随机数字，下面就一一介绍如何生成对应区间的随机数字。以下生成随机数的代码均使用以下Random对象r进行生成：</p><p>Random r &#x3D; new Random();</p><h3 id="a、生成-0-1-0-区间的小数"><a href="#a、生成-0-1-0-区间的小数" class="headerlink" title="a、生成[0,1.0)区间的小数"></a>a、生成[0,1.0)区间的小数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> r.nextDouble();</span><br><span class="line"></span><br><span class="line">直接使用nextDouble方法获得。</span><br></pre></td></tr></table></figure><h3 id="b、生成-0-5-0-区间的小数"><a href="#b、生成-0-5-0-区间的小数" class="headerlink" title="b、生成[0,5.0)区间的小数"></a>b、生成[0,5.0)区间的小数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> r.nextDouble() * <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">因为nextDouble方法生成的数字区间是[<span class="number">0</span>,<span class="number">1.0</span>)，将该区间扩大<span class="number">5</span>倍即是要求的区间。</span><br><span class="line"></span><br><span class="line">同理，生成[<span class="number">0</span>,d)区间的随机小数，d为任意正的小数，则只需要将nextDouble方法的返回值乘以d即可。</span><br></pre></td></tr></table></figure><h3 id="c、生成-1-2-5-区间的小数"><a href="#c、生成-1-2-5-区间的小数" class="headerlink" title="c、生成[1,2.5)区间的小数"></a>c、生成[1,2.5)区间的小数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> r.nextDouble() * <span class="number">1.5</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">生成[<span class="number">1</span>,<span class="number">2.5</span>)区间的随机小数，则只需要首先生成[<span class="number">0</span>,<span class="number">1.5</span>)区间的随机数字，然后将生成的随机数区间加<span class="number">1</span>即可。</span><br><span class="line"></span><br><span class="line">同理，生成任意非从<span class="number">0</span>开始的小数区间[d1,d2)范围的随机数字(其中d1不等于<span class="number">0</span>)，则只需要首先生成[<span class="number">0</span>,d2-d1)区间的随机数字，然后将生成的随机数字区间加上d1即可。</span><br></pre></td></tr></table></figure><h3 id="d、生成任意整数"><a href="#d、生成任意整数" class="headerlink" title="d、生成任意整数"></a>d、生成任意整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> r.nextInt();</span><br><span class="line"></span><br><span class="line">直接使用nextInt方法即可。</span><br></pre></td></tr></table></figure><h3 id="e、生成-0-10-区间的整数"><a href="#e、生成-0-10-区间的整数" class="headerlink" title="e、生成[0,10)区间的整数"></a>e、生成[0,10)区间的整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">n2 = Math.abs(r.nextInt() % <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">以上两行代码均可生成[<span class="number">0</span>,<span class="number">10</span>)区间的整数。</span><br><span class="line"></span><br><span class="line">第一种实现使用Random类中的nextInt(<span class="type">int</span> n)方法直接实现。</span><br><span class="line"></span><br><span class="line">第二种实现中，首先调用nextInt()方法生成一个任意的<span class="type">int</span>数字，该数字和<span class="number">10</span>取余以后生成的数字区间为(-<span class="number">10</span>,<span class="number">10</span>)，然后再对该区间求绝对值，则得到的区间就是[<span class="number">0</span>,<span class="number">10</span>)了。</span><br><span class="line"></span><br><span class="line">同理，生成任意[<span class="number">0</span>,n)区间的随机整数，都可以使用如下代码：</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> r.nextInt(n);</span><br><span class="line"></span><br><span class="line">n2 = Math.abs(r.nextInt() % n);</span><br></pre></td></tr></table></figure><h3 id="f、生成-0-10-区间的整数"><a href="#f、生成-0-10-区间的整数" class="headerlink" title="f、生成[0,10]区间的整数"></a>f、生成[0,10]区间的整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> r.nextInt(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">n3 = Math.abs(r.nextInt() % <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">相对于整数区间，[<span class="number">0</span>,<span class="number">10</span>]区间和[<span class="number">0</span>,<span class="number">11</span>)区间等价，所以即生成[<span class="number">0</span>,<span class="number">11</span>)区间的整数。</span><br></pre></td></tr></table></figure><h3 id="g、生成-3-15-区间的整数"><a href="#g、生成-3-15-区间的整数" class="headerlink" title="g、生成[-3,15)区间的整数"></a>g、生成[-3,15)区间的整数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> r.nextInt(<span class="number">18</span>) - <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">n4 = Math.abs(r.nextInt() % <span class="number">18</span>) - <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">生成非从<span class="number">0</span>开始区间的随机整数，可以参看上面非从<span class="number">0</span>开始的小数区间实现原理的说明。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVR单片机课程实验</title>
      <link href="/post/6b150cc8.html"/>
      <url>/post/6b150cc8.html</url>
      
        <content type="html"><![CDATA[<h1 id="AVR-Studio4下载"><a href="#AVR-Studio4下载" class="headerlink" title="AVR Studio4下载"></a>AVR Studio4下载</h1><div class="btns rounded grid5">            <a class="button" href='https://cloud.189.cn/web/share?code=EJzIjiUVjmYb' title='下载软件'><i class='fas fa-download'></i>下载软件</a>          </div><p>访问码：c9fo</p><h1 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_1ms</span><span class="params">(<span class="type">void</span>)</span>                 <span class="comment">//1ms延时函数</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">1140</span>;i++);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_nms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>       <span class="comment">//N ms延时函数</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   delay_1ms();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> i= <span class="number">0</span>;</span><br><span class="line">  PORTA =  <span class="number">0xFF</span>  ;</span><br><span class="line">  DDRA  =  <span class="number">0xFF</span>  ;</span><br><span class="line">  DDRE  =  <span class="number">0XFF</span>  ;</span><br><span class="line">  PORTE = <span class="number">0XFF</span>  ;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">8</span>) &#123;</span><br><span class="line"> i = <span class="number">0</span>;</span><br><span class="line"> PORTA = <span class="number">0xFF</span>  ;</span><br><span class="line">&#125;</span><br><span class="line">  PORTA = ~BIT(i++) ;</span><br><span class="line">  delay_nms(<span class="number">500</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="交替闪"><a href="#交替闪" class="headerlink" title="交替闪"></a>交替闪</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_1ms</span><span class="params">(<span class="type">void</span>)</span>                 <span class="comment">//1ms延时函数</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">1140</span>;i++);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_nms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>       <span class="comment">//N ms延时函数</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   delay_1ms();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> i= <span class="number">0</span>;</span><br><span class="line">  PORTA =  <span class="number">0xFF</span>  ;</span><br><span class="line">  DDRA  =  <span class="number">0xFF</span>  ;</span><br><span class="line">  DDRE  =  <span class="number">0XFF</span>  ;</span><br><span class="line">  PORTE = <span class="number">0XFF</span>  ;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">  PORTA = <span class="number">0x55</span> ;</span><br><span class="line">  delay_nms(<span class="number">500</span>) ;</span><br><span class="line">PORTA = <span class="number">0xaa</span> ;</span><br><span class="line">delay_nms(<span class="number">500</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数码显示0-99"><a href="#数码显示0-99" class="headerlink" title="数码显示0-99"></a>数码显示0-99</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  HC_595_init();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">99</span>) i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">  Seg7_Led_display(i);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="点亮数码管"><a href="#点亮数码管" class="headerlink" title="点亮数码管"></a>点亮数码管</h1><ol><li>第一版</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iom128v.h&gt;</span><br><span class="line">#include &lt;macros.h&gt;</span><br><span class="line"></span><br><span class="line">const unsigned <span class="type">char</span> Seg7_Data[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,             <span class="comment">//0,1,2,3,4</span></span><br><span class="line">                                 <span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,             <span class="comment">//5,6,7,8,9</span></span><br><span class="line">         <span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>&#125;;              <span class="comment">//a,b,c,d,e,f</span></span><br><span class="line"><span class="keyword">volatile</span> unsigned <span class="type">char</span> Seg7_Led_Buf[<span class="number">4</span>],point=<span class="number">0</span>,point_pos=<span class="number">0</span>; <span class="comment">//point是小数点标志1代表有小数点point_pos表示小数点位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> DDRC |= (<span class="number">1</span>&lt;&lt;<span class="number">7</span>);</span><br><span class="line"> PORTC &amp;= (<span class="number">1</span>&lt;&lt;<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"> PORTB = <span class="number">0x0F</span>;</span><br><span class="line"> spi_init();</span><br><span class="line"> Seg7_Led_Buf[<span class="number">0</span>]=<span class="number">15</span>;</span><br><span class="line"> Seg7_Led_Buf[<span class="number">1</span>]=<span class="number">16</span>;</span><br><span class="line"> Seg7_Led_Buf[<span class="number">2</span>]=<span class="number">16</span>;</span><br><span class="line"> Seg7_Led_Buf[<span class="number">3</span>]=<span class="number">16</span>;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  HC_595_OUT(<span class="number">0x3F</span>); </span><br><span class="line">  Seg7_Bit0_En(); </span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  Seg7_Bit0_Dis();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">HC_595_OUT</span><span class="params">(unsigned <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">  PORTB &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line"> SPI_MasterTransmit(data);</span><br><span class="line">  PORTB|=(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Seg7_Bit0_En</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> DDRB|=(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line"> PORTB|=(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Seg7_Bit0_Dis</span><span class="params">(<span class="keyword">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line"> DDRB |=(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line"> PORTB &amp;=~(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">SPI_MasterTransmit</span><span class="params">(<span class="type">char</span> Data)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 启动数据传输 */</span></span><br><span class="line">  SPDR = Data;</span><br><span class="line">  <span class="comment">/* 等待传输结束 */</span></span><br><span class="line">  <span class="keyword">while</span>(!(SPSR &amp; (<span class="number">1</span>&lt;&lt;SPIF)))</span><br><span class="line">  ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">spi_init</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  DDRB |= (<span class="number">1</span>&lt;&lt;<span class="number">2</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">1</span>)|(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//设置MOSI，SCK输出</span></span><br><span class="line">  SPCR = (<span class="number">1</span>&lt;&lt;SPE)|(<span class="number">1</span>&lt;&lt;MSTR)|(<span class="number">1</span>&lt;&lt;SPR0)|(<span class="number">1</span>&lt;&lt;SPR1);<span class="comment">//使能SPI，主机模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二版</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;macros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> number[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,             <span class="comment">//0,1,2,3,4</span></span><br><span class="line">                                 <span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,             <span class="comment">//5,6,7,8,9</span></span><br><span class="line">         <span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>&#125;;              <span class="comment">//a,b,c,d,e,f</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//C-&gt; PC7输入低电平</span></span><br><span class="line"> DDRC |= BIT(<span class="number">7</span>); <span class="comment">//0B1000 0000</span></span><br><span class="line"> PORTC &amp;= BIT(<span class="number">7</span>);<span class="comment">//0B0000 0000</span></span><br><span class="line"> </span><br><span class="line"> DDRB = <span class="number">0xff</span>;    <span class="comment">//0b1111 1111</span></span><br><span class="line"> PORTB = <span class="number">0x0F</span>;   <span class="comment">//0B0000 1111</span></span><br><span class="line"> spi_init();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">//高电平点亮</span></span><br><span class="line">  <span class="comment">//个位</span></span><br><span class="line">  in(<span class="number">0x3F</span>);</span><br><span class="line">  PORTB |= BIT(<span class="number">4</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">4</span>);</span><br><span class="line">  <span class="comment">//十位</span></span><br><span class="line">  in(<span class="number">0x06</span>);</span><br><span class="line">  PORTB |= BIT(<span class="number">5</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">5</span>);</span><br><span class="line">  <span class="comment">//百位</span></span><br><span class="line">  in(<span class="number">0x6F</span>);</span><br><span class="line">  PORTB |= BIT(<span class="number">6</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">6</span>);</span><br><span class="line">  <span class="comment">//千位</span></span><br><span class="line">  in(<span class="number">0x71</span>);</span><br><span class="line">  PORTB |= BIT(<span class="number">7</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">7</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制输入数字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">in</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">  PORTB &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//1-&gt;0</span></span><br><span class="line"> <span class="comment">/* 启动数据传输 */</span></span><br><span class="line">  SPDR = data;</span><br><span class="line">  <span class="comment">/* 等待传输结束 */</span></span><br><span class="line">  <span class="keyword">while</span>(!(SPSR &amp; (<span class="number">1</span>&lt;&lt;SPIF)))</span><br><span class="line">  ;</span><br><span class="line">  PORTB|=(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);  <span class="comment">//0-&gt;1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化spi</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">spi_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  SPCR = (<span class="number">1</span>&lt;&lt;SPE)|(<span class="number">1</span>&lt;&lt;MSTR)|(<span class="number">1</span>&lt;&lt;SPR0)|(<span class="number">1</span>&lt;&lt;SPR1);<span class="comment">//使能SPI，主机模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>第3版</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iom128v.h&gt;</span><br><span class="line">#include &lt;macros.h&gt;</span><br><span class="line"></span><br><span class="line">const unsigned <span class="type">char</span> number[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,             <span class="comment">//0,1,2,3,4</span></span><br><span class="line">                                 <span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,             <span class="comment">//5,6,7,8,9</span></span><br><span class="line">         <span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>&#125;;              <span class="comment">//a,b,c,d,e,f</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//n次方函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">powNumber</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> j;</span><br><span class="line"> <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; i; j++)  res *= n;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//返回数的位数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">numberDigits</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> j;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">100</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">if</span> ((n / powNumber(<span class="number">10</span>,j)) == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">         <span class="keyword">return</span> j - <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回个位，十位...</span></span><br><span class="line"><span class="type">int</span> * res(<span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> numberDigits(n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> ns[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span>  (n / powNumber(<span class="number">10</span>,v));</span><br><span class="line">            ns[i++] = n1;</span><br><span class="line">            n %= powNumber(<span class="number">10</span>,v--);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> ns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//个位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">one</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//个位</span></span><br><span class="line">  in(number[n]);</span><br><span class="line">  PORTB |= BIT(<span class="number">4</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//十位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ten</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//十位</span></span><br><span class="line">  in(number[n]);</span><br><span class="line">  PORTB |= BIT(<span class="number">5</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//百位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hundred</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//百位</span></span><br><span class="line">  in(number[n]);</span><br><span class="line">  PORTB |= BIT(<span class="number">6</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//千位</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">thousand</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//千位</span></span><br><span class="line">  in(number[n]);</span><br><span class="line">  PORTB |= BIT(<span class="number">7</span>);</span><br><span class="line">  delay_nus(<span class="number">60</span>); </span><br><span class="line">  PORTB &amp;= ~BIT(<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整数点亮</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">light</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> numberDigits(n);</span><br><span class="line">   <span class="type">int</span> *p;</span><br><span class="line">   p = res(n);</span><br><span class="line">   <span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   one(*(p+j));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    one(*(p+j));</span><br><span class="line">   ten(*(p+j-<span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">2</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   one(*(p+j));</span><br><span class="line">   ten(*(p+j - <span class="number">1</span>));</span><br><span class="line">   hundred(*(p+j - <span class="number">2</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   one(*(p+j));</span><br><span class="line">   ten(*(p+j - <span class="number">1</span>));</span><br><span class="line">   hundred(*(p+j - <span class="number">2</span>));</span><br><span class="line">   thousand(*(p+j - <span class="number">3</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试入口</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="comment">//C-&gt; PC7输出低电平</span></span><br><span class="line"> DDRC |= BIT(<span class="number">7</span>); <span class="comment">//0B1000 0000</span></span><br><span class="line"> PORTC &amp;= BIT(<span class="number">7</span>);<span class="comment">//0B0000 0000</span></span><br><span class="line"> </span><br><span class="line"> DDRB = <span class="number">0xff</span>;    <span class="comment">//0b1111 1111</span></span><br><span class="line"> PORTB = <span class="number">0x0F</span>;   <span class="comment">//0B0000 1111</span></span><br><span class="line"> spi_init();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="comment">//高电平点亮</span></span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">1000</span>) n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) light(n);</span><br><span class="line">  n++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//控制输入数字</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">in</span><span class="params">(unsigned <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">  PORTB &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);<span class="comment">//1-&gt;0</span></span><br><span class="line"> <span class="comment">/* 启动数据传输 */</span></span><br><span class="line">  SPDR = data;</span><br><span class="line">  <span class="comment">/* 等待传输结束 */</span></span><br><span class="line">  <span class="keyword">while</span>(!(SPSR &amp; (<span class="number">1</span>&lt;&lt;SPIF)))</span><br><span class="line">  ;</span><br><span class="line">  PORTB|=(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);  <span class="comment">//0-&gt;1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化spi</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">spi_init</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  SPCR = (<span class="number">1</span>&lt;&lt;SPE)|(<span class="number">1</span>&lt;&lt;MSTR)|(<span class="number">1</span>&lt;&lt;SPR0)|(<span class="number">1</span>&lt;&lt;SPR1);<span class="comment">//使能SPI，主机模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//n次方函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">powNumber</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> j;</span><br><span class="line"> <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; i; j++)  res *= n;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//返回数的位数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">numberDigits</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((n / powNumber(<span class="number">10</span>,j)) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> j - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回个位，十位...</span></span><br><span class="line"><span class="type">int</span> * <span class="title function_">res</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> v = numberDigits(n);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> ns[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> n1 =  (n / powNumber(<span class="number">10</span>,v));</span><br><span class="line">            ns[i++] = n1;</span><br><span class="line">            n %= powNumber(<span class="number">10</span>,v--);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> ns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*  Write C code in this online editor and run it. */</span></span><br><span class="line">   <span class="type">int</span> *n;</span><br><span class="line">   n = res(<span class="number">123</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,*(n + i));</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iom128v.h&gt;</span><br><span class="line">#include &lt;AVRdef.h&gt;</span><br><span class="line"><span class="comment">//中断初始化</span></span><br><span class="line">unsigned <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">timer0_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  TCCR0 |= (<span class="number">1</span> &lt;&lt; CS00);</span><br><span class="line"> TIMSK  = <span class="number">0x01</span>;</span><br><span class="line"> SREG  |= <span class="number">0x80</span>;</span><br><span class="line"> TCNT0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">#pragma interrupt_handler my_int0:<span class="number">17</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">my_int0</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  count++;</span><br><span class="line"> TCNT0 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  unsigned <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  unsigned <span class="type">int</span> j;</span><br><span class="line">  timer0_init();</span><br><span class="line">  HC_595_init();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(count &gt;= <span class="number">32000</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(i==<span class="number">99</span>) i=<span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//for(j = 0;j &lt; 983;j++)</span></span><br><span class="line">  &#125;</span><br><span class="line">      Seg7_Led_display(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">io_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//蜂鸣器</span></span><br><span class="line">    DDRG |= BIT(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//按钮k1设置低电平</span></span><br><span class="line">    DDRD &amp;= ~BIT(<span class="number">0</span>);</span><br><span class="line">    PORTD |= BIT(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//按钮k4设置低电平</span></span><br><span class="line">DDRD &amp;= ~BIT(<span class="number">0</span>);</span><br><span class="line">    PORTD |= BIT(<span class="number">0</span>);</span><br><span class="line">    SFIOR &amp;= ~BIT(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int0_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"> EIMSK =BIT(<span class="number">0</span>)|BIT(<span class="number">3</span>);</span><br><span class="line">EICRA &amp;= ~(BIT(<span class="number">0</span>)|BIT(<span class="number">3</span>));</span><br><span class="line"><span class="comment">//打开全局中断</span></span><br><span class="line">SEI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">buzz</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//蜂鸣器叫</span></span><br><span class="line">PORTG |= BIT(<span class="number">4</span>);</span><br><span class="line">delay_nms(<span class="number">1000</span>);</span><br><span class="line">PORTG &amp;= ~BIT(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  io_init();</span><br><span class="line"> int0_init();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler my_int0:2</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_int0</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   PORTG |= BIT(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler my_int3:8</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_int3</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   PORTG &amp;= ~BIT(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="超声波"><a href="#超声波" class="headerlink" title="超声波"></a>超声波</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;macros.h&gt;</span></span></span><br><span class="line"><span class="comment">// 溢出计数 </span></span><br><span class="line"><span class="type">unsigned</span> counter=<span class="number">0</span> ;</span><br><span class="line"><span class="comment">//测量成功标记            </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> succeed_flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//测量距离</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> dist = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer0_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    TCCR0 |= BIT(<span class="number">0</span>)|BIT(<span class="number">1</span>)|BIT(<span class="number">2</span>);     <span class="comment">/*1024预分频*/</span></span><br><span class="line">    TIMSK  = <span class="number">0x01</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">trig_fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PORTD = BIT(<span class="number">2</span>);</span><br><span class="line">    delay_nms(<span class="number">10</span>);            <span class="comment">/*延时10ms*/</span></span><br><span class="line">    PORTD &amp;= ~BIT(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IO初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">io_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    DDRD = BIT(<span class="number">2</span>);</span><br><span class="line">    DDRD &amp;= ~BIT(<span class="number">3</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler time_ovf:17</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">time_ovf</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   counter++;</span><br><span class="line">   <span class="keyword">if</span>(counter&gt;<span class="number">2</span> &amp;&amp; succeed_flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">          succeed_flag=<span class="number">0</span>;        </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">io_init();           </span><br><span class="line"><span class="comment">//全局中断使能</span></span><br><span class="line">    SEI();</span><br><span class="line">timer0_init(); </span><br><span class="line">HC_595_init();               </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)         </span><br><span class="line">    &#123;</span><br><span class="line">       trig_fun();</span><br><span class="line">   <span class="comment">// 等待上升沿</span></span><br><span class="line">   <span class="keyword">while</span>(! ( ( PIND&amp;BIT(<span class="number">3</span>))&gt;&gt;<span class="number">1</span>) );</span><br><span class="line">   TCNT0 = <span class="number">0</span>; </span><br><span class="line">   counter = <span class="number">0</span>; </span><br><span class="line">   <span class="comment">//等待下降沿</span></span><br><span class="line">       <span class="keyword">while</span>(((PIND&amp;BIT(<span class="number">3</span>))&gt;&gt;<span class="number">1</span>)&amp;&amp;succeed_flag);</span><br><span class="line">   <span class="keyword">if</span>(succeed_flag==<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">          dist=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">         dist = TCNT0 * <span class="number">4.352</span>;</span><br><span class="line"> <span class="comment">//厘米 </span></span><br><span class="line">         dist = dist  + counter*<span class="number">1114</span>;    </span><br><span class="line">         dist = dist * <span class="number">0.5</span>;                         </span><br><span class="line">       &#125;</span><br><span class="line"> <span class="comment">// 数码管显示函数</span></span><br><span class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">1000</span>;i++)</span><br><span class="line">   Seg7_Led_display(dist);</span><br><span class="line">   succeed_flag = <span class="number">1</span>;</span><br><span class="line">   dist = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="步进电机"><a href="#步进电机" class="headerlink" title="步进电机"></a>步进电机</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span>       </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> uint  unsigned int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uchar  FFW[<span class="number">8</span>]=&#123;<span class="number">0xef</span>,<span class="number">0xcf</span>,<span class="number">0xdf</span>,<span class="number">0x9f</span>,<span class="number">0xbf</span>,<span class="number">0x3f</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;;<span class="comment">//正转数组</span></span><br><span class="line">uchar  REV[<span class="number">8</span>]=&#123;<span class="number">0x6f</span>,<span class="number">0x7f</span>,<span class="number">0x3f</span>,<span class="number">0xbf</span>,<span class="number">0x9f</span>,<span class="number">0xdf</span>,<span class="number">0xcf</span>,<span class="number">0xef</span>&#125;;<span class="comment">//反转数组</span></span><br><span class="line">uchar rate;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//初始化  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">io_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//蜂鸣器</span></span><br><span class="line">    DDRG |= BIT(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//按钮k1设置低电平</span></span><br><span class="line">    DDRD &amp;= ~BIT(<span class="number">0</span>);</span><br><span class="line">    PORTD = BIT(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//按钮k4设置低电平</span></span><br><span class="line">DDRD &amp;= ~BIT(<span class="number">0</span>);</span><br><span class="line">    PORTD |= BIT(<span class="number">0</span>);</span><br><span class="line">    SFIOR &amp;= ~BIT(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中断初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"> EIMSK =BIT(<span class="number">0</span>)|BIT(<span class="number">3</span>);</span><br><span class="line">EICRA &amp;= ~(BIT(<span class="number">0</span>)|BIT(<span class="number">3</span>));</span><br><span class="line"><span class="comment">//打开全局中断</span></span><br><span class="line">SEI();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//蜂鸣器</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">buzz</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//蜂鸣器叫</span></span><br><span class="line">PORTG |= BIT(<span class="number">4</span>);</span><br><span class="line">delay_nms(<span class="number">100</span>);</span><br><span class="line">PORTG &amp;= ~BIT(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正转</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">motor_ffw</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">   uchar i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)      <span class="comment">//一个周期转30度</span></span><br><span class="line">    &#123;  </span><br><span class="line">       PORTE = FFW[i];<span class="comment">//取数据</span></span><br><span class="line">       delay_nms(rate);                 <span class="comment">//调节转速</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">motor_rev</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">   uchar i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)      <span class="comment">//一个周期转30度</span></span><br><span class="line">    &#123;  </span><br><span class="line">       PORTE = REV[i]; <span class="comment">//取数据</span></span><br><span class="line">       delay_nms(rate);                 <span class="comment">//调节转速</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">turn</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">//正转</span></span><br><span class="line">   <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line"> motor_ffw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">     motor_rev();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1按键/正转/加速</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler my_int0:2</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_int0</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   flag = <span class="number">1</span>;</span><br><span class="line">   <span class="comment">//rate--;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4按键/反转/减速</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler my_int3:8</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_int3</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   buzz();</span><br><span class="line">   flag = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//rate++;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  io_init();</span><br><span class="line"> int0_init();</span><br><span class="line"> DDRE=<span class="number">0XFF</span>;</span><br><span class="line"> PORTE = <span class="number">0x00</span>;</span><br><span class="line"> rate = <span class="number">3</span>;</span><br><span class="line"> flag = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> turn();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="综合实验，自动检查停车"><a href="#综合实验，自动检查停车" class="headerlink" title="综合实验，自动检查停车"></a>综合实验，自动检查停车</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iom128v.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;AVRdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;macros.h&gt;</span>      </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> uint  unsigned int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//步进电机全局数据</span></span><br><span class="line">uchar  FFW[<span class="number">8</span>]=&#123;<span class="number">0xef</span>,<span class="number">0xcf</span>,<span class="number">0xdf</span>,<span class="number">0x9f</span>,<span class="number">0xbf</span>,<span class="number">0x3f</span>,<span class="number">0x7f</span>,<span class="number">0x6f</span>&#125;;<span class="comment">//正转数组</span></span><br><span class="line">uchar  REV[<span class="number">8</span>]=&#123;<span class="number">0x6f</span>,<span class="number">0x7f</span>,<span class="number">0x3f</span>,<span class="number">0xbf</span>,<span class="number">0x9f</span>,<span class="number">0xdf</span>,<span class="number">0xcf</span>,<span class="number">0xef</span>&#125;;<span class="comment">//反转数组</span></span><br><span class="line">uchar rate;</span><br><span class="line"><span class="comment">// 溢出计数 </span></span><br><span class="line"><span class="type">unsigned</span> counter=<span class="number">0</span> ;</span><br><span class="line"><span class="comment">//测量成功标记            </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> succeed_flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//测量距离</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> dist = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//正转</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">motor_ffw</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">   uchar i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)      <span class="comment">//一个周期转30度</span></span><br><span class="line">    &#123;  </span><br><span class="line">       PORTE = FFW[i];<span class="comment">//取数据</span></span><br><span class="line">       delay_nms(rate);                 <span class="comment">//调节转速</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">motor_rev</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">   uchar i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)      <span class="comment">//一个周期转30度</span></span><br><span class="line">    &#123;  </span><br><span class="line">       PORTE = REV[i]; <span class="comment">//取数据</span></span><br><span class="line">       delay_nms(rate);                 <span class="comment">//调节转速</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步进旋转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">turn</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//正转</span></span><br><span class="line">   <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line"> motor_ffw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//反转</span></span><br><span class="line">   <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">     motor_rev();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//中断初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer0_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    TCCR0 |= BIT(<span class="number">0</span>)|BIT(<span class="number">1</span>)|BIT(<span class="number">2</span>);     <span class="comment">/*1024预分频*/</span></span><br><span class="line">    TIMSK  = <span class="number">0x01</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">trig_fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PORTD = BIT(<span class="number">2</span>);</span><br><span class="line">    delay_nms(<span class="number">10</span>);            <span class="comment">/*延时10ms*/</span></span><br><span class="line">    PORTD &amp;= ~BIT(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IO初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">io_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    DDRD = BIT(<span class="number">2</span>);</span><br><span class="line">    DDRD &amp;= ~BIT(<span class="number">3</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> interrupt_handler time_ovf:17</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">time_ovf</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   counter++;</span><br><span class="line">   <span class="comment">/**if(counter&gt;2 &amp;&amp; succeed_flag==1)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">          succeed_flag=0;        </span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">io_init();           </span><br><span class="line"><span class="comment">//全局中断使能</span></span><br><span class="line">    SEI();</span><br><span class="line">timer0_init(); </span><br><span class="line">HC_595_init(); </span><br><span class="line"><span class="comment">//步进初始化</span></span><br><span class="line">DDRE=<span class="number">0XFF</span>;</span><br><span class="line">PORTE = <span class="number">0x00</span>;</span><br><span class="line">rate = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//正转</span></span><br><span class="line">flag = <span class="number">1</span>;              </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)         </span><br><span class="line">    &#123;</span><br><span class="line">       trig_fun();</span><br><span class="line">   <span class="comment">// 等待上升沿</span></span><br><span class="line">   <span class="keyword">while</span>(! ( ( PIND&amp;BIT(<span class="number">3</span>))&gt;&gt;<span class="number">1</span>) );</span><br><span class="line">   TCNT0 = <span class="number">0</span>; </span><br><span class="line">   counter = <span class="number">0</span>; </span><br><span class="line">   <span class="comment">//等待下降沿</span></span><br><span class="line">       <span class="keyword">while</span>(((PIND&amp;BIT(<span class="number">3</span>))&gt;&gt;<span class="number">1</span>)&amp;&amp;succeed_flag);</span><br><span class="line">   <span class="keyword">if</span>(succeed_flag==<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">             dist=<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">             dist = TCNT0 * <span class="number">4.352</span>;</span><br><span class="line">             <span class="comment">//厘米 </span></span><br><span class="line">             dist = dist  + counter*<span class="number">1114</span>;    </span><br><span class="line">             dist = dist * <span class="number">0.5</span>;                         </span><br><span class="line">       &#125;</span><br><span class="line"> <span class="comment">// 数码管显示函数,如果小于10cm时,停</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">             Seg7_Led_display(dist);</span><br><span class="line">             <span class="keyword">if</span>(dist &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             turn();</span><br><span class="line">   &#125;</span><br><span class="line">   dist = <span class="number">0</span>;</span><br><span class="line">   succeed_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举(enum)</title>
      <link href="/post/633a03ca.html"/>
      <url>/post/633a03ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="枚举介绍"><a href="#枚举介绍" class="headerlink" title="枚举介绍"></a>枚举介绍</h1><ul><li>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</li><li>对于已经确定好的对象，枚举类是一个很好的选择。</li></ul><h1 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h1><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 类型名&#123;</span><br><span class="line">    <span class="comment">//这个声明定义的类型是一个类，它刚好有3个实例</span></span><br><span class="line">    <span class="comment">//在比较两个枚举类型的值时，永远不需要调用equals，而直接使用“==”就可以了。</span></span><br><span class="line">        实例<span class="number">1</span>,实例<span class="number">2</span>,实例<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">        属性;</span><br><span class="line">       <span class="comment">//构造器形参改变，实例的参数也要变</span></span><br><span class="line">        构造器;</span><br><span class="line">        方法;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="枚举类的一些API"><a href="#枚举类的一些API" class="headerlink" title="枚举类的一些API"></a>枚举类的一些API</h1><details blue><summary> API </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Enum <span class="title function_">valueOf</span><span class="params">(Class enumClass, String name)</span></span><br><span class="line">    返回指定名字、给定类的枚举常量。</span><br><span class="line">String <span class="title function_">toString</span><span class="params">( )</span></span><br><span class="line">    返回枚举常量名。</span><br><span class="line"><span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span></span><br><span class="line">    返回枚举常量在<span class="keyword">enum</span>声明中的位置，位置从<span class="number">0</span>开始计数。</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(E other)</span></span><br><span class="line">    如果枚举常量出现在other之前，则返回一个负值；如果<span class="built_in">this</span>==other，则返回<span class="number">0</span>；否则，返回正值。枚举常量的出现次序在<span class="keyword">enum</span>声明中给出。</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li><p>定义多少个实例，调用枚举类时，有多少个实例的构造器被调用，即调用时创建实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN,RED,BLUE;</span><br><span class="line">        Color()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">无参构造器</span><br><span class="line">无参构造器</span><br><span class="line">无参构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>要想改变实例参数列表，需要改变构造器形参列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN(<span class="string">&quot;绿色&quot;</span>),RED,BLUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        </span><br><span class="line">        Color()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Color(String name) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            System.out.println(<span class="string">&quot;有参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="枚举类提供方法"><a href="#枚举类提供方法" class="headerlink" title="枚举类提供方法"></a>枚举类提供方法</h1><ul><li><p>提供方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN(<span class="string">&quot;绿色&quot;</span>,<span class="number">1</span>),RED(<span class="string">&quot;红色&quot;</span>,<span class="number">2</span>),BLUE(<span class="string">&quot;蓝色&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        Color(String name,<span class="type">int</span> index) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            System.out.println(<span class="string">&quot;有参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getColorByIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Color color : Color.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color.getIndex() == index)&#123;</span><br><span class="line">                    <span class="keyword">return</span> color.getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;没有这种颜色&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Color&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, index=&quot;</span> + index +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Color.getColorByIndex(<span class="number">1</span>));<span class="comment">//绿色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><ul><li><p>枚举类可以定义抽象方法，并且不用继承就可实现，为什么呢？</p></li><li><p>因为实例就是Color类的子类的实例，所以能实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">       GREEN&#123;</span><br><span class="line">           <span class="comment">//重写实现</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;我是绿色&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       RED&#123;</span><br><span class="line">           <span class="comment">//重写实现</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;我是红色&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       BLUE&#123;</span><br><span class="line">           <span class="comment">//重写实现</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;我是蓝色&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//抽象方法</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Color.GREEN.colorName();<span class="comment">//我是绿色</span></span><br><span class="line">        Color.RED.colorName();<span class="comment">//我是红色</span></span><br><span class="line">        Color.BLUE.colorName();<span class="comment">//我是蓝色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="枚举遍历"><a href="#枚举遍历" class="headerlink" title="枚举遍历"></a>枚举遍历</h1><ul><li><p>for each遍历:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Color color : Color.values()) &#123;</span><br><span class="line">               System.out.println(color.toString());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="枚举类在switch中使用"><a href="#枚举类在switch中使用" class="headerlink" title="枚举类在switch中使用"></a>枚举类在switch中使用</h1><ul><li><p>用作switch中的case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN,RED,BLUE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">colorTest</span><span class="params">(Color color)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (color)&#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BLUE:</span><br><span class="line">                System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;其他颜色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        colorTest(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h1><ul><li><p>直接实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">ColorInterface</span>&#123;</span><br><span class="line">    GREEN, RED, BLUE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实例实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">ColorInterface</span>&#123;</span><br><span class="line">    GREEN&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是绿色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    RED&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是红色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    BLUE&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是蓝色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一起实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">ColorInterface</span>&#123;</span><br><span class="line">    GREEN&#123;</span><br><span class="line">        <span class="comment">//如果不重写，默认是外部的实现方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是绿色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    RED&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是红色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    BLUE&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是蓝色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="接口实现枚举"><a href="#接口实现枚举" class="headerlink" title="接口实现枚举"></a>接口实现枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Coffee</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">        BLACK_COFFEE, DECAF_COFFEE, LATTE, CAPPUCCINO</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Dessert</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">        FRUIT, CAKE, GELATO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/post/5951da65.html"/>
      <url>/post/5951da65.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口的介绍"><a href="#接口的介绍" class="headerlink" title="接口的介绍"></a>接口的介绍</h1><ul><li>接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</li><li>接口类似于抽象类，没有实例域。</li><li>接口的属性和方法的访问修饰符皆为public</li><li>接口的属性皆为静态常量，接口没有构造函数，接口方法可以为静态方法，默认为抽象方法。</li></ul><h1 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h1><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口属性"><a href="#接口属性" class="headerlink" title="接口属性"></a>接口属性</h1><p>接口的属性皆为静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">HELLO</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(C.NUMBER);<span class="comment">//25</span></span><br><span class="line">        System.out.println(C.HELLO);<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h1><p>接口方法可以为静态方法，默认为抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saidA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saidB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">C</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是saidA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是saidB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.saidA();</span><br><span class="line">        b.saidB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/post/3dbae4e.html"/>
      <url>/post/3dbae4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类介绍"><a href="#抽象类介绍" class="headerlink" title="抽象类介绍"></a>抽象类介绍</h1><ul><li><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p></li><li><p>抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。</p></li><li><p>抽象类由abstract定义，由于需要被继承才能使用，与final修饰符相驳，所以abstract与final修饰符不能同时使用。</p></li></ul><h1 id="抽象类定义"><a href="#抽象类定义" class="headerlink" title="抽象类定义"></a>抽象类定义</h1><p>与普通类无异，多了一个abstract，abstract与final，static修饰符不能公用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    属性;</span><br><span class="line">    构造器;</span><br><span class="line">    方法;</span><br><span class="line">    抽象方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多一个abstract，抽象方法只能声明，不能实现，实现可由子类重写实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h1 id="抽象类与抽象方法的实现"><a href="#抽象类与抽象方法的实现" class="headerlink" title="抽象类与抽象方法的实现"></a>抽象类与抽象方法的实现</h1><ul><li><p><strong>定义一个抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"><span class="comment">//有参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>抽象类与抽象方法的实现</strong></p><p>抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//重写抽象方法，从而实现方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法由子类实现！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建b对象</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        b.said();</span><br><span class="line">        b.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">无参构造器被调用</span><br><span class="line">hello!</span><br><span class="line">抽象方法由子类实现！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类与普通类，接口的区别"><a href="#抽象类与普通类，接口的区别" class="headerlink" title="抽象类与普通类，接口的区别"></a>抽象类与普通类，接口的区别</h1><table><thead><tr><th>区别点</th><th>普通类</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>抽象程度</td><td>不抽象</td><td>半抽象</td><td>抽象</td></tr><tr><td>继承</td><td>单继承</td><td>单继承</td><td>多继承</td></tr><tr><td>实现</td><td>可直接创建对象</td><td>必须继承，再由子类创建对象实现</td><td>需用implements实现，再有实现类实现</td></tr><tr><td>属性</td><td>普通，静态</td><td>普通，静态</td><td>只能是静态，且为常量，即static final 常量名，且访问权限只能为public</td></tr><tr><td>方法</td><td>普通</td><td>可以有抽象方法</td><td>为抽象方法，且默认为public abstract，也可为静态方法。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载与重写</title>
      <link href="/post/c958ca3e.html"/>
      <url>/post/c958ca3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h1 id="重写与重载的区别"><a href="#重写与重载的区别" class="headerlink" title="重写与重载的区别"></a>重写与重载的区别</h1><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（三）——多态</title>
      <link href="/post/43ab45f7.html"/>
      <url>/post/43ab45f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h1><ul><li><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p></li><li><span class='p green'>多态就是同一个接口，使用不同的实例而执行不同操作。</span></li><li><p>多态性是对象多种表现形式的体现。</p></li></ul><h1 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h1><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><h1 id="多态实现"><a href="#多态实现" class="headerlink" title="多态实现"></a>多态实现</h1><ul><li><p><strong>继承(多个继承一个)</strong></p></li><li><p><strong>重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是A&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是B&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是C&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现多态</strong></p><p>A a &#x3D; new A();</p><p>编译类型：等号左边，由声明该变量时使用的类型决定，决定运行时的属性。</p><p>运行类型：等号右边，由实际赋给该变量的对象决定，决定运行时的方法。</p><br><p>测试方法多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.tell();</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.tell();</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法应为运行类型的方法</span></span><br><span class="line">我是A</span><br><span class="line">我是B</span><br><span class="line">我是C</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p>测试属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(b.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        System.out.println(c.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性应为声明类型的属性</span></span><br><span class="line">我是A属性</span><br><span class="line">我是A属性</span><br><span class="line">我是A属性</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（二）——继承</title>
      <link href="/post/50542fe0.html"/>
      <url>/post/50542fe0.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h1><ul><li><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p></li><li><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p></li></ul><p><strong>例子：</strong></p><ul><li>动物——&gt;兔子，猴子：动物是兔子，猴子的父类，兔子，猴子是动物的子类</li><li>同学——&gt;小明，李华：同学是小明，李华的父类，小明，李华是同学的子类</li></ul><p>由此可见，继承满足is-a关系，即什么是什么。</p><h1 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h1><ul><li><p><strong>单继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>idea上：</strong></p><ul><li><span class='p green'>ctrl + h</span>  查看类关系<img src="/post/50542fe0/p1.png" class=""></li><li><p>然后再类关系框上<span class='p green'>ctrl + alt + u</span>查看类关系图</p><img src="/post/50542fe0/p2.png" class=""></li></ul></li><li><p><strong>多级继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p3.png" class=""></li><li><p><strong>多个继承一个</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p4.png" class=""></li><li><p><strong>一个继承多个（多继承）</strong></p><p>java不支持多继承，不过java可以通过连接多个接口，实现多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">B</span>,C&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p5.png" class=""></li></ul><h1 id="继承后的子类"><a href="#继承后的子类" class="headerlink" title="继承后的子类"></a>继承后的子类</h1><ul><li><p><strong>拥有父类非private的属性和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建A类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A类继承B类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见B类并没有加如任何属性，却拥有了A类的b，和tell()方法</p></li><li><p><strong>拥有自己的属性和方法，可以对父类进行扩展。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对上述B类增加一个方法进行扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello!</span></span><br><span class="line">        <span class="comment">//可以调用，拓展了一个方法</span></span><br><span class="line">        bClass.saidBye();<span class="comment">//bye!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>子类可以用自己的方式实现父类的方法(即方法的重写)。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对B类进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        <span class="comment">//重写后，tell()方法输出子类重写后的结果</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello world!</span></span><br><span class="line">        <span class="comment">//可以调用，拓展了一个方法</span></span><br><span class="line">        bClass.saidBye();<span class="comment">//bye!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承提高了类之间的耦合性，是代码之间越来越紧密，独立性越来越差</p></li></ul><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li><p>创建子类对象时，先对父类进行初始化，再对子类进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类无参构造器</span><br><span class="line">子类构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>可用super(形参)控制用哪个构造器对父类初始化，如果父类没有无参构造器，则一定要有super(形参)调用父类有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类有参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类有参构造器</span><br><span class="line">子类构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="this与super关键字"><a href="#this与super关键字" class="headerlink" title="this与super关键字"></a>this与super关键字</h1><ul><li><p><strong>this</strong></p><ul><li><p><strong>作引用，指向当前类本身对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAndGetA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="comment">//this.a --&gt; private int a </span></span><br><span class="line">        <span class="comment">//右边的a为形参</span></span><br><span class="line">        <span class="comment">//将形参a赋值给private int a</span></span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a;<span class="comment">//返回修改后的private int a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Test不存在a时，调用子类的a，当子类a不存在时，调用孙类，依此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAndGetA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>引用构造器（为构造器第一句）</strong></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>(形参);<span class="comment">//类似于方法的重载</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">5</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>super</strong></p><ul><li><p><strong>作引用，指向对象的父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//super.str获取父类str属性</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.tell();<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式类似于this，不过第一个不是本身类，而是父类</p></li><li><p><strong>引用构造器（为构造器第一句）</strong></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(形参);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类str参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//父类str参数的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>小对比</strong></p><table><thead><tr><th align="center">对比</th><th align="center">this</th><th align="center">super</th></tr></thead><tbody><tr><td align="center">引用</td><td align="center">从本类开始</td><td align="center">从父类开始</td></tr><tr><td align="center">构造器(第一句)</td><td align="center">引用本类构造器</td><td align="center">引用父类构造器</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（一）——封装</title>
      <link href="/post/3ff23487.html"/>
      <url>/post/3ff23487.html</url>
      
        <content type="html"><![CDATA[<h1 id="java封装简介"><a href="#java封装简介" class="headerlink" title="java封装简介"></a>java封装简介</h1><ul><li><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p></li><li><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。</p></li><li><p>封装最主要的功能在于<span class='p green'>我们能修改自己的实现代码</span>，而<span class='p green'>不用修改那些调用我们代码的程序片段</span>。</p></li><li><p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p></li></ul><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li><strong>良好的封装能够减少耦合</strong></li><li><strong>类内部的结构可以自由修改</strong></li><li><strong>可以对成员变量进行更精确的控制</strong></li><li><strong>隐藏信息，实现细节</strong></li></ul><h1 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h1><ul><li><p>修改成员变量的访问权限，一般设为private，这样可实现只有本来可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设计get方法，获取变量信息，若可修改，则多加一个set方法，get和set方法应为public，因为要被外界访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法被称为getter方法和setter方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修饰符</title>
      <link href="/post/9cc58f5a.html"/>
      <url>/post/9cc58f5a.html</url>
      
        <content type="html"><![CDATA[<h1 id="修饰符介绍"><a href="#修饰符介绍" class="headerlink" title="修饰符介绍"></a>修饰符介绍</h1><p>修饰符分两类：</p><ul><li><strong>访问修饰符</strong></li><li><strong>非访问修饰符</strong></li></ul><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><p><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String name;</span><br></pre></td></tr></table></figure></li></ul><p>记忆表格</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">子孙类</th><th align="center">不同包</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code>protected</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center"><code>default</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><code>private</code></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><h1 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h1><details blue><summary> static 修饰符 </summary>              <div class='content'>              <ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这里用new TestClass().count++是为了对比明显，</span></span><br><span class="line">        <span class="comment">//正确调用应该是TestClass().count</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通变量例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//定义一个静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main方法是一个静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(count);<span class="comment">//0</span></span><br><span class="line">        saidHello();<span class="comment">//Hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main方法是静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(count);<span class="comment">//报错，不能调用非静态变量</span></span><br><span class="line">        saidHello();<span class="comment">//报错，不能调用非静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>如果想调用非静态变量或方法</p></li></ul></blockquote>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();<span class="comment">//创建本对象</span></span><br><span class="line">        System.out.println(test.count);<span class="comment">//0</span></span><br><span class="line">        test.saidHello();<span class="comment">//Hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details ><summary> final 修饰符 </summary>              <div class='content'>              <ul><li><p><strong>修饰变量</strong></p><p>被final修饰的变量，不能被修改，即常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestClass</span> <span class="variable">testClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line">        testClass.PI = <span class="number">3.1415</span>;<span class="comment">//报错，final定义不能被修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰方法</strong></p><p>被修饰的方法不能被重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">TestClass</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.said();</span><br><span class="line">        System.out.println(<span class="string">&quot;boy!&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰类</strong></p><p>被修饰的类不能被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">TestClass</span>&#123;</span><br><span class="line">&#125;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details blue><summary> abstract 修饰符 </summary>              <div class='content'>              <ul><li><p>抽象类</p><p>被abstract修饰的类称为抽象类，具体查看后续文章</p></li><li><p>抽象方法</p><p>被abstract修饰的类称为抽象方法，具体查看后续文章</p></li></ul>              </div>            </details><details ><summary> synchronized 修饰符 </summary>              <div class='content'>              <ul><li><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">hel</span><span class="params">()</span>&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details blue><summary> volatile 修饰符 </summary>              <div class='content'>              <p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> active;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        active = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        active = <span class="literal">false</span>; <span class="comment">// 第二行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 <strong>第一行</strong> 中缓冲区的 active 值被使用，那么在 <strong>第二行</strong> 的 active 值为 false 时循环不会停止。</p><p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>              </div>            </details><details ><summary> transient 修饰符 </summary>              <div class='content'>              <ul><li><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/post/f281eaca.html"/>
      <url>/post/f281eaca.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h1><p><strong>面向过程（Procedure Oriented 简称PO ：如C语言）：</strong></p><p>解决一个问题，把问题分成一个个函数和数据，然后按顺序执行这些函数，和调用数据。</p><img src="/post/f281eaca/%E8%BF%87%E7%A8%8B.png" class=""><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p><strong>面向对象（Object Oriented简称OO ：如C++，JAVA等语言）：</strong></p><p>解决一个问题，把问题变成一个个对象，然后这个对象里有这个对象的数据和方法，执行问题时，只需要调用需要的对象，再使用对象的方法和数据。</p><img src="/post/f281eaca/%E5%AF%B9%E8%B1%A1.png" class=""><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><p>例子：</p><p>洗衣服</p><p><strong>面向过程的解决方法：</strong></p><ul><li><p>执行加洗衣粉过程；</p></li><li><p>执行加水过程；</p></li><li><p>执行洗衣服过程；</p></li><li><p>执行清洗过程；</p></li><li><p>执行烘干过程；</p></li></ul><p><strong>面向对象的解决方法：</strong></p><p>1.将洗衣服问题分成两个对象，人，洗衣服</p><p>2.人的行为（方法）和字段（变量数据）：加洗衣粉（行为），加多少量（字段）</p><p>3.洗衣机的行为（方法）和字段（变量数据）：加水（行为），清洗（行为），烘干（行为），多少水（字段），清洗多久（字段），烘干多久（字段）</p><p>4.解决问题：</p><p>人(对象)：</p><ul><li>加洗衣粉</li></ul><p>洗衣机（对象）：</p><ul><li>加水</li><li>清洗</li><li>烘干</li></ul><details blue><summary> 面向对象三大基本特性，五大基本特性 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="面向对象的三大基本特征，五大基本原则" href="https://www.cnblogs.com/fzz9/p/8973315.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">面向对象的三大基本特征，五大基本原则</p><p class="url">https://www.cnblogs.com/fzz9/p/8973315.html</p></div></a></div>               </div>            </details><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类（class）是构造对象的模板或蓝图，例如人类，其对应的实例为单个的人，如你，如我，这个实例又称为对象。</p><p>一个类包含方法与字段，方法对应的是动作，字段对应的是属性</p><ul><li>普通类定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//字段</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类之间的关系<ul><li>依赖（“uses-a”） </li><li>聚合（“has-a”）</li><li>继承（“is-a”）</li></ul></li></ul><h1 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h1><ul><li><p>包含的变量</p><ul><li><p>局部变量：位于方法，构造方法的代码块中</p></li><li><p>成员变量：定义于类中，方法体外，又称字段，属性</p><ul><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 属性类型 属性名;</span><br><span class="line"><span class="comment">//name为默认值null</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>访问：对象名.变量名</p></li></ul></li><li><p>类变量：即静态变量，声明于类中，方法体外</p><ul><li>访问：类名.变量名</li></ul></li></ul></li><li><p>构造方法（又称构造器）</p><ul><li><p>构造方法的名称必须与类同名，一个类可以有多个构造方法。</p></li><li><p>没有定义构造方法时，默认存在一个无参构造方法</p></li><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有形参列表称为无参构造器</span></span><br><span class="line">[修饰符] 构造器名(形参列表)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法再创建对象时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用无参构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法</p><ul><li><p>静态方法，加static</p><ul><li>访问：类名.方法名</li></ul></li><li><p>类方法，没加static</p><ul><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 返回值类型 方法名(形参)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void 表示没有返回值</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>访问：对象名.方法名</p></li></ul></li></ul></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li><p>类的实例称为对象</p></li><li><p>对象的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br></pre></td></tr></table></figure></li><li><p>对象声明并实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure></li><li><p>对象创建的内存变化</p><img src="/post/f281eaca/p1.png" class=""></li><li><p>对象方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.tell();</span><br><span class="line">        System.out.println(person.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是一个人</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h1><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li><li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li><li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li><li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。这些将在访问控制章节介绍。</p><p>除了上面提到的几种类型，Java 还有一些特殊的类，如：内部类、匿名类。</p><h1 id="Java-包"><a href="#Java-包" class="headerlink" title="Java 包"></a>Java 包</h1><p>包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure><h1 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h1><p>导入某个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/post/340249a9.html"/>
      <url>/post/340249a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h1><ul><li>数组声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a;<span class="comment">//(建议)</span></span><br><span class="line">或</span><br><span class="line"><span class="type">int</span> a[];</span><br></pre></td></tr></table></figure><ul><li>声明并创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a 数组名称</span></span><br><span class="line"><span class="comment">//new 开辟堆内存</span></span><br><span class="line"><span class="comment">//10 数组长度</span></span><br><span class="line"><span class="comment">//只定义了长度，没有赋值，所有数值默认为0</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>默认值</p></blockquote><p>数值数组默认为0，char数组默认为”空格”，boolean数组默认为false，对象数组默认为null。</p><h1 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h1><ul><li>直接创建并赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//遍历赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><ul><li>for循环遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>for each循环遍历</li></ul><blockquote class="pullquote [class]"><p>语句格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable : collection) statement</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n : a) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h1><ul><li>法一：强行拷贝</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//被拷贝数组-原数组</span></span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝的数组</span></span><br><span class="line">    <span class="comment">//定义一个长度与原数组相同的空数组</span></span><br><span class="line">    <span class="type">int</span>[] aCopy = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">    <span class="comment">//将原数组的内容拷贝到该数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        aCopy[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>法二：使用Arrays类的 copyOf 方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//被拷贝数组-原数组</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//拷贝</span></span><br><span class="line">        <span class="type">int</span>[] aCopy = Arrays.copyOf(a,a.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>copyOf方法还可以用于扩容原数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2*a.length第二个形参为拷贝后数组的长度</span></span><br><span class="line"><span class="type">int</span>[] aCopy = Arrays.copyOf(a,<span class="number">2</span>*a.length);</span><br></pre></td></tr></table></figure></li></ul><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><ul><li>Array的sort方法(用的是快速排序算法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ints为数组</span></span><br><span class="line">Arrays.sort(ints);</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><p>输入一个长度的数组，随机赋值，使其从小到大排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//输入长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">//赋随机值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ints.length; j++) &#123;</span><br><span class="line">        <span class="comment">//10以内的随机数</span></span><br><span class="line">        <span class="comment">//因为Math.random()∈[0,1)</span></span><br><span class="line">        <span class="comment">//所以Math.random() * 10∈[0,10)</span></span><br><span class="line">        ints[j] = (<span class="type">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历一下</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t:ints) &#123;</span><br><span class="line">        System.out.print(t + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序（升序）</span></span><br><span class="line">    Arrays.sort(ints);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//遍历一下排序后的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t:ints) &#123;</span><br><span class="line">        System.out.print(t + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">8</span><span class="number">0</span><span class="number">5</span><span class="number">6</span><span class="number">5</span><span class="number">9</span><span class="number">4</span><span class="number">9</span><span class="number">9</span><span class="number">7</span></span><br><span class="line"><span class="number">0</span><span class="number">4</span><span class="number">5</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span><span class="number">9</span><span class="number">9</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组相关API"><a href="#数组相关API" class="headerlink" title="数组相关API"></a>数组相关API</h1><details ><summary> java.util.Arrays类 </summary>              <div class='content'>              <ul><li><p>static String toString(type[] a) </p><p>返回包含a中数据元素的字符串，这些数据元素被放在括号内，并用逗号分隔。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p></li><li><p>deepToString(type[] a)</p><p>用于多维数组</p></li><li><p>static type copyOf(type[] a, int length) </p></li><li><p>static type copyOfRange(type[] a, int start, int end) </p><p>返回与a类型相同的一个数组，其长度为length或者end-start，数组元素为a的值。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p><p>start　起始下标（包含这个值）。</p><p>end　终止下标（不包含这个值）。这个值可能大于a.length。在这种情况下，结果为0或false。length　拷贝的数据元素长度。如果length值大于a.length，结果为0或false；否则，数组中只有前面length个数据元素的拷贝值。</p></li><li><p>static void sort(type[] a)</p><p>采用优化的快速排序算法对数组进行排序。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p></li><li><p>static int binarySearch(type[] a, type v)</p></li><li><p>static int binarySearch(type[] a, int start, int end,type v) </p><p>采用二分搜索算法查找值v。如果查找成功，则返回相应的下标值；否则，返回一个负数值r。-r-1是为保持a有序v应插入的位置。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的有序数组。</p><p>start　起始下标（包含这个值）。</p><p>end　终止下标（不包含这个值）。</p><p>v　同a的数据元素类型相同的值。</p></li><li><p>static void fill(type[] a, type v)</p><p>将数组的所有数据元素值设置为v。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p><p>v　与a数据元素类型相同的一个值。</p></li><li><p>static boolean equals(type[] a, type[] b)</p><p>如果两个数组大小相同，并且下标相同的元素都对应相等，返回true。</p><p>参数：</p><p>a、b　类型为int、long、short、char、byte、boolean、float或double的两个数组。</p></li></ul>              </div>            </details><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><ul><li><p>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a;</span><br></pre></td></tr></table></figure></li><li><p>声明创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p>赋值</p><ul><li><p>直接赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></li><li><p>遍历赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//遍历赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            a[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            System.out.print(a[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转成toString形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            a[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用Arrays.deepToString(a)方法将多维数组转成字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">toString</span> <span class="operator">=</span> Arrays.deepToString(a);</span><br><span class="line">    System.out.println(toString);<span class="comment">//[[0, 1], [0, 1]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="不规则数组"><a href="#不规则数组" class="headerlink" title="不规则数组"></a>不规则数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">            &#123;<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">toString</span> <span class="operator">=</span> Arrays.deepToString(a);</span><br><span class="line">    System.out.println(toString);<span class="comment">//[[1], [1, 2, 3], [1, 2, 3, 4]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制流程</title>
      <link href="/post/fc724bce.html"/>
      <url>/post/fc724bce.html</url>
      
        <content type="html"><![CDATA[<h1 id="块"><a href="#块" class="headerlink" title="块"></a>块</h1><ol><li>块（即复合语句）是指由一对大括号括起来的若干条简单的Java语句。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>块确定了变量的作用域。</p></li><li><p>一个块可以嵌套在另一个块中。</p></li></ol><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><div class="tabs" id="条件语句"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#条件语句-1">格式</button></li><li class="tab"><button type="button" data-href="#条件语句-2">流程图</button></li><li class="tab"><button type="button" data-href="#条件语句-3">例子</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="条件语句-1"><ul><li>if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement</span><br></pre></td></tr></table></figure><ul><li>if…else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement <span class="keyword">else</span> statement</span><br></pre></td></tr></table></figure><ul><li>if…else if…else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement <span class="keyword">else</span> <span class="keyword">if</span> statement <span class="keyword">else</span> statement</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="条件语句-2"><ul><li>if</li></ul><img src="/post/fc724bce/if.png" class=""><ul><li>if…else</li></ul><img src="/post/fc724bce/if...else.png" class=""><ul><li>if…else if…else</li></ul><img src="/post/fc724bce/if3.png" class=""><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="条件语句-3"><ul><li>if … else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是否为负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是负数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数不是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>if … if else … else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是正数还是负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是正数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数既不是正数也不是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">while循环</button></li><li class="tab"><button type="button" data-href="#-2">do...whlie</button></li><li class="tab"><button type="button" data-href="#-3">for循环</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) statement</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/while.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环结束的条件。</p></blockquote><ul><li>例子</li></ul><blockquote class="pullquote [class]"><p>打印小于n的所有正整数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//打印小于n的所有正整数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)&#123;</span><br><span class="line">        System.out.print(++i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="comment">//每10个数换一行</span></span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">12345678910</span><br><span class="line">11121314151617181920</span><br><span class="line">21222324252627282930</span><br><span class="line">31323334353637383940</span><br><span class="line">41424344454647484950</span><br><span class="line">51525354555657585960</span><br><span class="line">61626364656667686970</span><br><span class="line">71727374757677787980</span><br><span class="line">81828384858687888990</span><br><span class="line">919293949596979899100</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> statement <span class="title function_">while</span><span class="params">(condition)</span></span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/do.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环结束的条件，先进行一次statement，然后再循环</p></blockquote><ul><li>例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.print(++i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> (i &lt; n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ul><li><p>n次循环</p></li><li><p>循环</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) statement</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/for.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环的次数</p></blockquote><ul><li>例子</li></ul><blockquote class="pullquote [class]"><p>打印100个*号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印100个*</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h1><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/switch.png" class=""><ul><li>注意事项</li></ul><ol><li><p>当case 没带break时将执行下一个case或default，直至到break或代码块执行结束</p></li><li><p>case标签可以是char、byte、short或int，枚举常量，从Java SE 7开始，case标签还可以是字符串字面量。</p></li></ol><ul><li>例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//输入一个0-100的分数，分数优[90-100]，良[70-90），合格（60+）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (n/<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><ul><li>break</li></ul><p>中断当前循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><p>添加if (j &#x3D;&#x3D; 3){break; }之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>添加if (j &#x3D;&#x3D; 3){break; }之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可见break中断的只是当前的循环，及 j 那个循环，并没有中断 i 的循环</p><ul><li>带标签break</li></ul><p>可以中断你想到的循环</p><blockquote class="pullquote [class]"><p>标签书写格式：字符加冒号，如：lab:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lab:</span><br></pre></td></tr></table></figure><p>中断 i 的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    lab:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span> lab;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">****</span><br></pre></td></tr></table></figure><ul><li>continue</li></ul><p>中断当前这一次循环，继续剩下循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当打印0-2 4-9，不打印3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>continue也可以带标签</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/post/fc81fbfd.html"/>
      <url>/post/fc81fbfd.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h1><p>Java字符串就是Unicode字符序列。</p><ul><li>直接创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>构造函数创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><p>用substring(a,b)方法，可将字符串拆成b-a长度的一个子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//取前三个字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hel</span><br></pre></td></tr></table></figure><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul><li>‘+’ 号拼接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str + <span class="string">&quot; world!&quot;</span>;</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br></pre></td></tr></table></figure><ul><li>静态方法join方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  &quot;/&quot;为分界</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.join(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;S&quot;</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XL&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S/M/L/XL</span><br></pre></td></tr></table></figure><h1 id="检查字符串是否相等"><a href="#检查字符串是否相等" class="headerlink" title="检查字符串是否相等"></a>检查字符串是否相等</h1><ul><li>equals()</li></ul><p>可以使用equals方法检测两个字符串是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="comment">//检查两个字符串内容是否相等</span></span><br><span class="line">        System.out.println(str.equals(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><ul><li>equalsIgnoreCase()</li></ul><p>不区分大小写，检测两个字符串是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">//检查两个字符串内容是否相等</span></span><br><span class="line">        System.out.println(str.equalsIgnoreCase(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><ul><li>&#x3D;&#x3D;</li></ul><p>“&#x3D;&#x3D;” 检查两个字符串是否属于同一个地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        System.out.println(str == str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><p>因为两个字符串对象的地址不一样，所以为false</p><ul><li><p>compareTo()</p><ol><li>对于数值比较</li></ol><ul><li>如果指定的数与参数相等返回 0。</li><li>如果指定的数小于参数返回 -1。</li><li>如果指定的数大于参数返回 1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span> ;</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">4</span>));</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">3</span>));</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><ol start="2"><li>对于字符串</li></ol><ul><li>字符串与对象进行比较。</li><li>按字典顺序比较两个字符串。</li><li>如果参数字符串等于此字符串，则返回值 0；</li><li>如果此字符串小于字符串参数，则返回一个小于 0 的值；</li><li>如果此字符串大于字符串参数，则返回一个大于 0 的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;hel world&quot;</span>;</span><br><span class="line">        System.out.println(b.compareTo(a));</span><br><span class="line">        System.out.println(b.compareTo(b));</span><br><span class="line">        System.out.println(b.compareTo(c));</span><br><span class="line">        <span class="comment">//返回不相同部分ASCLL码的差值</span></span><br><span class="line">        System.out.println(b.compareTo(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">76</span><br></pre></td></tr></table></figure></li></ul><h1 id="空串与null串"><a href="#空串与null串" class="headerlink" title="空串与null串"></a>空串与null串</h1><ul><li><p>空串：长度为零，内容为空的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.length == <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.equals(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>null串：String变量还可以存放一个特殊的值，名为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str == <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>判断一个字符串非null非空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.length != <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="码点和代码单元"><a href="#码点和代码单元" class="headerlink" title="码点和代码单元"></a>码点和代码单元</h1><ol><li>概念介绍</li></ol><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码单元</button></li><li class="tab"><button type="button" data-href="#-2">Unicode</button></li><li class="tab"><button type="button" data-href="#-3">码点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p class='p red'>代码单元：</p>UTF-16 中，一个代码单元为 16 位，UTF-8 中一个代码单元为 8 位，char数据类型是一个采用UTF-16编码表示Unicode码点的代码单元。<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p class='p red'>Unicode：</p>大多数的常用Unicode字符使用一个代码单元，小部分两个代码单元<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p class='p red'>码点：</p>一个代码点由一个或多个代码单元组成，可以表示在 Unicode 代码空间中的一个值，取值 0x0 到 0x10FFFF，代表一个字符。<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote class="pullquote [class]"><p>简单的理解：</p></blockquote><p>一个char字符，就是一个Unicode字符，一个Unicode就是一个码点，但并不一定是一个代码单元。</p><ol start="2"><li>length方法将返回采用UTF-16编码表示的给定字符串所需要的<span class='p green'>代码单元</span>数量。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();<span class="comment">//n = 5</span></span><br></pre></td></tr></table></figure><ol start="3"><li>str.codePointCount(0,str.length()) 求得码点数值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.codePointCount(<span class="number">0</span>,str.length());<span class="comment">//n = 5</span></span><br></pre></td></tr></table></figure><ol start="4"><li>检查𝕆字符，只有一个码点，但是有两个代码单元</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;𝕆&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.codePointCount(<span class="number">0</span>,str.length());</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> str.length();</span><br><span class="line">        System.out.println(n);<span class="comment">//1    ---说明只有一个码点</span></span><br><span class="line">        System.out.println(m);<span class="comment">//2    ---说明有两个代码单元</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h1><details ><summary> String API </summary>              <div class='content'>              <ul><li><p>char charAt (int index)</p><p>返回给定位置的代码单元。除非对底层的代码单元感兴趣，否则不需要调用这个方法。</p></li><li><p>int codePointAt(int index)</p></li></ul><p>  返回从给定位置开始的码点。</p><ul><li><p>int offsetByCodePoints(int startIndex, int cpCount)</p><p>返回从startIndex代码点开始，位移cpCount后的码点索引。</p></li><li><p>int compareTo(String other)</p></li></ul><p>  按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之后，返回一个正数；如果两个字符串相等，返回0。</p><ul><li>IntStream codePoints()</li></ul><p>  8将这个字符串的码点作为一个流返回。调用toArray将它们放在一个数组中。</p><ul><li>new String(int[ ] codePoints, int offset, int count)</li></ul><p>  5.0用数组中从offset开始的count个码点构造一个字符串。</p><ul><li><p>boolean equals(Object other)</p><p>如果字符串与other相等，返回true。</p></li><li><p>boolean equalsIgnoreCase(String other)<br>如果字符串与other相等（忽略大小写），返回true。</p></li><li><p>boolean startsWith(String prefix)</p></li><li><p>boolean endsWith(String suffix)<br>  如果字符串以suffix开头或结尾，则返回true。</p></li><li><p>int index0f(String str)</p></li><li><p>int index0f(String str, int fromIndex)</p></li><li><p>int index0f(int cp)</p></li><li><p>int index0f(int cp, int fromIndex)<br>  返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromIndex开始计算。如果在原始串中不存在str，返回-1。</p></li><li><p>int lastIndex0f(String str)</p></li><li><p>int lastIndex0f(String str, int fromIndex)</p></li><li><p>int lastindex0f(int cp)</p></li><li><p>int lastindex0f(int cp, int fromIndex)<br>  返回与字符串str或代码点cp匹配的最后一个子串的开始位置。这个位置从原始串尾端或fromIndex开始计算。</p></li><li><p>int length( )<br>  返回字符串的长度。</p></li><li><p>int codePointCount(int startIndex, int endIndex) 5.0<br>  返回startIndex和endIndex-1之间的代码点数量。没有配成对的代用字符将计入代码点。</p></li><li><p>String replace(CharSequence oldString, CharSequence newString)<br>  返回一个新字符串。这个字符串用newString代替原始字符串中所有的oldString。可以用String或StringBuilder对象作为CharSequence参数。</p></li><li><p>String substring(int beginIndex)</p></li><li><p>String substring(int beginIndex, int endIndex)<br>  返回一个新字符串。这个字符串包含原始字符串中从beginIndex到串尾或endIndex-1的所有代码单元。</p></li><li><p>String toLowerCase( )</p></li><li><p>String toUpperCase( )<br>  返回一个新字符串。这个字符串将原始字符串中的大写字母改为小写，或者将原始字符串中的所有小写字母改成了大写字母。</p></li><li><p>String trim( )<br>  返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</p></li><li><p>String join(CharSequence delimiter, CharSequence… elements) 8<br>返回一个新字符串，用给定的定界符连接所有元素。</p></li></ul>              </div>            </details><p>可查JDK8文档</p><ul><li><p><a href="https://docs.oracle.com/javase/8/docs/api/">官网文档</a></p></li><li><p><a href="https://github.com/bigFunny/resource/commit/cea346d9190bac4d6b7139bc8f545bbe914854f2">中文版下载</a></p></li><li><p><a href="https://www.matools.com/api/java8">中文版在线文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/post/f29265a7.html"/>
      <url>/post/f29265a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法 - 相加运算符两侧的值</td><td align="left">A + B等于30</td></tr><tr><td align="left">-</td><td align="left">减法 - 左操作数减去右操作数</td><td align="left">A – B等于-10</td></tr><tr><td align="left">*</td><td align="left">乘法 - 相乘运算符两侧的值</td><td align="left">A * B等于200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法 - 左操作数除以右操作数</td><td align="left">B &#x2F; A等于2</td></tr><tr><td align="left">％</td><td align="left">取模 - 左操作数除以右操作数的余数</td><td align="left">B%A等于0</td></tr><tr><td align="left">++</td><td align="left">自增 - 操作数的值增加1</td><td align="left">B++ 或 ++B 等于 21</td></tr><tr><td align="left">–</td><td align="left">自减 - 操作数的值减少1</td><td align="left">B– 或 –B 等于 19</td></tr></tbody></table><ul><li>++b 与 b++</li></ul><ol><li>++b</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//b先自身加1，再做运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span> + ++b;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = 2</span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><ol start="2"><li>b++</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//b先运算，再自身加1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span> + b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = 1</span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><ol start="3"><li>结果：都是自增，++b是先自增再运算，b++则是先运算再自增</li></ol><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A &#x3D;&#x3D; B）为假(非真)。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A !&#x3D; B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）非真。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; &#x3D; B）为假。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;&#x3D; B）为真。</td></tr></tbody></table><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">按位与运算符，当且仅当两个操作数的某一位都非0时候结果的该位才为1。</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符，只要两个操作数的某一位有一个非0时候结果的该位就为1。</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符，两个操作数的某一位不相同时候结果的该位就为1。</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位补运算符翻转操作数的每一位。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>A为真，B为假</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑”与”运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp;&amp; B）为假。</td></tr><tr><td align="left">| |</td><td align="left">称为逻辑”或”运算符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">（A | | B）为真。</td></tr><tr><td align="left">！</td><td align="left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td align="left">！（A &amp;&amp; B）为真。</td></tr><tr><td align="left">&amp;</td><td align="left">按位”与”运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp; B）为假。</td></tr><tr><td align="left">|</td><td align="left">按位”或”运算符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">(A | B)为真</td></tr><tr><td align="left">^</td><td align="left">按位”异或或”运算符。如果任何两个操作数，两个数不相同时，条件为真。</td><td align="left">(A ^ B)为真</td></tr></tbody></table><ul><li><p>“ &amp;&amp; “ 与 “ &amp; “  的区别</p><p>“ &amp;&amp; “ 又称短路与，A &amp;&amp; B，如果A为假时，不用判断B是否为真，皆为假，</p><p>及当A为假，不再执行B</p><p>&amp;&amp;:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> &amp;&amp; a++ != <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果a = 0,则没有执行a++ != 0</span></span><br><span class="line">        <span class="comment">//如果a = 1,则有执行a++ != 0</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>&amp;:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> &amp; a++ != <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果a = 0,则没有执行a++ != 0</span></span><br><span class="line">        <span class="comment">//如果a = 1,则有执行a++ != 0</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>“||” 与”|”与上述差不多</p></li></ul><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="left">C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td align="left">+ &#x3D;</td><td align="left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="left">C + &#x3D; A等价于C &#x3D; C + A</td></tr><tr><td align="left">- &#x3D;</td><td align="left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="left">C - &#x3D; A等价于C &#x3D; C -  A</td></tr><tr><td align="left">* &#x3D;</td><td align="left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="left">C * &#x3D; A等价于C &#x3D; C * A</td></tr><tr><td align="left">&#x2F; &#x3D;</td><td align="left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="left">C &#x2F; &#x3D; A等价于C &#x3D; C &#x2F; A</td></tr><tr><td align="left">（％）&#x3D;</td><td align="left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="left">C％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td align="left">&lt;&lt; &#x3D;</td><td align="left">左移位赋值运算符</td><td align="left">C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt; &#x3D;</td><td align="left">右移位赋值运算符</td><td align="left">C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="left">＆&#x3D;</td><td align="left">按位与赋值运算符</td><td align="left">C＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td align="left">^ &#x3D;</td><td align="left">按位异或赋值操作符</td><td align="left">C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td align="left">| &#x3D;</td><td align="left">按位或赋值操作符</td><td align="left">C | &#x3D; 2等价于C &#x3D; C | 2</td></tr></tbody></table><h1 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h1><p>（?:）</p><p>判断a与b是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//(逻辑判断)? 判断为真的结果 : 判断为假的结果</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> (a == b) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h1 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h1><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象 instanceof 类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">//判断cat对象是否是Cat类或子类或接口</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> cat <span class="keyword">instanceof</span> Cat;</span><br><span class="line">        System.out.println(b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">+ + - ！〜</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* &#x2F;％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt;&gt; &#x3D; &lt;&lt; &#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">&#x3D;&#x3D;  !&#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据类型</title>
      <link href="/post/40918c0b.html"/>
      <url>/post/40918c0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="java数据类型分类"><a href="#java数据类型分类" class="headerlink" title="java数据类型分类"></a>java数据类型分类</h1><p>数据类型在编程语言中占有重要的地位。<strong>java</strong> 的数据类型分为基本数据类型和引用数据类型。</p><p>java 的数据类型如下图所示：</p><img src="/post/40918c0b/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB.png" class=""><p><strong>基本数据类型</strong>包括：<code>boolean</code>，<code>byte</code>，<code>char</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>float</code> 和 <code>double</code>。</p><p><strong>引用数据类型</strong>：它是以一种特殊的方式指向变量的实体，这种机制类似于 <code>c++</code> 的指针。这类变量在声明的时候不会分配内存，必须要另外的开辟内存空间。</p><h1 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a>java基本数据类型</h1><table><thead><tr><th>关键字</th><th>类型</th><th>位数 (8位一字节)</th><th>取值范围(表示范围)</th></tr></thead><tbody><tr><td>byte</td><td>整型</td><td>8 bit&#x2F;1字节</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>整型</td><td>16 bit&#x2F;2字节</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int</td><td>整型</td><td>32 bit&#x2F;4字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>整型</td><td>64 bit&#x2F;8字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float</td><td>浮点型</td><td>32 bit&#x2F;4字节</td><td>3.402823e+38 ~ 1.401298e-45</td></tr><tr><td>double</td><td>浮点型</td><td>64 bit&#x2F;8字节</td><td>1.797693e+308~ 4.9000000e-324</td></tr><tr><td>char</td><td>字符型</td><td>16 bit&#x2F;2字节</td><td>0 ~ 2^16-1</td></tr><tr><td>boolean</td><td>布尔型</td><td>32&#x2F;8</td><td>true&#x2F;false</td></tr></tbody></table><p><code>整型 </code>：</p><p>整型用于表示没有小数部分的数值，它允许是负数。Java提供了4种整型，<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code></p><p>长整型数值有一个后缀L或l</p><p>从Java 7开始，可以为数字字面量加下划线，</p><p>如用1_000_00（0或0b1111_0100_0010_0100_0000）表示一百万。</p><Br><p><code>浮点型 </code>：</p><p>​double表示这种类型的数值精度是float类型的两倍（有人称之为双精度数值）。</p><p>​float类型的数值有一个后缀F或f（例如，3.14F）。</p><p>​所有的浮点数值计算都遵循<a href="https://zhuanlan.zhihu.com/p/343033661">IEEE 754规范</a>。具体来说，下面是用于表示溢出和出错情况的三个特殊的浮点数值：</p><ul><li><p>正无穷大</p></li><li><p>负无穷大</p></li><li><p>NaN（不是一个数字）</p><p>例如，一个正整数除以0的结果为正无穷大。计算0&#x2F;0或者负数的平方根结果为NaN。</p><Br><p>Double.isNaN(x)检查是否为非数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNaN</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0.0</span>/<span class="number">0</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(Double.isNaN(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NaN</span><br><span class="line">true</span><br></pre></td></tr></table></figure><Br></li></ul><p><code>字符型 </code>:</p><p>char类型原本用于表示单个字符。不过，现在情况已经有所变化。如今，有些<a href="https://www.cnblogs.com/csguo/p/7401874.html">Unicode</a>字符可以用一个char值描述，另外一些Unicode字符则需要两个char值。</p><p>在Java中，char类型描述了UTF-16编码中的一个代码单元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="comment">//char类型的值可以表示为十六进制值，其范围从\u0000到\Uffff。</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;\u09A0&#x27;</span>;</span><br><span class="line">        <span class="comment">//char类型运算结果为int，需要强制转换成char类型</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">char</span>) (a + <span class="number">98</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">ঠ</span><br><span class="line">™</span><br><span class="line">Ã</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/csguo/p/7401874.html">Unicode编码表</a></p><Br><p><code>布尔型 </code>：布尔数据类型只有两个可能的值：真和假。使用此数据类型为跟踪真&#x2F;假条件的简单标记。这种数据类型就表示这一点信息，<strong>但是它的“大小”并不是精确定义</strong></p><p>在符合JVM规范的虚拟机中</p><ul><li><strong>如果boolean是单独使用：boolean占4个字节。</strong></li><li><strong>如果boolean是以“boolean数组”的形式使用：boolean占1个字节。</strong></li></ul><Br><p><code>默认类型 </code>：</p><p>​在没有后标的情况下，浮点型默认为double</p><p>例如：</p><ul><li>(3.14f) 为float型</li><li>(3.14)      默认为double型</li></ul><p>​在没有强制转换的情况下，有变量运算的，整数运算结果为int 型，浮点数运算结果为double型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">1</span>; <span class="comment">//报错,因为x + 1后为int型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><a href="https://www.cnblogs.com/Yuakk/p/14349555.html">变量命名规范</a></li><li>变量声明和初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量a</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//变量a初始化</span></span><br><span class="line">         a = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//连续声明变量b,c变量</span></span><br><span class="line">        <span class="type">int</span> b,c;</span><br><span class="line">        <span class="comment">//b，c初始化</span></span><br><span class="line">        b = c = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//d变量声明及初始化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p><a href="http://www.51gjie.com/java/110.html">常量命名</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义常量PI,常量名要大写</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415926535</span>;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.1415926535</span><br></pre></td></tr></table></figure><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><ol><li>自动类型转换</li></ol><ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul><p>基本类型自动转换图。</p><img src="/post/40918c0b/%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2.png" class=""><p>虚线为可能有精度损失的转换。</p><ol start="2"><li>强制类型转换</li></ol><ul><li><p>强制类型转换通过截断小数部分将浮点值转换为整型。</p></li><li><p>如果试图将一个数值从一种类型强制转换为另一种类型，而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值。例如，（byte）300的实际值为44。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) a;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">44</span><br></pre></td></tr></table></figure><ul><li>boolean不参与转换</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样式收集</title>
      <link href="/post/225321da.html"/>
      <url>/post/225321da.html</url>
      
        <content type="html"><![CDATA[<div class="btns rounded grid5">            <a class="button" href='https://wwd.lanzoul.com/iUk2o04i0n7i' title='下载源码'><i class='fas fa-download'></i>下载源码</a>          </div><p>置顶</p><p>sticky: 1</p><p>图片</p><p>标签标红</p><mark class="hl-label red">xmind</mark> <p>段落标红</p><p class='p red'>Unicode：</p>字体标红<span class='p red'>Unicode：</span>//块<blockquote class="pullquote [class]"><p><a href="https://github.com/bigFunny/resource/blob/main/java%E5%90%8E%E7%AB%AF.xmind">java学习路线</a></p></blockquote><p>连接</p><div class="tag link"><a class="link-card" title="font-awesome v6" href="https://fontawesome.com/icons?from=io"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">font-awesome v6</p><p class="url">https://fontawesome.com/icons?from=io</p></div></a></div> <p>分栏</p><div class="tabs" id="大佬"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#大佬-1">大佬 1</button></li><li class="tab"><button type="button" data-href="#大佬-2">大佬 2</button></li><li class="tab"><button type="button" data-href="#大佬-3">大佬 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="大佬-1"><div class="tag link"><a class="link-card" title="大佬一" href="https://butterfly.js.org/"><div class="left"><img src="https://w.wallhaven.cc/full/j3/wallhaven-j3m8y5.png"/></div><div class="right"><p class="text">大佬一</p><p class="url">https://butterfly.js.org/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-2"><div class="tag link"><a class="link-card" title="大佬二" href="https://tzy1997.com/"><div class="left"><img src="https://w.wallhaven.cc/full/rd/wallhaven-rdwjj7.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://tzy1997.com/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-3"><div class="tag link"><a class="link-card" title="大佬二" href="https://akilar.top/"><div class="left"><img src="https://w.wallhaven.cc/full/6o/wallhaven-6oejgq.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://akilar.top/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>折叠栏</p><details blue><summary> static 修饰符 </summary>              <div class='content'>                            </div>            </details><p>提示框</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note no-icon simple"><p>默认 提示块标签</p></div><div class="note default no-icon simple"><p>default 提示块标签</p></div><div class="note primary no-icon simple"><p>primary 提示块标签</p></div><div class="note success no-icon simple"><p>success 提示块标签</p></div><div class="note info no-icon simple"><p>info 提示块标签</p></div><div class="note warning no-icon simple"><p>warning 提示块标签</p></div><div class="note danger no-icon simple"><p>danger 提示块标签</p></div><div class="note no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue flat"><p>2021年快到了….</p></div><div class="note pink no-icon simple"><p>小心开车 安全至上</p></div><div class="note red no-icon simple"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon simple"><p>剪刀石头布</p></div><div class="note green no-icon simple"><p>前端最讨厌的浏览器</p></div><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>标签</p><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK基本介绍</title>
      <link href="/post/227cc651.html"/>
      <url>/post/227cc651.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDK-基本介绍"><a href="#JDK-基本介绍" class="headerlink" title="JDK 基本介绍"></a>JDK 基本介绍</h1><ol><li>JDK 的全称(Java Development Kit Java 开发工具包)</li></ol><blockquote class="pullquote [class]"><p>JDK &#x3D; JRE + java 的开发工具 [java, javac,javadoc,javap 等] </p></blockquote><ol start="2"><li>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了。</li></ol><h1 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h1><ol><li>JRE(Java Runtime Environment Java 运行环境)</li></ol><blockquote class="pullquote [class]"><p>JRE &#x3D; JVM + Java 的核心类库[类] </p></blockquote><ol start="2"><li>包括 Java 虚拟机(JVM Java Virtual Machine)和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。</li></ol><h1 id="JDK、JRE-和-JVM-的包含关系"><a href="#JDK、JRE-和-JVM-的包含关系" class="headerlink" title="JDK、JRE 和 JVM 的包含关系"></a>JDK、JRE 和 JVM 的包含关系</h1><ol><li><p><strong>JDK &#x3D; JRE +</strong> <strong>开发工具集</strong>（例如 Javac,java 编译工具等) </p></li><li><p><strong>JRE &#x3D; JVM + Java SE</strong> <strong>标准类库</strong>（java 核心类库） </p></li><li><p>如果只想运行开发好的 .class 文件只需要 JRE</p></li></ol><h1 id="JDK-8下载及安装"><a href="#JDK-8下载及安装" class="headerlink" title="JDK 8下载及安装"></a>JDK 8下载及安装</h1><div class="tag link"><a class="link-card" title="别人家教程永远是最好的" href="https://blog.csdn.net/weixin_44887352/article/details/106588830"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">别人家教程永远是最好的</p><p class="url">https://blog.csdn.net/weixin_44887352/article/details/106588830</p></div></a></div> ]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/post/518e617c.html"/>
      <url>/post/518e617c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="常用liux命令"><a href="#常用liux命令" class="headerlink" title="常用liux命令"></a>常用liux命令</h2><p>cd：改变目录</p><p>cd..：回退到上一个目录，直接cd进入默认目录</p><p>pwd：显示当前目录路径</p><p>ls(ll)：列出当前目录中所有文件</p><p>touch：新建一个文件，如touch index.js</p><p>rm：删除一个文件用法与touch差不多</p><p>mkdir：新建一个目录</p><p>rm -f：删除一个文件夹</p><p>mv：移动文件，例：mv index.html src，将index文件移到src</p><p>reset：重新初始化</p><p>clear：清屏</p><p>history：查看历史</p><p>help：帮助</p><p>exit：退出</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>查看配置：git config -l</p><p>查看不同级别的配置文件：</p><ul><li><p>查看系统配置</p><p>git config –system –list</p></li><li><p>查看当前用户</p><p>git config –global –list</p></li></ul><p>用户名字与邮箱配置：</p><ul><li>git config –global user.name “sda”</li><li>git config –global user.email “<a href="mailto:&#x73;&#x64;&#97;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#x73;&#x64;&#97;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a>“</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><img src="/post/518e617c/1662041323233.png" class=""><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><h3 id="项目创建及克隆"><a href="#项目创建及克隆" class="headerlink" title="项目创建及克隆"></a>项目创建及克隆</h3><p>初始化项目（将项目变成git管理的项目）：git init</p><p>克隆远程仓库：git clone [url]</p><p>ps:url 的复制地点</p><h3 id="git基"><a href="#git基" class="headerlink" title="git基"></a>git基</h3><p>查看文件状态：git status [filename] </p><p>查看所有文件状态：git status</p><p>生成公钥：ssh-keygen -t rsa</p><p>1.创建一个文件，用git init将该文件git化</p><p>2.选择克隆或者新创</p><p>3.git add.                                           将所有文件存到暂存区</p><p>4.git commit -m  “消息内容”        提交暂存区内容到本地仓库 </p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><img src="/post/518e617c/1662045623748.png" class=""><h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><p>1.注册</p><p>2.设置公钥</p><p>​生成公钥：ssh-keygen -t rsa</p><p>​ssh-keygen -t rsa -C “邮箱地址”</p><p>​    测试公钥是否绑定成功：ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;</a></p><img src="/post/518e617c/%E5%85%AC%E9%92%A5.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A52.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A53.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A54.png" class=""><p>3.将公钥添加到码云或github中</p><p>4.创建仓库（已经注册了为以下步骤）</p><img src="/post/518e617c/%E4%BB%93%E5%BA%93.png" class=""><p>5.克隆连接本地</p><p>​创建一个文件</p><p>​然后打开git输入：</p><img src="/post/518e617c/git.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化项目（将项目变成git管理的项目）：</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#克隆远程仓库（克隆远程仓库）：</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>6.复制要添加的文件到克隆的文件</p><img src="/post/518e617c/Snipaste_2022-09-05_23-03-05.png" class=""><p>7.**git add .**将文件提供到暂存区</p><img src="/post/518e617c/idea%E4%B8%ADgit%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8F%B0.png" class=""><p>8.git commit 提交到本地仓库</p><img src="/post/518e617c/Snipaste_2022-09-05_23-05-21.png" class=""><p>便于commit</p><p>9.git push 提交到远程仓库</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支但仍然停留在当前分支</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git brand -d dev</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete dev</span><br><span class="line">git branch -dr dev</span><br><span class="line"><span class="comment"># 推送分支到远程仓库</span></span><br><span class="line">git push origin dev</span><br><span class="line"><span class="comment"># 查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">git ls-files</span><br><span class="line"><span class="comment"># 查看本地仓库[dir下]</span></span><br><span class="line">git ls-files <span class="built_in">dir</span>/</span><br><span class="line"><span class="comment"># 删除暂缓区内容</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;</span><br><span class="line"><span class="comment"># 删除暂缓区文件夹下所有文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r --cached <span class="built_in">dir</span>/</span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -d localBranchName</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete remoteBranchName</span><br></pre></td></tr></table></figure><h2 id="一般创建远程项目步骤"><a href="#一般创建远程项目步骤" class="headerlink" title="一般创建远程项目步骤"></a>一般创建远程项目步骤</h2><div class="tabs" id="步骤"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#步骤-1">步骤 1</button></li><li class="tab"><button type="button" data-href="#步骤-2">步骤 2</button></li><li class="tab"><button type="button" data-href="#步骤-3">步骤 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="步骤-1"><blockquote class="pullquote [class]"><p>在githud或者gitee创建仓库</p></blockquote><p>xxxx为你githud或者gitee的名，如<a href="https://github.com/bigFunny">https://github.com/bigFunny</a></p><p>你的github主页:<a href="https://github.com/xxxxx">https://github.com/xxxxx</a></p><p>你的gitee主页:<a href="https://gitee.com/xxxxx">https://gitee.com/xxxxx</a></p><blockquote class="pullquote [class]"><p>点击repositories</p></blockquote><blockquote class="pullquote [class]"><p>点击new</p></blockquote><img src="/post/518e617c/%E4%BB%93%E5%BA%932.png" class=""><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="步骤-2"><blockquote class="pullquote [class]"><p>复制远程仓库路径</p></blockquote><img src="/post/518e617c/%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%B7%AF%E5%BE%84.png" class=""><blockquote class="pullquote [class]"><p>克隆远程仓库</p></blockquote><p>在你喜欢的文件下git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库路径</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="步骤-3"><blockquote class="pullquote [class]"><p>将你的项目复制到带有.git的文件夹下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;骚话&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>如果是push到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-learning</title>
      <link href="/post/7904333c.html"/>
      <url>/post/7904333c.html</url>
      
        <content type="html"><![CDATA[<h1 id="java学习路线"><a href="#java学习路线" class="headerlink" title="java学习路线"></a>java学习路线</h1><img src="/post/7904333c/java.png" class=""><mark class="hl-label red">xmind</mark> 文件下载 <blockquote class="pullquote [class]"><p><a href="https://github.com/bigFunny/resource/blob/main/java%E5%90%8E%E7%AB%AF.xmind">java学习路线</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/post/f76efcad.html"/>
      <url>/post/f76efcad.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="btns rounded grid5">            <a class="button" href='https://wwd.lanzoul.com/iUk2o04i0n7i' title='下载源码'><i class='fas fa-download'></i>下载源码</a>          </div><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nvm off                  // 禁用 Node.js 版本管理(不卸载任何东西)</span><br><span class="line">nvm on                   // 启用 Node.js 版本管理</span><br><span class="line">nvm v || nvm version     // 查看 nvm 版本 </span><br><span class="line">nvm use <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>        // 切换使用指定的版本 node</span><br><span class="line">nvm ls                   // 列出所有安装的版本</span><br><span class="line">nvm list available       // 显示可以安装的所有 Node.js 的版本</span><br><span class="line">nvm ls-remote            // 列出所以远程服务器的版本（官方 node version list）</span><br><span class="line">nvm current              // 显示当前的版本</span><br><span class="line">nvm alias                // 给不同的版本号添加别名</span><br><span class="line">nvm unalias              // 删除已定义的别名</span><br><span class="line">nvm reinstall-packages   // 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm uninstall <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>  // 删除已安装的指定版本，语法与 install 类似</span><br><span class="line">nvm install <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>    // 安装指定版本，可模糊安装，如：安装v6.2.0，既可nvm install v6.2.0，又可nvm install 6.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly</title>
      <link href="/post/18195.html"/>
      <url>/post/18195.html</url>
      
        <content type="html"><![CDATA[<h1 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h1><p>Butterfly支持 <div class="tag link"><a class="link-card" title="font-awesome v6" href="https://fontawesome.com/icons?from=io"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">font-awesome v6</p><p class="url">https://fontawesome.com/icons?from=io</p></div></a></div> 图标</p><p>更新番剧信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80">https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80</a></p></div></div><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99">https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99</a></p></div></div><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%B0%8E%E8%88%AA%E8%8F%9C%E5%96%AE">https://butterfly.js.org/posts/4aa8abbe/#%E5%B0%8E%E8%88%AA%E8%8F%9C%E5%96%AE</a></p></div></div><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC">https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC</a></p></div></div><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99">https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99</a></p></div></div><h2 id="顶部配图"><a href="#顶部配图" class="headerlink" title="顶部配图"></a>顶部配图</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96</a></p></div></div><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96</a></p></div></div><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2</a></p></div></div><h2 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA</a></p></div></div><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%AD%E5%83%8F">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%AD%E5%83%8F</a></p></div></div><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%9C%96%E7%89%87%E6%8F%8F%E8%BF%B0">https://butterfly.js.org/posts/4aa8abbe/#%E5%9C%96%E7%89%87%E6%8F%8F%E8%BF%B0</a></p></div></div><h2 id="复制相关"><a href="#复制相关" class="headerlink" title="复制相关"></a>复制相关</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E8%A4%87%E8%A3%BD%E7%9B%B8%E9%97%9C%E9%85%8D%E7%BD%AE">https://butterfly.js.org/posts/4aa8abbe/#%E8%A4%87%E8%A3%BD%E7%9B%B8%E9%97%9C%E9%85%8D%E7%BD%AE</a></p></div></div><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%8D%9A%E5%AE%A2%E5%B9%B4%E4%BB%BD">https://butterfly.js.org/posts/4aa8abbe/#%E5%8D%9A%E5%AE%A2%E5%B9%B4%E4%BB%BD</a></p></div></div><h2 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B0%A1%E7%B9%81%E8%BD%89%E6%8F%9B">https://butterfly.js.org/posts/4aa8abbe/#%E7%B0%A1%E7%B9%81%E8%BD%89%E6%8F%9B</a></p></div></div><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%81%B4%E9%82%8A%E6%8E%92%E7%89%88">https://butterfly.js.org/posts/4aa8abbe/#%E5%81%B4%E9%82%8A%E6%8E%92%E7%89%88</a></p></div></div><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89</a></p></div></div><h2 id="写博客的常用标签"><a href="#写博客的常用标签" class="headerlink" title="写博客的常用标签"></a>写博客的常用标签</h2><div class="site-card-group"><a class="site-card" href="https://tzy1997.com/articles/0xiipgum"><div class="img"><img src="https://w.wallhaven.cc/full/y8/wallhaven-y8622k.jpg"/></div><div class="info"><img src="https://w.wallhaven.cc/full/o3/wallhaven-o3km89.png"/><span class="title">常用标签</span><span class="desc"> 写博客可能用到的标签外挂</span></div></a></div><h2 id="参考大佬的博客："><a href="#参考大佬的博客：" class="headerlink" title="参考大佬的博客："></a>参考大佬的博客：</h2><div class="tabs" id="大佬"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#大佬-1">大佬 1</button></li><li class="tab"><button type="button" data-href="#大佬-2">大佬 2</button></li><li class="tab"><button type="button" data-href="#大佬-3">大佬 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="大佬-1"><div class="tag link"><a class="link-card" title="大佬一" href="https://butterfly.js.org/"><div class="left"><img src="https://w.wallhaven.cc/full/j3/wallhaven-j3m8y5.png"/></div><div class="right"><p class="text">大佬一</p><p class="url">https://butterfly.js.org/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-2"><div class="tag link"><a class="link-card" title="大佬二" href="https://tzy1997.com/"><div class="left"><img src="https://w.wallhaven.cc/full/rd/wallhaven-rdwjj7.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://tzy1997.com/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-3"><div class="tag link"><a class="link-card" title="大佬二" href="https://akilar.top/"><div class="left"><img src="https://w.wallhaven.cc/full/6o/wallhaven-6oejgq.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://akilar.top/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/post/21358.html"/>
      <url>/post/21358.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><p>视频:<a href="https://www.youtube.com/watch?v=AIqBubK6ZLc">https://www.youtube.com/watch?v=AIqBubK6ZLc</a></p><ul><li>添加文案</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文件名</span><br></pre></td></tr></table></figure><ul><li>添加草稿b</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft b</span><br></pre></td></tr></table></figure><ul><li>公开草稿b</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish b</span><br></pre></td></tr></table></figure><ul><li>创建新目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 目录名</span><br></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>视频：<a href="https://www.youtube.com/watch?v=pfD6FCZdW4Q">https://www.youtube.com/watch?v=pfD6FCZdW4Q</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">title: 页面标题</span><br><span class="line"></span><br><span class="line">date: 页面创建日期</span><br><span class="line"></span><br><span class="line">tags: 标签</span><br><span class="line"></span><br><span class="line">type: 标签、分类和友情链接三个页面需要配置</span><br><span class="line"></span><br><span class="line">categories:分类</span><br><span class="line"></span><br><span class="line">updated: 页面更新日期</span><br><span class="line"></span><br><span class="line">comments: 显示页面评论模块(默认 true)</span><br><span class="line"></span><br><span class="line">description: 页面描述</span><br><span class="line"></span><br><span class="line">keywords: 页面关键字</span><br><span class="line"></span><br><span class="line">top_img: 页面顶部图片</span><br><span class="line"></span><br><span class="line">cover: 文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</span><br><span class="line"></span><br><span class="line">mathjax: 显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">katex: 显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">aside: 显示侧边栏 (默认 true)</span><br><span class="line"></span><br><span class="line">aplayer: 在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</span><br><span class="line"></span><br><span class="line">highlight_shrink: 配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</span><br><span class="line"></span><br><span class="line">copyright: 显示文章版权模块(默认为设置中post_copyright的enable配置)</span><br><span class="line"></span><br><span class="line">copyright_author: 文章版权模块的文章作者</span><br><span class="line"></span><br><span class="line">copyright_author_href: 文章版权模块的文章作者链接</span><br><span class="line"></span><br><span class="line">copyright_url: 文章版权模块的文章连结链接</span><br><span class="line"></span><br><span class="line">copyright_info: 文章版权模块的版权声明文字</span><br><span class="line"></span><br><span class="line">toc: 显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line"></span><br><span class="line">toc_number: 显示toc_number(默认为设置中toc的number配置)</span><br><span class="line"></span><br><span class="line">toc_style_simple: 显示 toc 简洁模式</span><br></pre></td></tr></table></figure><h2 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h2><p>视频：<a href="https://www.youtube.com/watch?v=I07XMi7MHd4&amp;t=1s">https://www.youtube.com/watch?v=I07XMi7MHd4&amp;t=1s</a></p><p>详细文档：<a href="https://hexo.io/docs/tag-plugins">https://hexo.io/docs/tag-plugins</a></p><ul><li>Block Quote</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><ul><li>Code Block</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">额外选项</th><th align="left">描述</th><th align="left">默认</th></tr></thead><tbody><tr><td align="left"><code>line_number</code></td><td align="left">显示行号</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>line_threshold</code></td><td align="left">只要代码块的行数超过这个阈值，就只显示行号。</td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>highlight</code></td><td align="left">启用代码突出显示</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>first_line</code></td><td align="left">指定第一行号</td><td align="left"><code>1</code></td></tr><tr><td align="left"><code>mark</code></td><td align="left">行突出显示特定行，每个值用逗号分隔。使用破折号指定数字范围 示例：<code>mark:1,4-7,10</code>将标记第 1、4 到 7 和 10 行。</td><td align="left"></td></tr><tr><td align="left"><code>wrap</code></td><td align="left">将代码块包装在<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">&#96;&#96;</a></td><td align="left"><code>true</code></td></tr></tbody></table><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">alert(&#x27;Hello World!&#x27;); </span><br></pre></td></tr></table></figure><ul><li>Pull Quote</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>content</p></blockquote><ul><li>jsFiddle</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>Gist</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><script src="//gist.github.com/gist_id.js?file=[filename]"></script><ul><li>iframe</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe src="url" width="[width]" height="[height]" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>Image</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><img src="/path/to/image" class="[class names]" title="[width] [height] " alt="title text"><ul><li>Link</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><ul><li>Include Code</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><ul><li>YouTube</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id [type] [cookie] %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>Vimeo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id [width] [height] %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://player.vimeo.com/video/video_id,[width],[height]" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>Include Posts</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><ul><li>Embed image</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://wallroom.io/img/1920x1200/bg-0f3fc97.jpg&quot; title=&quot;lorem ipsum&quot; alt=&quot;dolor&quot;&gt;</span><br></pre></td></tr></table></figure><img src="https://wallroom.io/img/1920x1200/bg-0f3fc97.jpg" title="实验图" alt="dolor"><ul><li>Raw（解决错误信息）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h2 id="Asset-Folders"><a href="#Asset-Folders" class="headerlink" title="Asset Folders"></a>Asset Folders</h2><img src="/post/21358/p3.png" class=""><p>文件放的地点：</p><img src="/post/21358/p4.png" class="" title="文件放的地方">]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
