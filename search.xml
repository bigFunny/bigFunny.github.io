<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>枚举(enum)</title>
      <link href="/post/633a03ca.html"/>
      <url>/post/633a03ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="枚举介绍"><a href="#枚举介绍" class="headerlink" title="枚举介绍"></a>枚举介绍</h1><ul><li>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</li></ul><h1 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h1><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">enum</span> 类型名&#123;</span><br><span class="line">    <span class="comment">//这个声明定义的类型是一个类，它刚好有3个实例</span></span><br><span class="line">    <span class="comment">//在比较两个枚举类型的值时，永远不需要调用equals，而直接使用“==”就可以了。</span></span><br><span class="line">        实例<span class="number">1</span>,实例<span class="number">2</span>,实例<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">        属性;</span><br><span class="line">       <span class="comment">//构造器形参改变，实例的参数也要变</span></span><br><span class="line">        构造器;</span><br><span class="line">        方法;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li><p>定义多少个实例，调用枚举类时，有多少个实例的构造器被调用，即调用时创建实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN,RED,BLUE;</span><br><span class="line">        Color()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">无参构造器</span><br><span class="line">无参构造器</span><br><span class="line">无参构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>要想改变实例参数列表，需要改变构造器形参列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN(<span class="string">&quot;绿色&quot;</span>),RED,BLUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        </span><br><span class="line">        Color()&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Color(String name) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            System.out.println(<span class="string">&quot;有参构造器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">color</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>构造器形参改变，实例的参数也要变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="枚举类用法"><a href="#枚举类用法" class="headerlink" title="枚举类用法"></a>枚举类用法</h1><ul><li><p>常量</p></li><li><p>用作switch中的case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">        GREEN,RED,BLUE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">colorTest</span><span class="params">(Color color)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (color)&#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BLUE:</span><br><span class="line">                System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;其他颜色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        colorTest(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/post/5951da65.html"/>
      <url>/post/5951da65.html</url>
      
        <content type="html"><![CDATA[<h1 id="接口的介绍"><a href="#接口的介绍" class="headerlink" title="接口的介绍"></a>接口的介绍</h1><ul><li>接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</li><li>接口类似于抽象类，没有实例域。</li><li>接口的属性和方法的访问修饰符皆为public</li><li>接口的属性皆为静态常量，接口没有构造函数，接口方法可以为静态方法，默认为抽象方法。</li></ul><h1 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h1><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口属性"><a href="#接口属性" class="headerlink" title="接口属性"></a>接口属性</h1><p>接口的属性皆为静态常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">HELLO</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(C.NUMBER);<span class="comment">//25</span></span><br><span class="line">        System.out.println(C.HELLO);<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h1><p>接口方法可以为静态方法，默认为抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saidA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saidB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">C</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是saidA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是saidB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">C</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.saidA();</span><br><span class="line">        b.saidB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/post/3dbae4e.html"/>
      <url>/post/3dbae4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象类介绍"><a href="#抽象类介绍" class="headerlink" title="抽象类介绍"></a>抽象类介绍</h1><ul><li><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p></li><li><p>抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。</p></li><li><p>抽象类由abstract定义，由于需要被继承才能使用，与final修饰符相驳，所以abstract与final修饰符不能同时使用。</p></li></ul><h1 id="抽象类定义"><a href="#抽象类定义" class="headerlink" title="抽象类定义"></a>抽象类定义</h1><p>与普通类无异，多了一个abstract，abstract与final，static修饰符不能公用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    属性;</span><br><span class="line">    构造器;</span><br><span class="line">    方法;</span><br><span class="line">    抽象方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多一个abstract，抽象方法只能声明，不能实现，实现可由子类重写实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h1 id="抽象类与抽象方法的实现"><a href="#抽象类与抽象方法的实现" class="headerlink" title="抽象类与抽象方法的实现"></a>抽象类与抽象方法的实现</h1><ul><li><p><strong>定义一个抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"><span class="comment">//有参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>抽象类与抽象方法的实现</strong></p><p>抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//重写抽象方法，从而实现方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法由子类实现！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建b对象</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        b.said();</span><br><span class="line">        b.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">无参构造器被调用</span><br><span class="line">hello!</span><br><span class="line">抽象方法由子类实现！</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="抽象类与普通类，接口的区别"><a href="#抽象类与普通类，接口的区别" class="headerlink" title="抽象类与普通类，接口的区别"></a>抽象类与普通类，接口的区别</h1><table><thead><tr><th>区别点</th><th>普通类</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>抽象程度</td><td>不抽象</td><td>半抽象</td><td>抽象</td></tr><tr><td>继承</td><td>单继承</td><td>单继承</td><td>多继承</td></tr><tr><td>实现</td><td>可直接创建对象</td><td>必须继承，再由子类创建对象实现</td><td>需用implements实现，再有实现类实现</td></tr><tr><td>属性</td><td>普通，静态</td><td>普通，静态</td><td>只能是静态，且为常量，即static final 常量名，且访问权限只能为public</td></tr><tr><td>方法</td><td>普通</td><td>可以有抽象方法</td><td>为抽象方法，且默认为public abstract，也可为静态方法。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法重载与重写</title>
      <link href="/post/c958ca3e.html"/>
      <url>/post/c958ca3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h1><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h1 id="重写与重载的区别"><a href="#重写与重载的区别" class="headerlink" title="重写与重载的区别"></a>重写与重载的区别</h1><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><ul><li>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（三）——多态</title>
      <link href="/post/43ab45f7.html"/>
      <url>/post/43ab45f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="多态概念"><a href="#多态概念" class="headerlink" title="多态概念"></a>多态概念</h1><ul><li><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p></li><li><span class='p green'>多态就是同一个接口，使用不同的实例而执行不同操作。</span></li><li><p>多态性是对象多种表现形式的体现。</p></li></ul><h1 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h1><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><h1 id="多态实现"><a href="#多态实现" class="headerlink" title="多态实现"></a>多态实现</h1><ul><li><p><strong>继承(多个继承一个)</strong></p></li><li><p><strong>重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是A&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是B&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我是C&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现多态</strong></p><p>A a &#x3D; new A();</p><p>编译类型：等号左边，由声明该变量时使用的类型决定，决定运行时的属性。</p><p>运行类型：等号右边，由实际赋给该变量的对象决定，决定运行时的方法。</p><br><p>测试方法多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.tell();</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.tell();</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.tell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法应为运行类型的方法</span></span><br><span class="line">我是A</span><br><span class="line">我是B</span><br><span class="line">我是C</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><br><p>测试属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(b.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        System.out.println(c.str + <span class="string">&quot;属性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性应为声明类型的属性</span></span><br><span class="line">我是A属性</span><br><span class="line">我是A属性</span><br><span class="line">我是A属性</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（二）——继承</title>
      <link href="/post/50542fe0.html"/>
      <url>/post/50542fe0.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承概念"><a href="#继承概念" class="headerlink" title="继承概念"></a>继承概念</h1><ul><li><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p></li><li><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p></li></ul><p><strong>例子：</strong></p><ul><li>动物——&gt;兔子，猴子：动物是兔子，猴子的父类，兔子，猴子是动物的子类</li><li>同学——&gt;小明，李华：同学是小明，李华的父类，小明，李华是同学的子类</li></ul><p>由此可见，继承满足is-a关系，即什么是什么。</p><h1 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h1><ul><li><p><strong>单继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>idea上：</strong></p><ul><li><span class='p green'>ctrl + h</span>  查看类关系<img src="/post/50542fe0/p1.png" class=""></li><li><p>然后再类关系框上<span class='p green'>ctrl + alt + u</span>查看类关系图</p><img src="/post/50542fe0/p2.png" class=""></li></ul></li><li><p><strong>多级继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p3.png" class=""></li><li><p><strong>多个继承一个</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p4.png" class=""></li><li><p><strong>一个继承多个（多继承）</strong></p><p>java不支持多继承，不过java可以通过连接多个接口，实现多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">C</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">B</span>,C&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/post/50542fe0/p5.png" class=""></li></ul><h1 id="继承后的子类"><a href="#继承后的子类" class="headerlink" title="继承后的子类"></a>继承后的子类</h1><ul><li><p><strong>拥有父类非private的属性和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建A类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A类继承B类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见B类并没有加如任何属性，却拥有了A类的b，和tell()方法</p></li><li><p><strong>拥有自己的属性和方法，可以对父类进行扩展。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对上述B类增加一个方法进行扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello!</span></span><br><span class="line">        <span class="comment">//可以调用，拓展了一个方法</span></span><br><span class="line">        bClass.saidBye();<span class="comment">//bye!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>子类可以用自己的方式实现父类的方法(即方法的重写)。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对B类进行修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidBye</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">bClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(bClass.a);<span class="comment">//报错</span></span><br><span class="line">        System.out.println(bClass.b);<span class="comment">//2</span></span><br><span class="line">        <span class="comment">//重写后，tell()方法输出子类重写后的结果</span></span><br><span class="line">        bClass.tell();<span class="comment">//hello world!</span></span><br><span class="line">        <span class="comment">//可以调用，拓展了一个方法</span></span><br><span class="line">        bClass.saidBye();<span class="comment">//bye!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承提高了类之间的耦合性，是代码之间越来越紧密，独立性越来越差</p></li></ul><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><ul><li><p>创建子类对象时，先对父类进行初始化，再对子类进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类无参构造器</span><br><span class="line">子类构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>可用super(形参)控制用哪个构造器对父类初始化，如果父类没有无参构造器，则一定要有super(形参)调用父类有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类有参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父类有参构造器</span><br><span class="line">子类构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="this与super关键字"><a href="#this与super关键字" class="headerlink" title="this与super关键字"></a>this与super关键字</h1><ul><li><p><strong>this</strong></p><ul><li><p><strong>作引用，指向当前类本身对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> a ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAndGetA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="comment">//this.a --&gt; private int a </span></span><br><span class="line">        <span class="comment">//右边的a为形参</span></span><br><span class="line">        <span class="comment">//将形参a赋值给private int a</span></span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a;<span class="comment">//返回修改后的private int a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Test不存在a时，调用子类的a，当子类a不存在时，调用孙类，依此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAndGetA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>引用构造器（为构造器第一句）</strong></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>(形参);<span class="comment">//类似于方法的重载</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">5</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>super</strong></p><ul><li><p><strong>作引用，指向对象的父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//super.str获取父类str属性</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.tell();<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式类似于this，不过第一个不是本身类，而是父类</p></li><li><p><strong>引用构造器（为构造器第一句）</strong></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(形参);</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类str参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();<span class="comment">//父类str参数的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>小对比</strong></p><table><thead><tr><th align="center">对比</th><th align="center">this</th><th align="center">super</th></tr></thead><tbody><tr><td align="center">引用</td><td align="center">从本类开始</td><td align="center">从父类开始</td></tr><tr><td align="center">构造器(第一句)</td><td align="center">引用本类构造器</td><td align="center">引用父类构造器</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象三大特征（一）——封装</title>
      <link href="/post/3ff23487.html"/>
      <url>/post/3ff23487.html</url>
      
        <content type="html"><![CDATA[<h1 id="java封装简介"><a href="#java封装简介" class="headerlink" title="java封装简介"></a>java封装简介</h1><ul><li><p>在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p></li><li><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制。</p></li><li><p>封装最主要的功能在于<span class='p green'>我们能修改自己的实现代码</span>，而<span class='p green'>不用修改那些调用我们代码的程序片段</span>。</p></li><li><p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p></li></ul><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li><strong>良好的封装能够减少耦合</strong></li><li><strong>类内部的结构可以自由修改</strong></li><li><strong>可以对成员变量进行更精确的控制</strong></li><li><strong>隐藏信息，实现细节</strong></li></ul><h1 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h1><ul><li><p>修改成员变量的访问权限，一般设为private，这样可实现只有本来可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设计get方法，获取变量信息，若可修改，则多加一个set方法，get和set方法应为public，因为要被外界访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法被称为getter方法和setter方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修饰符</title>
      <link href="/post/9cc58f5a.html"/>
      <url>/post/9cc58f5a.html</url>
      
        <content type="html"><![CDATA[<h1 id="修饰符介绍"><a href="#修饰符介绍" class="headerlink" title="修饰符介绍"></a>修饰符介绍</h1><p>修饰符分两类：</p><ul><li><strong>访问修饰符</strong></li><li><strong>非访问修饰符</strong></li></ul><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><p><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String name;</span><br></pre></td></tr></table></figure></li><li><p><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String name;</span><br></pre></td></tr></table></figure></li></ul><p>记忆表格</p><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同一包内</th><th align="center">子孙类</th><th align="center">不同包</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code>protected</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center"><code>default</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td><td align="center">N</td></tr><tr><td align="center"><code>private</code></td><td align="center">Y</td><td align="center">N</td><td align="center">N</td><td align="center">N</td></tr></tbody></table><h1 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h1><details blue><summary> static 修饰符 </summary>              <div class='content'>              <ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这里用new TestClass().count++是为了对比明显，</span></span><br><span class="line">        <span class="comment">//正确调用应该是TestClass().count</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通变量例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">TestClass</span>().count++);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个类变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//定义一个静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main方法是一个静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(count);<span class="comment">//0</span></span><br><span class="line">        saidHello();<span class="comment">//Hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//main方法是静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(count);<span class="comment">//报错，不能调用非静态变量</span></span><br><span class="line">        saidHello();<span class="comment">//报错，不能调用非静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>如果想调用非静态变量或方法</p></li></ul></blockquote>        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saidHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();<span class="comment">//创建本对象</span></span><br><span class="line">        System.out.println(test.count);<span class="comment">//0</span></span><br><span class="line">        test.saidHello();<span class="comment">//Hello!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details ><summary> final 修饰符 </summary>              <div class='content'>              <ul><li><p><strong>修饰变量</strong></p><p>被final修饰的变量，不能被修改，即常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestClass</span> <span class="variable">testClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClass</span>();</span><br><span class="line">        testClass.PI = <span class="number">3.1415</span>;<span class="comment">//报错，final定义不能被修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰方法</strong></p><p>被修饰的方法不能被重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">TestClass</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.said();</span><br><span class="line">        System.out.println(<span class="string">&quot;boy!&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>修饰类</strong></p><p>被修饰的类不能被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">TestClass</span>&#123;</span><br><span class="line">&#125;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details blue><summary> abstract 修饰符 </summary>              <div class='content'>              <ul><li><p>抽象类</p><p>被abstract修饰的类称为抽象类，具体查看后续文章</p></li><li><p>抽象方法</p><p>被abstract修饰的类称为抽象方法，具体查看后续文章</p></li></ul>              </div>            </details><details ><summary> synchronized 修饰符 </summary>              <div class='content'>              <ul><li><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">hel</span><span class="params">()</span>&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><details blue><summary> volatile 修饰符 </summary>              <div class='content'>              <p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> active;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        active = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        active = <span class="literal">false</span>; <span class="comment">// 第二行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 <strong>第一行</strong> 中缓冲区的 active 值被使用，那么在 <strong>第二行</strong> 的 active 值为 false 时循环不会停止。</p><p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>              </div>            </details><details ><summary> transient 修饰符 </summary>              <div class='content'>              <ul><li><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/post/f281eaca.html"/>
      <url>/post/f281eaca.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h1><p><strong>面向过程（Procedure Oriented 简称PO ：如C语言）：</strong></p><p>解决一个问题，把问题分成一个个函数和数据，然后按顺序执行这些函数，和调用数据。</p><img src="/post/f281eaca/%E8%BF%87%E7%A8%8B.png" class=""><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p><strong>面向对象（Object Oriented简称OO ：如C++，JAVA等语言）：</strong></p><p>解决一个问题，把问题变成一个个对象，然后这个对象里有这个对象的数据和方法，执行问题时，只需要调用需要的对象，再使用对象的方法和数据。</p><img src="/post/f281eaca/%E5%AF%B9%E8%B1%A1.png" class=""><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><p>例子：</p><p>洗衣服</p><p><strong>面向过程的解决方法：</strong></p><ul><li><p>执行加洗衣粉过程；</p></li><li><p>执行加水过程；</p></li><li><p>执行洗衣服过程；</p></li><li><p>执行清洗过程；</p></li><li><p>执行烘干过程；</p></li></ul><p><strong>面向对象的解决方法：</strong></p><p>1.将洗衣服问题分成两个对象，人，洗衣服</p><p>2.人的行为（方法）和字段（变量数据）：加洗衣粉（行为），加多少量（字段）</p><p>3.洗衣机的行为（方法）和字段（变量数据）：加水（行为），清洗（行为），烘干（行为），多少水（字段），清洗多久（字段），烘干多久（字段）</p><p>4.解决问题：</p><p>人(对象)：</p><ul><li>加洗衣粉</li></ul><p>洗衣机（对象）：</p><ul><li>加水</li><li>清洗</li><li>烘干</li></ul><details blue><summary> 面向对象三大基本特性，五大基本特性 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="面向对象的三大基本特征，五大基本原则" href="https://www.cnblogs.com/fzz9/p/8973315.html"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">面向对象的三大基本特征，五大基本原则</p><p class="url">https://www.cnblogs.com/fzz9/p/8973315.html</p></div></a></div>               </div>            </details><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类（class）是构造对象的模板或蓝图，例如人类，其对应的实例为单个的人，如你，如我，这个实例又称为对象。</p><p>一个类包含方法与字段，方法对应的是动作，字段对应的是属性</p><ul><li>普通类定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//字段</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类之间的关系<ul><li>依赖（“uses-a”） </li><li>聚合（“has-a”）</li><li>继承（“is-a”）</li></ul></li></ul><h1 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h1><ul><li><p>包含的变量</p><ul><li><p>局部变量：位于方法，构造方法的代码块中</p></li><li><p>成员变量：定义于类中，方法体外，又称字段，属性</p><ul><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 属性类型 属性名;</span><br><span class="line"><span class="comment">//name为默认值null</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>访问：对象名.变量名</p></li></ul></li><li><p>类变量：即静态变量，声明于类中，方法体外</p><ul><li>访问：类名.变量名</li></ul></li></ul></li><li><p>构造方法（又称构造器）</p><ul><li><p>构造方法的名称必须与类同名，一个类可以有多个构造方法。</p></li><li><p>没有定义构造方法时，默认存在一个无参构造方法</p></li><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有形参列表称为无参构造器</span></span><br><span class="line">[修饰符] 构造器名(形参列表)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法再创建对象时调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用无参构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法</p><ul><li><p>静态方法，加static</p><ul><li>访问：类名.方法名</li></ul></li><li><p>类方法，没加static</p><ul><li><p>定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 返回值类型 方法名(形参)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void 表示没有返回值</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>访问：对象名.方法名</p></li></ul></li></ul></li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li><p>类的实例称为对象</p></li><li><p>对象的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br></pre></td></tr></table></figure></li><li><p>对象声明并实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure></li><li><p>对象创建的内存变化</p><img src="/post/f281eaca/p1.png" class=""></li><li><p>对象方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.tell();</span><br><span class="line">        System.out.println(person.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是一个人</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h1><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li><li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li><li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li><li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。这些将在访问控制章节介绍。</p><p>除了上面提到的几种类型，Java 还有一些特殊的类，如：内部类、匿名类。</p><h1 id="Java-包"><a href="#Java-包" class="headerlink" title="Java 包"></a>Java 包</h1><p>包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure><h1 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h1><p>导入某个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/post/340249a9.html"/>
      <url>/post/340249a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h1><ul><li>数组声明</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a;<span class="comment">//(建议)</span></span><br><span class="line">或</span><br><span class="line"><span class="type">int</span> a[];</span><br></pre></td></tr></table></figure><ul><li>声明并创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a 数组名称</span></span><br><span class="line"><span class="comment">//new 开辟堆内存</span></span><br><span class="line"><span class="comment">//10 数组长度</span></span><br><span class="line"><span class="comment">//只定义了长度，没有赋值，所有数值默认为0</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>默认值</p></blockquote><p>数值数组默认为0，char数组默认为”空格”，boolean数组默认为false，对象数组默认为null。</p><h1 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h1><ul><li>直接创建并赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//遍历赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h1><ul><li>for循环遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>for each循环遍历</li></ul><blockquote class="pullquote [class]"><p>语句格式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable : collection) statement</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n : a) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h1><ul><li>法一：强行拷贝</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//被拷贝数组-原数组</span></span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝的数组</span></span><br><span class="line">    <span class="comment">//定义一个长度与原数组相同的空数组</span></span><br><span class="line">    <span class="type">int</span>[] aCopy = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">    <span class="comment">//将原数组的内容拷贝到该数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        aCopy[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>法二：使用Arrays类的 copyOf 方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//被拷贝数组-原数组</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//拷贝</span></span><br><span class="line">        <span class="type">int</span>[] aCopy = Arrays.copyOf(a,a.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>copyOf方法还可以用于扩容原数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2*a.length第二个形参为拷贝后数组的长度</span></span><br><span class="line"><span class="type">int</span>[] aCopy = Arrays.copyOf(a,<span class="number">2</span>*a.length);</span><br></pre></td></tr></table></figure></li></ul><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><ul><li>Array的sort方法(用的是快速排序算法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ints为数组</span></span><br><span class="line">Arrays.sort(ints);</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><p>输入一个长度的数组，随机赋值，使其从小到大排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//输入长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="comment">//赋随机值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ints.length; j++) &#123;</span><br><span class="line">        <span class="comment">//10以内的随机数</span></span><br><span class="line">        <span class="comment">//因为Math.random()∈[0,1)</span></span><br><span class="line">        <span class="comment">//所以Math.random() * 10∈[0,10)</span></span><br><span class="line">        ints[j] = (<span class="type">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历一下</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t:ints) &#123;</span><br><span class="line">        System.out.print(t + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序（升序）</span></span><br><span class="line">    Arrays.sort(ints);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//遍历一下排序后的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t:ints) &#123;</span><br><span class="line">        System.out.print(t + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">8</span><span class="number">0</span><span class="number">5</span><span class="number">6</span><span class="number">5</span><span class="number">9</span><span class="number">4</span><span class="number">9</span><span class="number">9</span><span class="number">7</span></span><br><span class="line"><span class="number">0</span><span class="number">4</span><span class="number">5</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span><span class="number">9</span><span class="number">9</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数组相关API"><a href="#数组相关API" class="headerlink" title="数组相关API"></a>数组相关API</h1><details ><summary> java.util.Arrays类 </summary>              <div class='content'>              <ul><li><p>static String toString(type[] a) </p><p>返回包含a中数据元素的字符串，这些数据元素被放在括号内，并用逗号分隔。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p></li><li><p>deepToString(type[] a)</p><p>用于多维数组</p></li><li><p>static type copyOf(type[] a, int length) </p></li><li><p>static type copyOfRange(type[] a, int start, int end) </p><p>返回与a类型相同的一个数组，其长度为length或者end-start，数组元素为a的值。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p><p>start　起始下标（包含这个值）。</p><p>end　终止下标（不包含这个值）。这个值可能大于a.length。在这种情况下，结果为0或false。length　拷贝的数据元素长度。如果length值大于a.length，结果为0或false；否则，数组中只有前面length个数据元素的拷贝值。</p></li><li><p>static void sort(type[] a)</p><p>采用优化的快速排序算法对数组进行排序。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p></li><li><p>static int binarySearch(type[] a, type v)</p></li><li><p>static int binarySearch(type[] a, int start, int end,type v) </p><p>采用二分搜索算法查找值v。如果查找成功，则返回相应的下标值；否则，返回一个负数值r。-r-1是为保持a有序v应插入的位置。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的有序数组。</p><p>start　起始下标（包含这个值）。</p><p>end　终止下标（不包含这个值）。</p><p>v　同a的数据元素类型相同的值。</p></li><li><p>static void fill(type[] a, type v)</p><p>将数组的所有数据元素值设置为v。</p><p>参数：</p><p>a　类型为int、long、short、char、byte、boolean、float或double的数组。</p><p>v　与a数据元素类型相同的一个值。</p></li><li><p>static boolean equals(type[] a, type[] b)</p><p>如果两个数组大小相同，并且下标相同的元素都对应相等，返回true。</p><p>参数：</p><p>a、b　类型为int、long、short、char、byte、boolean、float或double的两个数组。</p></li></ul>              </div>            </details><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><ul><li><p>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a;</span><br></pre></td></tr></table></figure></li><li><p>声明创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br></pre></td></tr></table></figure></li><li><p>赋值</p><ul><li><p>直接赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure></li><li><p>遍历赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//遍历赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            a[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            System.out.print(a[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>转成toString形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            a[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用Arrays.deepToString(a)方法将多维数组转成字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">toString</span> <span class="operator">=</span> Arrays.deepToString(a);</span><br><span class="line">    System.out.println(toString);<span class="comment">//[[0, 1], [0, 1]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="不规则数组"><a href="#不规则数组" class="headerlink" title="不规则数组"></a>不规则数组</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">            &#123;<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">toString</span> <span class="operator">=</span> Arrays.deepToString(a);</span><br><span class="line">    System.out.println(toString);<span class="comment">//[[1], [1, 2, 3], [1, 2, 3, 4]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制流程</title>
      <link href="/post/fc724bce.html"/>
      <url>/post/fc724bce.html</url>
      
        <content type="html"><![CDATA[<h1 id="块"><a href="#块" class="headerlink" title="块"></a>块</h1><ol><li>块（即复合语句）是指由一对大括号括起来的若干条简单的Java语句。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>块确定了变量的作用域。</p></li><li><p>一个块可以嵌套在另一个块中。</p></li></ol><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><div class="tabs" id="条件语句"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#条件语句-1">格式</button></li><li class="tab"><button type="button" data-href="#条件语句-2">流程图</button></li><li class="tab"><button type="button" data-href="#条件语句-3">例子</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="条件语句-1"><ul><li>if</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement</span><br></pre></td></tr></table></figure><ul><li>if…else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement <span class="keyword">else</span> statement</span><br></pre></td></tr></table></figure><ul><li>if…else if…else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement <span class="keyword">else</span> <span class="keyword">if</span> statement <span class="keyword">else</span> statement</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="条件语句-2"><ul><li>if</li></ul><img src="/post/fc724bce/if.png" class=""><ul><li>if…else</li></ul><img src="/post/fc724bce/if...else.png" class=""><ul><li>if…else if…else</li></ul><img src="/post/fc724bce/if3.png" class=""><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="条件语句-3"><ul><li>if … else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是否为负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是负数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数不是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>if … if else … else</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是正数还是负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数是正数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该数既不是正数也不是负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">while循环</button></li><li class="tab"><button type="button" data-href="#-2">do...whlie</button></li><li class="tab"><button type="button" data-href="#-3">for循环</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) statement</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/while.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环结束的条件。</p></blockquote><ul><li>例子</li></ul><blockquote class="pullquote [class]"><p>打印小于n的所有正整数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//打印小于n的所有正整数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)&#123;</span><br><span class="line">        System.out.print(++i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="comment">//每10个数换一行</span></span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">12345678910</span><br><span class="line">11121314151617181920</span><br><span class="line">21222324252627282930</span><br><span class="line">31323334353637383940</span><br><span class="line">41424344454647484950</span><br><span class="line">51525354555657585960</span><br><span class="line">61626364656667686970</span><br><span class="line">71727374757677787980</span><br><span class="line">81828384858687888990</span><br><span class="line">919293949596979899100</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> statement <span class="title function_">while</span><span class="params">(condition)</span></span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/do.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环结束的条件，先进行一次statement，然后再循环</p></blockquote><ul><li>例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.print(++i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> (i &lt; n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ul><li><p>n次循环</p></li><li><p>循环</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) statement</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/for.png" class=""><ul><li>常用条件</li></ul><blockquote class="pullquote [class]"><p>知道循环的次数</p></blockquote><ul><li>例子</li></ul><blockquote class="pullquote [class]"><p>打印100个*号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印100个*</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="多重选择"><a href="#多重选择" class="headerlink" title="多重选择"></a>多重选择</h1><ul><li>语句格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        ...</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流程图</li></ul><img src="/post/fc724bce/switch.png" class=""><ul><li>注意事项</li></ul><ol><li><p>当case 没带break时将执行下一个case或default，直至到break或代码块执行结束</p></li><li><p>case标签可以是char、byte、short或int，枚举常量，从Java SE 7开始，case标签还可以是字符串字面量。</p></li></ol><ul><li>例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//输入一个0-100的分数，分数优[90-100]，良[70-90），合格（60+）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in).nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (n/<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><ul><li>break</li></ul><p>中断当前循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><p>添加if (j &#x3D;&#x3D; 3){break; }之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>添加if (j &#x3D;&#x3D; 3){break; }之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可见break中断的只是当前的循环，及 j 那个循环，并没有中断 i 的循环</p><ul><li>带标签break</li></ul><p>可以中断你想到的循环</p><blockquote class="pullquote [class]"><p>标签书写格式：字符加冒号，如：lab:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lab:</span><br></pre></td></tr></table></figure><p>中断 i 的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    lab:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*\t&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span> lab;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">****</span><br></pre></td></tr></table></figure><ul><li>continue</li></ul><p>中断当前这一次循环，继续剩下循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当打印0-2 4-9，不打印3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">1</span><span class="number">2</span><span class="number">4</span><span class="number">5</span><span class="number">6</span><span class="number">7</span><span class="number">8</span><span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>continue也可以带标签</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/post/fc81fbfd.html"/>
      <url>/post/fc81fbfd.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串介绍"><a href="#字符串介绍" class="headerlink" title="字符串介绍"></a>字符串介绍</h1><p>Java字符串就是Unicode字符序列。</p><ul><li>直接创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>构造函数创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><p>用substring(a,b)方法，可将字符串拆成b-a长度的一个子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//取前三个字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hel</span><br></pre></td></tr></table></figure><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul><li>‘+’ 号拼接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str + <span class="string">&quot; world!&quot;</span>;</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br></pre></td></tr></table></figure><ul><li>静态方法join方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  &quot;/&quot;为分界</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.join(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;S&quot;</span>,<span class="string">&quot;M&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XL&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S/M/L/XL</span><br></pre></td></tr></table></figure><h1 id="检查字符串是否相等"><a href="#检查字符串是否相等" class="headerlink" title="检查字符串是否相等"></a>检查字符串是否相等</h1><ul><li>equals()</li></ul><p>可以使用equals方法检测两个字符串是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="comment">//检查两个字符串内容是否相等</span></span><br><span class="line">        System.out.println(str.equals(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><ul><li>equalsIgnoreCase()</li></ul><p>不区分大小写，检测两个字符串是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">//检查两个字符串内容是否相等</span></span><br><span class="line">        System.out.println(str.equalsIgnoreCase(str2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><ul><li>&#x3D;&#x3D;</li></ul><p>“&#x3D;&#x3D;” 检查两个字符串是否属于同一个地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        System.out.println(str == str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><p>因为两个字符串对象的地址不一样，所以为false</p><ul><li><p>compareTo()</p><ol><li>对于数值比较</li></ol><ul><li>如果指定的数与参数相等返回 0。</li><li>如果指定的数小于参数返回 -1。</li><li>如果指定的数大于参数返回 1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4</span> ;</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">4</span>));</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">3</span>));</span><br><span class="line">        System.out.println(b.compareTo(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><ol start="2"><li>对于字符串</li></ol><ul><li>字符串与对象进行比较。</li><li>按字典顺序比较两个字符串。</li><li>如果参数字符串等于此字符串，则返回值 0；</li><li>如果此字符串小于字符串参数，则返回一个小于 0 的值；</li><li>如果此字符串大于字符串参数，则返回一个大于 0 的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;hel world&quot;</span>;</span><br><span class="line">        System.out.println(b.compareTo(a));</span><br><span class="line">        System.out.println(b.compareTo(b));</span><br><span class="line">        System.out.println(b.compareTo(c));</span><br><span class="line">        <span class="comment">//返回不相同部分ASCLL码的差值</span></span><br><span class="line">        System.out.println(b.compareTo(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0</span><br><span class="line">-1</span><br><span class="line">76</span><br></pre></td></tr></table></figure></li></ul><h1 id="空串与null串"><a href="#空串与null串" class="headerlink" title="空串与null串"></a>空串与null串</h1><ul><li><p>空串：长度为零，内容为空的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.length == <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.equals(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>null串：String变量还可以存放一个特殊的值，名为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str == <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>判断一个字符串非null非空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.length != <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="码点和代码单元"><a href="#码点和代码单元" class="headerlink" title="码点和代码单元"></a>码点和代码单元</h1><ol><li>概念介绍</li></ol><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">代码单元</button></li><li class="tab"><button type="button" data-href="#-2">Unicode</button></li><li class="tab"><button type="button" data-href="#-3">码点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p class='p red'>代码单元：</p>UTF-16 中，一个代码单元为 16 位，UTF-8 中一个代码单元为 8 位，char数据类型是一个采用UTF-16编码表示Unicode码点的代码单元。<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p class='p red'>Unicode：</p>大多数的常用Unicode字符使用一个代码单元，小部分两个代码单元<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p class='p red'>码点：</p>一个代码点由一个或多个代码单元组成，可以表示在 Unicode 代码空间中的一个值，取值 0x0 到 0x10FFFF，代表一个字符。<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote class="pullquote [class]"><p>简单的理解：</p></blockquote><p>一个char字符，就是一个Unicode字符，一个Unicode就是一个码点，但并不一定是一个代码单元。</p><ol start="2"><li>length方法将返回采用UTF-16编码表示的给定字符串所需要的<span class='p green'>代码单元</span>数量。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.length();<span class="comment">//n = 5</span></span><br></pre></td></tr></table></figure><ol start="3"><li>str.codePointCount(0,str.length()) 求得码点数值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.codePointCount(<span class="number">0</span>,str.length());<span class="comment">//n = 5</span></span><br></pre></td></tr></table></figure><ol start="4"><li>检查𝕆字符，只有一个码点，但是有两个代码单元</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;𝕆&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> str.codePointCount(<span class="number">0</span>,str.length());</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> str.length();</span><br><span class="line">        System.out.println(n);<span class="comment">//1    ---说明只有一个码点</span></span><br><span class="line">        System.out.println(m);<span class="comment">//2    ---说明有两个代码单元</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h1><details ><summary> String API </summary>              <div class='content'>              <ul><li><p>char charAt (int index)</p><p>返回给定位置的代码单元。除非对底层的代码单元感兴趣，否则不需要调用这个方法。</p></li><li><p>int codePointAt(int index)</p></li></ul><p>  返回从给定位置开始的码点。</p><ul><li><p>int offsetByCodePoints(int startIndex, int cpCount)</p><p>返回从startIndex代码点开始，位移cpCount后的码点索引。</p></li><li><p>int compareTo(String other)</p></li></ul><p>  按照字典顺序，如果字符串位于other之前，返回一个负数；如果字符串位于other之后，返回一个正数；如果两个字符串相等，返回0。</p><ul><li>IntStream codePoints()</li></ul><p>  8将这个字符串的码点作为一个流返回。调用toArray将它们放在一个数组中。</p><ul><li>new String(int[ ] codePoints, int offset, int count)</li></ul><p>  5.0用数组中从offset开始的count个码点构造一个字符串。</p><ul><li><p>boolean equals(Object other)</p><p>如果字符串与other相等，返回true。</p></li><li><p>boolean equalsIgnoreCase(String other)<br>如果字符串与other相等（忽略大小写），返回true。</p></li><li><p>boolean startsWith(String prefix)</p></li><li><p>boolean endsWith(String suffix)<br>  如果字符串以suffix开头或结尾，则返回true。</p></li><li><p>int index0f(String str)</p></li><li><p>int index0f(String str, int fromIndex)</p></li><li><p>int index0f(int cp)</p></li><li><p>int index0f(int cp, int fromIndex)<br>  返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromIndex开始计算。如果在原始串中不存在str，返回-1。</p></li><li><p>int lastIndex0f(String str)</p></li><li><p>int lastIndex0f(String str, int fromIndex)</p></li><li><p>int lastindex0f(int cp)</p></li><li><p>int lastindex0f(int cp, int fromIndex)<br>  返回与字符串str或代码点cp匹配的最后一个子串的开始位置。这个位置从原始串尾端或fromIndex开始计算。</p></li><li><p>int length( )<br>  返回字符串的长度。</p></li><li><p>int codePointCount(int startIndex, int endIndex) 5.0<br>  返回startIndex和endIndex-1之间的代码点数量。没有配成对的代用字符将计入代码点。</p></li><li><p>String replace(CharSequence oldString, CharSequence newString)<br>  返回一个新字符串。这个字符串用newString代替原始字符串中所有的oldString。可以用String或StringBuilder对象作为CharSequence参数。</p></li><li><p>String substring(int beginIndex)</p></li><li><p>String substring(int beginIndex, int endIndex)<br>  返回一个新字符串。这个字符串包含原始字符串中从beginIndex到串尾或endIndex-1的所有代码单元。</p></li><li><p>String toLowerCase( )</p></li><li><p>String toUpperCase( )<br>  返回一个新字符串。这个字符串将原始字符串中的大写字母改为小写，或者将原始字符串中的所有小写字母改成了大写字母。</p></li><li><p>String trim( )<br>  返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</p></li><li><p>String join(CharSequence delimiter, CharSequence… elements) 8<br>返回一个新字符串，用给定的定界符连接所有元素。</p></li></ul>              </div>            </details><p>可查JDK8文档</p><ul><li><p><a href="https://docs.oracle.com/javase/8/docs/api/">官网文档</a></p></li><li><p><a href="https://github.com/bigFunny/resource/commit/cea346d9190bac4d6b7139bc8f545bbe914854f2">中文版下载</a></p></li><li><p><a href="https://www.matools.com/api/java8">中文版在线文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/post/f29265a7.html"/>
      <url>/post/f29265a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法 - 相加运算符两侧的值</td><td align="left">A + B等于30</td></tr><tr><td align="left">-</td><td align="left">减法 - 左操作数减去右操作数</td><td align="left">A – B等于-10</td></tr><tr><td align="left">*</td><td align="left">乘法 - 相乘运算符两侧的值</td><td align="left">A * B等于200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法 - 左操作数除以右操作数</td><td align="left">B &#x2F; A等于2</td></tr><tr><td align="left">％</td><td align="left">取模 - 左操作数除以右操作数的余数</td><td align="left">B%A等于0</td></tr><tr><td align="left">++</td><td align="left">自增 - 操作数的值增加1</td><td align="left">B++ 或 ++B 等于 21</td></tr><tr><td align="left">–</td><td align="left">自减 - 操作数的值减少1</td><td align="left">B– 或 –B 等于 19</td></tr></tbody></table><ul><li>++b 与 b++</li></ul><ol><li>++b</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//b先自身加1，再做运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span> + ++b;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = 2</span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><ol start="2"><li>b++</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//b先运算，再自身加1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span> + b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = 1</span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><ol start="3"><li>结果：都是自增，++b是先自增再运算，b++则是先运算再自增</li></ol><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A &#x3D;&#x3D; B）为假(非真)。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A !&#x3D; B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）非真。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; &#x3D; B）为假。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;&#x3D; B）为真。</td></tr></tbody></table><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">按位与运算符，当且仅当两个操作数的某一位都非0时候结果的该位才为1。</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符，只要两个操作数的某一位有一个非0时候结果的该位就为1。</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符，两个操作数的某一位不相同时候结果的该位就为1。</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位补运算符翻转操作数的每一位。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>A为真，B为假</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑”与”运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp;&amp; B）为假。</td></tr><tr><td align="left">| |</td><td align="left">称为逻辑”或”运算符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">（A | | B）为真。</td></tr><tr><td align="left">！</td><td align="left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td align="left">！（A &amp;&amp; B）为真。</td></tr><tr><td align="left">&amp;</td><td align="left">按位”与”运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp; B）为假。</td></tr><tr><td align="left">|</td><td align="left">按位”或”运算符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">(A | B)为真</td></tr><tr><td align="left">^</td><td align="left">按位”异或或”运算符。如果任何两个操作数，两个数不相同时，条件为真。</td><td align="left">(A ^ B)为真</td></tr></tbody></table><ul><li><p>“ &amp;&amp; “ 与 “ &amp; “  的区别</p><p>“ &amp;&amp; “ 又称短路与，A &amp;&amp; B，如果A为假时，不用判断B是否为真，皆为假，</p><p>及当A为假，不再执行B</p><p>&amp;&amp;:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> &amp;&amp; a++ != <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果a = 0,则没有执行a++ != 0</span></span><br><span class="line">        <span class="comment">//如果a = 1,则有执行a++ != 0</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>&amp;:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> &amp; a++ != <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果a = 0,则没有执行a++ != 0</span></span><br><span class="line">        <span class="comment">//如果a = 1,则有执行a++ != 0</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>“||” 与”|”与上述差不多</p></li></ul><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="left">C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td align="left">+ &#x3D;</td><td align="left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="left">C + &#x3D; A等价于C &#x3D; C + A</td></tr><tr><td align="left">- &#x3D;</td><td align="left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="left">C - &#x3D; A等价于C &#x3D; C -  A</td></tr><tr><td align="left">* &#x3D;</td><td align="left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="left">C * &#x3D; A等价于C &#x3D; C * A</td></tr><tr><td align="left">&#x2F; &#x3D;</td><td align="left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="left">C &#x2F; &#x3D; A等价于C &#x3D; C &#x2F; A</td></tr><tr><td align="left">（％）&#x3D;</td><td align="left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="left">C％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td align="left">&lt;&lt; &#x3D;</td><td align="left">左移位赋值运算符</td><td align="left">C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt; &#x3D;</td><td align="left">右移位赋值运算符</td><td align="left">C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="left">＆&#x3D;</td><td align="left">按位与赋值运算符</td><td align="left">C＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td align="left">^ &#x3D;</td><td align="left">按位异或赋值操作符</td><td align="left">C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td align="left">| &#x3D;</td><td align="left">按位或赋值操作符</td><td align="left">C | &#x3D; 2等价于C &#x3D; C | 2</td></tr></tbody></table><h1 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h1><p>（?:）</p><p>判断a与b是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//(逻辑判断)? 判断为真的结果 : 判断为假的结果</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> (a == b) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><h1 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h1><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象 instanceof 类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="comment">//判断cat对象是否是Cat类或子类或接口</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> cat <span class="keyword">instanceof</span> Cat;</span><br><span class="line">        System.out.println(b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">+ + - ！〜</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* &#x2F;％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt;&gt; &#x3D; &lt;&lt; &#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">&#x3D;&#x3D;  !&#x3D;</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据类型</title>
      <link href="/post/40918c0b.html"/>
      <url>/post/40918c0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="java数据类型分类"><a href="#java数据类型分类" class="headerlink" title="java数据类型分类"></a>java数据类型分类</h1><p>数据类型在编程语言中占有重要的地位。<strong>java</strong> 的数据类型分为基本数据类型和引用数据类型。</p><p>java 的数据类型如下图所示：</p><img src="/post/40918c0b/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB.png" class=""><p><strong>基本数据类型</strong>包括：<code>boolean</code>，<code>byte</code>，<code>char</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>float</code> 和 <code>double</code>。</p><p><strong>引用数据类型</strong>：它是以一种特殊的方式指向变量的实体，这种机制类似于 <code>c++</code> 的指针。这类变量在声明的时候不会分配内存，必须要另外的开辟内存空间。</p><h1 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a>java基本数据类型</h1><table><thead><tr><th>关键字</th><th>类型</th><th>位数 (8位一字节)</th><th>取值范围(表示范围)</th></tr></thead><tbody><tr><td>byte</td><td>整型</td><td>8 bit&#x2F;1字节</td><td>-2^7 ~ 2^7-1</td></tr><tr><td>short</td><td>整型</td><td>16 bit&#x2F;2字节</td><td>-2^15 ~ 2^15-1</td></tr><tr><td>int</td><td>整型</td><td>32 bit&#x2F;4字节</td><td>-2^31 ~ 2^31-1</td></tr><tr><td>long</td><td>整型</td><td>64 bit&#x2F;8字节</td><td>-2^63 ~ 2^63-1</td></tr><tr><td>float</td><td>浮点型</td><td>32 bit&#x2F;4字节</td><td>3.402823e+38 ~ 1.401298e-45</td></tr><tr><td>double</td><td>浮点型</td><td>64 bit&#x2F;8字节</td><td>1.797693e+308~ 4.9000000e-324</td></tr><tr><td>char</td><td>字符型</td><td>16 bit&#x2F;2字节</td><td>0 ~ 2^16-1</td></tr><tr><td>boolean</td><td>布尔型</td><td>32&#x2F;8</td><td>true&#x2F;false</td></tr></tbody></table><p><code>整型 </code>：</p><p>整型用于表示没有小数部分的数值，它允许是负数。Java提供了4种整型，<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code></p><p>长整型数值有一个后缀L或l</p><p>从Java 7开始，可以为数字字面量加下划线，</p><p>如用1_000_00（0或0b1111_0100_0010_0100_0000）表示一百万。</p><Br><p><code>浮点型 </code>：</p><p>​double表示这种类型的数值精度是float类型的两倍（有人称之为双精度数值）。</p><p>​float类型的数值有一个后缀F或f（例如，3.14F）。</p><p>​所有的浮点数值计算都遵循<a href="https://zhuanlan.zhihu.com/p/343033661">IEEE 754规范</a>。具体来说，下面是用于表示溢出和出错情况的三个特殊的浮点数值：</p><ul><li><p>正无穷大</p></li><li><p>负无穷大</p></li><li><p>NaN（不是一个数字）</p><p>例如，一个正整数除以0的结果为正无穷大。计算0&#x2F;0或者负数的平方根结果为NaN。</p><Br><p>Double.isNaN(x)检查是否为非数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNaN</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0.0</span>/<span class="number">0</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(Double.isNaN(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NaN</span><br><span class="line">true</span><br></pre></td></tr></table></figure><Br></li></ul><p><code>字符型 </code>:</p><p>char类型原本用于表示单个字符。不过，现在情况已经有所变化。如今，有些<a href="https://www.cnblogs.com/csguo/p/7401874.html">Unicode</a>字符可以用一个char值描述，另外一些Unicode字符则需要两个char值。</p><p>在Java中，char类型描述了UTF-16编码中的一个代码单元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="comment">//char类型的值可以表示为十六进制值，其范围从\u0000到\Uffff。</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;\u09A0&#x27;</span>;</span><br><span class="line">        <span class="comment">//char类型运算结果为int，需要强制转换成char类型</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">char</span>) (a + <span class="number">98</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">ঠ</span><br><span class="line">™</span><br><span class="line">Ã</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/csguo/p/7401874.html">Unicode编码表</a></p><Br><p><code>布尔型 </code>：布尔数据类型只有两个可能的值：真和假。使用此数据类型为跟踪真&#x2F;假条件的简单标记。这种数据类型就表示这一点信息，<strong>但是它的“大小”并不是精确定义</strong></p><p>在符合JVM规范的虚拟机中</p><ul><li><strong>如果boolean是单独使用：boolean占4个字节。</strong></li><li><strong>如果boolean是以“boolean数组”的形式使用：boolean占1个字节。</strong></li></ul><Br><p><code>默认类型 </code>：</p><p>​在没有后标的情况下，浮点型默认为double</p><p>例如：</p><ul><li>(3.14f) 为float型</li><li>(3.14)      默认为double型</li></ul><p>​在没有强制转换的情况下，有变量运算的，整数运算结果为int 型，浮点数运算结果为double型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">y</span> <span class="operator">=</span> x + <span class="number">1</span>; <span class="comment">//报错,因为x + 1后为int型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><a href="https://www.cnblogs.com/Yuakk/p/14349555.html">变量命名规范</a></li><li>变量声明和初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明变量a</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//变量a初始化</span></span><br><span class="line">         a = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//连续声明变量b,c变量</span></span><br><span class="line">        <span class="type">int</span> b,c;</span><br><span class="line">        <span class="comment">//b，c初始化</span></span><br><span class="line">        b = c = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//d变量声明及初始化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p><a href="http://www.51gjie.com/java/110.html">常量命名</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义常量PI,常量名要大写</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.1415926535</span>;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.1415926535</span><br></pre></td></tr></table></figure><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><ol><li>自动类型转换</li></ol><ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul><p>基本类型自动转换图。</p><img src="/post/40918c0b/%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2.png" class=""><p><img src="/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2.png" alt="自动转换"></p><p>虚线为可能有精度损失的转换。</p><ol start="2"><li>强制类型转换</li></ol><ul><li><p>强制类型转换通过截断小数部分将浮点值转换为整型。</p></li><li><p>如果试图将一个数值从一种类型强制转换为另一种类型，而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值。例如，（byte）300的实际值为44。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) a;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">44</span><br></pre></td></tr></table></figure><ul><li>boolean不参与转换</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>样式收集</title>
      <link href="/post/225321da.html"/>
      <url>/post/225321da.html</url>
      
        <content type="html"><![CDATA[<div class="btns rounded grid5">            <a class="button" href='https://wwd.lanzoul.com/iUk2o04i0n7i' title='下载源码'><i class='fas fa-download'></i>下载源码</a>          </div><p>置顶</p><p>sticky: 1</p><p>标签标红</p><mark class="hl-label red">xmind</mark> <p>段落标红</p><p class='p red'>Unicode：</p>字体标红<span class='p red'>Unicode：</span>//块<blockquote class="pullquote [class]"><p><a href="https://github.com/bigFunny/resource/blob/main/java%E5%90%8E%E7%AB%AF.xmind">java学习路线</a></p></blockquote><p>连接</p><div class="tag link"><a class="link-card" title="font-awesome v6" href="https://fontawesome.com/icons?from=io"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">font-awesome v6</p><p class="url">https://fontawesome.com/icons?from=io</p></div></a></div> <p>分栏</p><div class="tabs" id="大佬"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#大佬-1">大佬 1</button></li><li class="tab"><button type="button" data-href="#大佬-2">大佬 2</button></li><li class="tab"><button type="button" data-href="#大佬-3">大佬 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="大佬-1"><div class="tag link"><a class="link-card" title="大佬一" href="https://butterfly.js.org/"><div class="left"><img src="https://w.wallhaven.cc/full/j3/wallhaven-j3m8y5.png"/></div><div class="right"><p class="text">大佬一</p><p class="url">https://butterfly.js.org/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-2"><div class="tag link"><a class="link-card" title="大佬二" href="https://tzy1997.com/"><div class="left"><img src="https://w.wallhaven.cc/full/rd/wallhaven-rdwjj7.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://tzy1997.com/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-3"><div class="tag link"><a class="link-card" title="大佬二" href="https://akilar.top/"><div class="left"><img src="https://w.wallhaven.cc/full/6o/wallhaven-6oejgq.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://akilar.top/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>折叠栏</p><details blue><summary> static 修饰符 </summary>              <div class='content'>                            </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK基本介绍</title>
      <link href="/post/227cc651.html"/>
      <url>/post/227cc651.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDK-基本介绍"><a href="#JDK-基本介绍" class="headerlink" title="JDK 基本介绍"></a>JDK 基本介绍</h1><ol><li>JDK 的全称(Java Development Kit Java 开发工具包)</li></ol><blockquote class="pullquote [class]"><p>JDK &#x3D; JRE + java 的开发工具 [java, javac,javadoc,javap 等] </p></blockquote><ol start="2"><li>JDK 是提供给 Java 开发人员使用的，其中包含了 java 的开发工具，也包括了 JRE。所以安装了 JDK，就不用在单独安装 JRE 了。</li></ol><h1 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h1><ol><li>JRE(Java Runtime Environment Java 运行环境)</li></ol><blockquote class="pullquote [class]"><p>JRE &#x3D; JVM + Java 的核心类库[类] </p></blockquote><ol start="2"><li>包括 Java 虚拟机(JVM Java Virtual Machine)和 Java 程序所需的核心类库等，如果想要运行一个开发好的 Java 程序，计算机中只需要安装 JRE 即可。</li></ol><h1 id="JDK、JRE-和-JVM-的包含关系"><a href="#JDK、JRE-和-JVM-的包含关系" class="headerlink" title="JDK、JRE 和 JVM 的包含关系"></a>JDK、JRE 和 JVM 的包含关系</h1><ol><li><p><strong>JDK &#x3D; JRE +</strong> <strong>开发工具集</strong>（例如 Javac,java 编译工具等) </p></li><li><p><strong>JRE &#x3D; JVM + Java SE</strong> <strong>标准类库</strong>（java 核心类库） </p></li><li><p>如果只想运行开发好的 .class 文件只需要 JRE</p></li></ol><h1 id="JDK-8下载及安装"><a href="#JDK-8下载及安装" class="headerlink" title="JDK 8下载及安装"></a>JDK 8下载及安装</h1><div class="tag link"><a class="link-card" title="别人家教程永远是最好的" href="https://blog.csdn.net/weixin_44887352/article/details/106588830"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">别人家教程永远是最好的</p><p class="url">https://blog.csdn.net/weixin_44887352/article/details/106588830</p></div></a></div> ]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/post/518e617c.html"/>
      <url>/post/518e617c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="常用liux命令"><a href="#常用liux命令" class="headerlink" title="常用liux命令"></a>常用liux命令</h2><p>cd：改变目录</p><p>cd..：回退到上一个目录，直接cd进入默认目录</p><p>pwd：显示当前目录路径</p><p>ls(ll)：列出当前目录中所有文件</p><p>touch：新建一个文件，如touch index.js</p><p>rm：删除一个文件用法与touch差不多</p><p>mkdir：新建一个目录</p><p>rm -f：删除一个文件夹</p><p>mv：移动文件，例：mv index.html src，将index文件移到src</p><p>reset：重新初始化</p><p>clear：清屏</p><p>history：查看历史</p><p>help：帮助</p><p>exit：退出</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>查看配置：git config -l</p><p>查看不同级别的配置文件：</p><ul><li><p>查看系统配置</p><p>git config –system –list</p></li><li><p>查看当前用户</p><p>git config –global –list</p></li></ul><p>用户名字与邮箱配置：</p><ul><li>git config –global user.name “sda”</li><li>git config –global user.email “<a href="mailto:&#115;&#100;&#x61;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#115;&#100;&#x61;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><img src="/post/518e617c/1662041323233.png" class=""><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><h3 id="项目创建及克隆"><a href="#项目创建及克隆" class="headerlink" title="项目创建及克隆"></a>项目创建及克隆</h3><p>初始化项目（将项目变成git管理的项目）：git init</p><p>克隆远程仓库：git clone [url]</p><p>ps:url 的复制地点</p><h3 id="git基"><a href="#git基" class="headerlink" title="git基"></a>git基</h3><p>查看文件状态：git status [filename] </p><p>查看所有文件状态：git status</p><p>生成公钥：ssh-keygen -t rsa</p><p>1.创建一个文件，用git init将该文件git化</p><p>2.选择克隆或者新创</p><p>3.git add.                                           将所有文件存到暂存区</p><p>4.git commit -m  “消息内容”        提交暂存区内容到本地仓库 </p><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><img src="/post/518e617c/1662045623748.png" class=""><h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><p>1.注册</p><p>2.设置公钥</p><p>​生成公钥：ssh-keygen -t rsa</p><p>​ssh-keygen -t rsa -C “邮箱地址”</p><p>​    测试公钥是否绑定成功：ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#109;</a></p><img src="/post/518e617c/%E5%85%AC%E9%92%A5.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A52.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A53.png" class=""><img src="/post/518e617c/%E5%85%AC%E9%92%A54.png" class=""><p>3.将公钥添加到码云或github中</p><p>4.创建仓库（已经注册了为以下步骤）</p><img src="/post/518e617c/%E4%BB%93%E5%BA%93.png" class=""><p>5.克隆连接本地</p><p>​创建一个文件</p><p>​然后打开git输入：</p><img src="/post/518e617c/git.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化项目（将项目变成git管理的项目）：</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#克隆远程仓库（克隆远程仓库）：</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>6.复制要添加的文件到克隆的文件</p><img src="/post/518e617c/Snipaste_2022-09-05_23-03-05.png" class=""><p>7.**git add .**将文件提供到暂存区</p><img src="/post/518e617c/idea%E4%B8%ADgit%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8F%B0.png" class=""><p>8.git commit 提交到本地仓库</p><img src="/post/518e617c/Snipaste_2022-09-05_23-05-21.png" class=""><p>便于commit</p><p>9.git push 提交到远程仓库</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 新建一个分支但仍然停留在当前分支</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git brand -d dev</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete dev</span><br><span class="line">git branch -dr dev</span><br><span class="line"><span class="comment"># 推送分支到远程仓库</span></span><br><span class="line">git push origin dev</span><br><span class="line"><span class="comment"># 查看提交记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看本地仓库</span></span><br><span class="line">git ls-files</span><br><span class="line"><span class="comment"># 查看本地仓库[dir下]</span></span><br><span class="line">git ls-files <span class="built_in">dir</span>/</span><br><span class="line"><span class="comment"># 删除暂缓区内容</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;</span><br><span class="line"><span class="comment"># 删除暂缓区文件夹下所有文件</span></span><br><span class="line">git <span class="built_in">rm</span> -r --cached <span class="built_in">dir</span>/</span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">git branch -d localBranchName</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete remoteBranchName</span><br></pre></td></tr></table></figure><h2 id="一般创建远程项目步骤"><a href="#一般创建远程项目步骤" class="headerlink" title="一般创建远程项目步骤"></a>一般创建远程项目步骤</h2><div class="tabs" id="步骤"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#步骤-1">步骤 1</button></li><li class="tab"><button type="button" data-href="#步骤-2">步骤 2</button></li><li class="tab"><button type="button" data-href="#步骤-3">步骤 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="步骤-1"><blockquote class="pullquote [class]"><p>在githud或者gitee创建仓库</p></blockquote><p>xxxx为你githud或者gitee的名，如<a href="https://github.com/bigFunny">https://github.com/bigFunny</a></p><p>你的github主页:<a href="https://github.com/xxxxx">https://github.com/xxxxx</a></p><p>你的gitee主页:<a href="https://gitee.com/xxxxx">https://gitee.com/xxxxx</a></p><blockquote class="pullquote [class]"><p>点击repositories</p></blockquote><blockquote class="pullquote [class]"><p>点击new</p></blockquote><img src="/post/518e617c/%E4%BB%93%E5%BA%932.png" class=""><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="步骤-2"><blockquote class="pullquote [class]"><p>复制远程仓库路径</p></blockquote><img src="/post/518e617c/%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%B7%AF%E5%BE%84.png" class=""><blockquote class="pullquote [class]"><p>克隆远程仓库</p></blockquote><p>在你喜欢的文件下git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库路径</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="步骤-3"><blockquote class="pullquote [class]"><p>将你的项目复制到带有.git的文件夹下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;骚话&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>如果是push到分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-learning</title>
      <link href="/post/7904333c.html"/>
      <url>/post/7904333c.html</url>
      
        <content type="html"><![CDATA[<h1 id="java学习路线"><a href="#java学习路线" class="headerlink" title="java学习路线"></a>java学习路线</h1><img src="/post/7904333c/java.png" class=""><mark class="hl-label red">xmind</mark> 文件下载 <blockquote class="pullquote [class]"><p><a href="https://github.com/bigFunny/resource/blob/main/java%E5%90%8E%E7%AB%AF.xmind">java学习路线</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/post/f76efcad.html"/>
      <url>/post/f76efcad.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="btns rounded grid5">            <a class="button" href='https://wwd.lanzoul.com/iUk2o04i0n7i' title='下载源码'><i class='fas fa-download'></i>下载源码</a>          </div><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nvm off                  // 禁用 Node.js 版本管理(不卸载任何东西)</span><br><span class="line">nvm on                   // 启用 Node.js 版本管理</span><br><span class="line">nvm v || nvm version     // 查看 nvm 版本 </span><br><span class="line">nvm use <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>        // 切换使用指定的版本 node</span><br><span class="line">nvm ls                   // 列出所有安装的版本</span><br><span class="line">nvm list available       // 显示可以安装的所有 Node.js 的版本</span><br><span class="line">nvm ls-remote            // 列出所以远程服务器的版本（官方 node version list）</span><br><span class="line">nvm current              // 显示当前的版本</span><br><span class="line">nvm alias                // 给不同的版本号添加别名</span><br><span class="line">nvm unalias              // 删除已定义的别名</span><br><span class="line">nvm reinstall-packages   // 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm uninstall <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>  // 删除已安装的指定版本，语法与 install 类似</span><br><span class="line">nvm install <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>    // 安装指定版本，可模糊安装，如：安装v6.2.0，既可nvm install v6.2.0，又可nvm install 6.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly</title>
      <link href="/post/18195.html"/>
      <url>/post/18195.html</url>
      
        <content type="html"><![CDATA[<h1 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h1><p>Butterfly支持 <div class="tag link"><a class="link-card" title="font-awesome v6" href="https://fontawesome.com/icons?from=io"><div class="left"><img src="https://w.wallhaven.cc/full/g7/wallhaven-g7kk1d.jpg"/></div><div class="right"><p class="text">font-awesome v6</p><p class="url">https://fontawesome.com/icons?from=io</p></div></a></div> 图标</p><p>更新番剧信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80">https://butterfly.js.org/posts/4aa8abbe/#%E8%AA%9E%E8%A8%80</a></p></div></div><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99">https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99</a></p></div></div><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%B0%8E%E8%88%AA%E8%8F%9C%E5%96%AE">https://butterfly.js.org/posts/4aa8abbe/#%E5%B0%8E%E8%88%AA%E8%8F%9C%E5%96%AE</a></p></div></div><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC">https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC</a></p></div></div><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99">https://butterfly.js.org/posts/4aa8abbe/#%E7%A4%BE%E4%BA%A4%E5%9C%96%E6%A8%99</a></p></div></div><h2 id="顶部配图"><a href="#顶部配图" class="headerlink" title="顶部配图"></a>顶部配图</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96</a></p></div></div><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%82%E9%83%A8%E5%9C%96</a></p></div></div><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E5%B0%81%E9%9D%A2</a></p></div></div><h2 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA">https://butterfly.js.org/posts/4aa8abbe/#%E6%96%87%E7%AB%A0meta%E9%A1%AF%E7%A4%BA</a></p></div></div><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%AD%E5%83%8F">https://butterfly.js.org/posts/4aa8abbe/#%E9%A0%AD%E5%83%8F</a></p></div></div><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%9C%96%E7%89%87%E6%8F%8F%E8%BF%B0">https://butterfly.js.org/posts/4aa8abbe/#%E5%9C%96%E7%89%87%E6%8F%8F%E8%BF%B0</a></p></div></div><h2 id="复制相关"><a href="#复制相关" class="headerlink" title="复制相关"></a>复制相关</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E8%A4%87%E8%A3%BD%E7%9B%B8%E9%97%9C%E9%85%8D%E7%BD%AE">https://butterfly.js.org/posts/4aa8abbe/#%E8%A4%87%E8%A3%BD%E7%9B%B8%E9%97%9C%E9%85%8D%E7%BD%AE</a></p></div></div><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%8D%9A%E5%AE%A2%E5%B9%B4%E4%BB%BD">https://butterfly.js.org/posts/4aa8abbe/#%E5%8D%9A%E5%AE%A2%E5%B9%B4%E4%BB%BD</a></p></div></div><h2 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B0%A1%E7%B9%81%E8%BD%89%E6%8F%9B">https://butterfly.js.org/posts/4aa8abbe/#%E7%B0%A1%E7%B9%81%E8%BD%89%E6%8F%9B</a></p></div></div><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E5%81%B4%E9%82%8A%E6%8E%92%E7%89%88">https://butterfly.js.org/posts/4aa8abbe/#%E5%81%B4%E9%82%8A%E6%8E%92%E7%89%88</a></p></div></div><h2 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h2><div class="hide-block"><button type="button" class="hide-button" style="">参考文档    </button><div class="hide-content"><p>参考文档：<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89</a></p></div></div><h2 id="写博客的常用标签"><a href="#写博客的常用标签" class="headerlink" title="写博客的常用标签"></a>写博客的常用标签</h2><div class="site-card-group"><a class="site-card" href="https://tzy1997.com/articles/0xiipgum"><div class="img"><img src="https://w.wallhaven.cc/full/y8/wallhaven-y8622k.jpg"/></div><div class="info"><img src="https://w.wallhaven.cc/full/o3/wallhaven-o3km89.png"/><span class="title">常用标签</span><span class="desc"> 写博客可能用到的标签外挂</span></div></a></div><h2 id="参考大佬的博客："><a href="#参考大佬的博客：" class="headerlink" title="参考大佬的博客："></a>参考大佬的博客：</h2><div class="tabs" id="大佬"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#大佬-1">大佬 1</button></li><li class="tab"><button type="button" data-href="#大佬-2">大佬 2</button></li><li class="tab"><button type="button" data-href="#大佬-3">大佬 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="大佬-1"><div class="tag link"><a class="link-card" title="大佬一" href="https://butterfly.js.org/"><div class="left"><img src="https://w.wallhaven.cc/full/j3/wallhaven-j3m8y5.png"/></div><div class="right"><p class="text">大佬一</p><p class="url">https://butterfly.js.org/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-2"><div class="tag link"><a class="link-card" title="大佬二" href="https://tzy1997.com/"><div class="left"><img src="https://w.wallhaven.cc/full/rd/wallhaven-rdwjj7.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://tzy1997.com/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="大佬-3"><div class="tag link"><a class="link-card" title="大佬二" href="https://akilar.top/"><div class="left"><img src="https://w.wallhaven.cc/full/6o/wallhaven-6oejgq.jpg"/></div><div class="right"><p class="text">大佬二</p><p class="url">https://akilar.top/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/post/21358.html"/>
      <url>/post/21358.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><p>视频:<a href="https://www.youtube.com/watch?v=AIqBubK6ZLc">https://www.youtube.com/watch?v=AIqBubK6ZLc</a></p><ul><li>添加文案</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文件名</span><br></pre></td></tr></table></figure><ul><li>添加草稿b</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft b</span><br></pre></td></tr></table></figure><ul><li>公开草稿b</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish b</span><br></pre></td></tr></table></figure><ul><li>创建新目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 目录名</span><br></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>视频：<a href="https://www.youtube.com/watch?v=pfD6FCZdW4Q">https://www.youtube.com/watch?v=pfD6FCZdW4Q</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">title: 页面标题</span><br><span class="line"></span><br><span class="line">date: 页面创建日期</span><br><span class="line"></span><br><span class="line">tags: 标签</span><br><span class="line"></span><br><span class="line">type: 标签、分类和友情链接三个页面需要配置</span><br><span class="line"></span><br><span class="line">categories:分类</span><br><span class="line"></span><br><span class="line">updated: 页面更新日期</span><br><span class="line"></span><br><span class="line">comments: 显示页面评论模块(默认 true)</span><br><span class="line"></span><br><span class="line">description: 页面描述</span><br><span class="line"></span><br><span class="line">keywords: 页面关键字</span><br><span class="line"></span><br><span class="line">top_img: 页面顶部图片</span><br><span class="line"></span><br><span class="line">cover: 文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</span><br><span class="line"></span><br><span class="line">mathjax: 显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">katex: 显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</span><br><span class="line"></span><br><span class="line">aside: 显示侧边栏 (默认 true)</span><br><span class="line"></span><br><span class="line">aplayer: 在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</span><br><span class="line"></span><br><span class="line">highlight_shrink: 配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</span><br><span class="line"></span><br><span class="line">copyright: 显示文章版权模块(默认为设置中post_copyright的enable配置)</span><br><span class="line"></span><br><span class="line">copyright_author: 文章版权模块的文章作者</span><br><span class="line"></span><br><span class="line">copyright_author_href: 文章版权模块的文章作者链接</span><br><span class="line"></span><br><span class="line">copyright_url: 文章版权模块的文章连结链接</span><br><span class="line"></span><br><span class="line">copyright_info: 文章版权模块的版权声明文字</span><br><span class="line"></span><br><span class="line">toc: 显示文章TOC(默认为设置中toc的enable配置)</span><br><span class="line"></span><br><span class="line">toc_number: 显示toc_number(默认为设置中toc的number配置)</span><br><span class="line"></span><br><span class="line">toc_style_simple: 显示 toc 简洁模式</span><br></pre></td></tr></table></figure><h2 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h2><p>视频：<a href="https://www.youtube.com/watch?v=I07XMi7MHd4&amp;t=1s">https://www.youtube.com/watch?v=I07XMi7MHd4&amp;t=1s</a></p><p>详细文档：<a href="https://hexo.io/docs/tag-plugins">https://hexo.io/docs/tag-plugins</a></p><ul><li>Block Quote</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><ul><li>Code Block</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">额外选项</th><th align="left">描述</th><th align="left">默认</th></tr></thead><tbody><tr><td align="left"><code>line_number</code></td><td align="left">显示行号</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>line_threshold</code></td><td align="left">只要代码块的行数超过这个阈值，就只显示行号。</td><td align="left"><code>0</code></td></tr><tr><td align="left"><code>highlight</code></td><td align="left">启用代码突出显示</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>first_line</code></td><td align="left">指定第一行号</td><td align="left"><code>1</code></td></tr><tr><td align="left"><code>mark</code></td><td align="left">行突出显示特定行，每个值用逗号分隔。使用破折号指定数字范围 示例：<code>mark:1,4-7,10</code>将标记第 1、4 到 7 和 10 行。</td><td align="left"></td></tr><tr><td align="left"><code>wrap</code></td><td align="left">将代码块包装在<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">&#96;&#96;</a></td><td align="left"><code>true</code></td></tr></tbody></table><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">alert(&#x27;Hello World!&#x27;); </span><br></pre></td></tr></table></figure><ul><li>Pull Quote</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><blockquote class="pullquote [class]"><p>content</p></blockquote><ul><li>jsFiddle</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>Gist</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><script src="//gist.github.com/gist_id.js?file=[filename]"></script><ul><li>iframe</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe src="url" width="[width]" height="[height]" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>Image</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><img src="/path/to/image" class="[class names]" title="[width] [height] " alt="title text"><ul><li>Link</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><ul><li>Include Code</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><ul><li>YouTube</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id [type] [cookie] %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>Vimeo</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id [width] [height] %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://player.vimeo.com/video/video_id,[width],[height]" frameborder="0" loading="lazy" allowfullscreen></iframe></div><ul><li>Include Posts</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><ul><li>Embed image</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://wallroom.io/img/1920x1200/bg-0f3fc97.jpg&quot; title=&quot;lorem ipsum&quot; alt=&quot;dolor&quot;&gt;</span><br></pre></td></tr></table></figure><img src="https://wallroom.io/img/1920x1200/bg-0f3fc97.jpg" title="实验图" alt="dolor"><ul><li>Raw（解决错误信息）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h2 id="Asset-Folders"><a href="#Asset-Folders" class="headerlink" title="Asset Folders"></a>Asset Folders</h2><img src="/post/21358/p3.png" class=""><p>文件放的地点：</p><img src="/post/21358/p4.png" class="" title="文件放的地方">]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
